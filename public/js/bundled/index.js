// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"9HkbZ":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "3ed70733f11c03ed";
module.bundle.HMR_BUNDLE_ID = "a47dc6ba56fb48e3";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"2TEO4":[function(require,module,exports) {
/* eslint-disable */ var _flowbite = require("flowbite");
var _weightSetter = require("./weightSetter");
//authentication
var _authentication = require("./authentication");
var _updateSettings = require("./updateSettings");
//articles
var _manageArticle = require("./manageArticle");
var _initUpdateArticle = require("./initUpdateArticle");
//symptom
var _manageSymptom = require("./manageSymptom");
var _initUpdateSymptom = require("./initUpdateSymptom");
//solution
var _manageSolution = require("./manageSolution");
var _initUpdateSolution = require("./initUpdateSolution");
//history
var _manageHistory = require("./manageHistory");
//result
var _manageResult = require("./manageResult");
const XLSX = require("583211e01824c94f");
const moment = require("2acf745a6fcf02e9");
//default drawer
const confirmDrawer = document.getElementById("confirm-drawer");
//authentication
const loginDrawer = document.getElementById("login-drawer");
const registerDrawer = document.getElementById("register-drawer");
const settingAccountDrawer = document.getElementById("setting-account-drawer");
const settingPasswordDrawer = document.getElementById("setting-password-drawer");
const btnSettingAccount = document.getElementById("btn-setting-account");
const btnSettingPassword = document.getElementById("btn-setting-password");
const btnLogin = document.getElementById("btn-login");
const btnRegister = document.getElementById("btn-register");
const loginForm = document.getElementById("login-form");
const registerForm = document.getElementById("register-form");
const btnLogOut = document.getElementById("btn-log-out");
const inputImgUpdate = document.getElementById("img-update-input");
const imgUpdate = document.getElementById("img-update");
const settingAccountForm = document.getElementById("setting-account-form");
const settingPasswordForm = document.getElementById("setting-password-form");
// article
const btnAddArticle = document.getElementById("btn-add-article");
const articleDrawer = document.getElementById("article-drawer");
const manageArticleForm = document.getElementById("manage-article-form");
const btnEditArticle = document.querySelectorAll(".btn-edit-article");
const btnDeleteArticle = document.querySelectorAll(".btn-delete-article");
const boxArticle = document.querySelectorAll(".box-article");
const viewArticleDrawer = document.getElementById("view-article-drawer");
//symptom
const btnAddSymptom = document.getElementById("btn-add-symptom");
const symptomDrawer = document.getElementById("symptom-drawer");
const manageSymptomForm = document.getElementById("manage-symptom-form");
const btnEditSymptom = document.querySelectorAll(".btn-edit-symptom");
const btnDeleteSymptom = document.querySelectorAll(".btn-delete-symptom");
const btnDeleteAllSymptoms = document.getElementById("btn-delete-all-symptoms");
//solution
const btnAddSolution = document.getElementById("btn-add-solution");
const solutionDrawer = document.getElementById("solution-drawer");
const manageSolutionForm = document.getElementById("manage-solution-form");
const btnEditSolution = document.querySelectorAll(".btn-edit-solution");
const btnDeleteSolution = document.querySelectorAll(".btn-delete-solution");
const btnDeleteAllSolutions = document.getElementById("btn-delete-all-solutions");
//history
const selectFilterHistory = document.getElementById("select-filter-history");
const btnDeleteAllHistory = document.getElementById("btn-delete-all-results");
const btnDeleteHistory = document.querySelectorAll(".btn-delete-result");
//consultation
const consultationForm = document.getElementById("consult-form");
const selectAnswer = document.querySelectorAll(".select-answer");
// 1) START AUTHENTICATION
if (btnLogin && loginDrawer) btnLogin.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(loginDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-login");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (btnRegister && registerDrawer) btnRegister.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(registerDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-register");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (btnSettingAccount && settingAccountDrawer) btnSettingAccount.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(settingAccountDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-setting-account");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (btnSettingPassword && settingPasswordDrawer) btnSettingPassword.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(settingPasswordDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-setting-password");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (loginForm) loginForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const email = document.getElementById("email-login").value;
    const password = document.getElementById("password-login").value;
    (0, _authentication.login)(email, password);
});
if (registerForm) registerForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const name = document.getElementById("name-register").value;
    const email = document.getElementById("email-register").value;
    const password = document.getElementById("password-register").value;
    const passwordConfirm = document.getElementById("password-confirm-register").value;
    (0, _authentication.register)(name, email, password, passwordConfirm);
});
if (btnLogOut && confirmDrawer) btnLogOut.addEventListener("click", ()=>{
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = "Anda yakin ingin keluar dari aplikasi?";
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", ()=>{
        drawer.hide();
        (0, _authentication.logout)();
    });
});
if (inputImgUpdate && imgUpdate) inputImgUpdate.addEventListener("change", ()=>{
    const reader = new FileReader();
    reader.onload = function() {
        imgUpdate.src = reader.result;
    };
    if (inputImgUpdate.files[0]) reader.readAsDataURL(inputImgUpdate.files[0]);
});
if (settingAccountForm && inputImgUpdate && confirmDrawer) settingAccountForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const form = new FormData();
    form.append("name", document.getElementById("name-auth").value);
    form.append("email", document.getElementById("email-auth").value);
    if (inputImgUpdate.files[0]) form.append("photo", inputImgUpdate.files[0]);
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = "Anda yakin ingin memperbarui data akun?";
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        (0, _updateSettings.updateSettings)(form, "data");
    });
});
if (settingPasswordForm && confirmDrawer) settingPasswordForm.addEventListener("submit", async (e)=>{
    e.preventDefault();
    const passwordCurrent = document.getElementById("password-current").value;
    const password = document.getElementById("password").value;
    const passwordConfirm = document.getElementById("password-confirm").value;
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = "Anda yakin ingin memperbarui kata sandi?";
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        await (0, _updateSettings.updateSettings)({
            passwordCurrent,
            password,
            passwordConfirm
        }, "password");
        document.getElementById("password-current").value = "";
        document.getElementById("password").value = "";
        document.getElementById("password-confirm").value = "";
    });
});
// 1) END AUTHENTICATION
// 2) START ARTICLE
if (btnAddArticle && articleDrawer) btnAddArticle.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(articleDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-article");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (manageArticleForm) manageArticleForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const id = manageArticleForm.dataset.id ? JSON.parse(manageArticleForm.dataset.id) : undefined;
    const title = document.getElementById("title").value;
    const description = document.getElementById("description").value;
    (0, _manageArticle.manageArticles)({
        title,
        description
    }, id);
});
if (btnEditArticle && btnEditArticle.length > 0 && articleDrawer) btnEditArticle.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            (0, _initUpdateArticle.initUpdateArticleForm)(item);
            const options = {
                placement: "left",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30",
                onHide: ()=>(0, _initUpdateArticle.clearUpdateArticleForm)()
            };
            const drawer = new (0, _flowbite.Drawer)(articleDrawer, options);
            drawer.show();
            const btnClose = document.getElementById("btn-close-article");
            btnClose.addEventListener("click", ()=>{
                drawer.hide();
            });
        }
    });
});
if (btnDeleteArticle && btnDeleteArticle.length > 0 && confirmDrawer) btnDeleteArticle.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            const options = {
                placement: "top",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
            };
            const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
            drawer.show();
            document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus data artikel "${item.title}"?`;
            const btnSave = document.getElementById("btn-positive-confirm");
            const btnClose = document.getElementById("btn-close-confirm");
            const btnBack = document.getElementById("btn-negative-confirm");
            btnClose.addEventListener("click", ()=>drawer.hide());
            btnBack.addEventListener("click", ()=>drawer.hide());
            btnSave.addEventListener("click", async ()=>{
                drawer.hide();
                (0, _manageArticle.deleteArticle)(item._id);
            });
        }
    });
});
if (boxArticle && boxArticle.length > 0 && viewArticleDrawer) boxArticle.forEach((box)=>{
    box.addEventListener("click", ()=>{
        const item = box.dataset.item ? JSON.parse(box.dataset.item) : undefined;
        if (item) {
            const options = {
                placement: "left",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
            };
            const drawer = new (0, _flowbite.Drawer)(viewArticleDrawer, options);
            drawer.show();
            const title = document.getElementById("title-view-article");
            const description = document.getElementById("description-view-article");
            const btnClose = document.getElementById("btn-close-view-article");
            title.textContent = `${item.title}`;
            description.textContent = `${item.description}`;
            btnClose.addEventListener("click", ()=>{
                drawer.hide();
            });
        }
    });
});
// 2) END ARTICLE
// 3) START SYMPTOM
if (btnAddSymptom && symptomDrawer) btnAddSymptom.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(symptomDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-symptom");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (manageSymptomForm) manageSymptomForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const id = manageSymptomForm.dataset.id ? JSON.parse(manageSymptomForm.dataset.id) : undefined;
    const name = document.getElementById("symptom-name").value;
    const factor = document.getElementById("symptom-factor").value;
    (0, _manageSymptom.manageSymptom)({
        name,
        factor
    }, id);
});
if (btnEditSymptom && btnEditSymptom.length > 0 && symptomDrawer) btnEditSymptom.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            (0, _initUpdateSymptom.initUpdateSymptomForm)(item);
            const options = {
                placement: "left",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30",
                onHide: ()=>(0, _initUpdateSymptom.clearUpdateSymptomForm)()
            };
            const drawer = new (0, _flowbite.Drawer)(symptomDrawer, options);
            drawer.show();
            const btnClose = document.getElementById("btn-close-symptom");
            btnClose.addEventListener("click", ()=>{
                drawer.hide();
            });
        }
    });
});
if (btnDeleteSymptom && btnDeleteSymptom.length > 0 && confirmDrawer) btnDeleteSymptom.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            const options = {
                placement: "top",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
            };
            const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
            drawer.show();
            document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus data gejala "${item.name}"?`;
            const btnSave = document.getElementById("btn-positive-confirm");
            const btnClose = document.getElementById("btn-close-confirm");
            const btnBack = document.getElementById("btn-negative-confirm");
            btnClose.addEventListener("click", ()=>drawer.hide());
            btnBack.addEventListener("click", ()=>drawer.hide());
            btnSave.addEventListener("click", async ()=>{
                drawer.hide();
                (0, _manageSymptom.deleteSymptom)(item._id);
            });
        }
    });
});
if (btnDeleteAllSymptoms && confirmDrawer) btnDeleteAllSymptoms.addEventListener("click", ()=>{
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus semua data gejala? Tindakan ini tidak bisa dipulihkan!`;
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        (0, _manageSymptom.deleteAllSymptom)();
    });
});
// 3) END SYMPTOM
// 4) START SOLUTION
if (btnAddSolution && solutionDrawer) btnAddSolution.addEventListener("click", ()=>{
    const options = {
        placement: "left",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(solutionDrawer, options);
    drawer.show();
    const btnClose = document.getElementById("btn-close-solution");
    btnClose.addEventListener("click", ()=>{
        drawer.hide();
    });
});
if (manageSolutionForm) manageSolutionForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const id = manageSolutionForm.dataset.id ? JSON.parse(manageSolutionForm.dataset.id) : undefined;
    const name = document.getElementById("solution-name").value;
    const addictionLevel = document.getElementById("solution-addiction-level").value;
    (0, _manageSolution.manageSolution)({
        name,
        addictionLevel
    }, id);
});
if (btnEditSolution && btnEditSolution.length > 0 && solutionDrawer) btnEditSolution.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            (0, _initUpdateSolution.initUpdateSolutionForm)(item);
            const options = {
                placement: "left",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30",
                onHide: ()=>(0, _initUpdateSolution.clearUpdateSolutionForm)()
            };
            const drawer = new (0, _flowbite.Drawer)(solutionDrawer, options);
            drawer.show();
            const btnClose = document.getElementById("btn-close-solution");
            btnClose.addEventListener("click", ()=>{
                drawer.hide();
            });
        }
    });
});
if (btnDeleteSolution && btnDeleteSolution.length > 0 && confirmDrawer) btnDeleteSolution.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            const options = {
                placement: "top",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
            };
            const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
            drawer.show();
            document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus data solusi pada tingkat kecanduan ${item.addictionLevel}?`;
            const btnSave = document.getElementById("btn-positive-confirm");
            const btnClose = document.getElementById("btn-close-confirm");
            const btnBack = document.getElementById("btn-negative-confirm");
            btnClose.addEventListener("click", ()=>drawer.hide());
            btnBack.addEventListener("click", ()=>drawer.hide());
            btnSave.addEventListener("click", async ()=>{
                drawer.hide();
                (0, _manageSolution.deleteSolution)(item._id);
            });
        }
    });
});
if (btnDeleteAllSolutions && confirmDrawer) btnDeleteAllSolutions.addEventListener("click", ()=>{
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus semua data solusi? Tindakan ini tidak bisa dipulihkan!`;
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        (0, _manageSolution.deleteAllSolution)();
    });
});
// 4) END SOLUTION
// 5) START HISTORY
if (selectFilterHistory) selectFilterHistory.addEventListener("change", (e)=>{
    e.preventDefault();
    const url = new URL(location.href);
    const searchParams = url.searchParams;
    if (e.target.value) {
        const filter = e.target.value * 1;
        // location.assign(`/history?filter=${filter}`);
        searchParams.set("filter", filter);
    } else // location.assign('/history');
    searchParams.delete("filter");
    // Terapkan perubahan ke URL
    url.search = searchParams.toString();
    // Dapatkan URL yang sudah diubah
    const modifiedUrl = url.href;
    // Gunakan modifiedUrl untuk penggunaan selanjutnya, misalnya untuk mengarahkan pengguna ke URL yang sudah diubah
    location.href = modifiedUrl;
});
if (btnDeleteAllHistory && confirmDrawer) btnDeleteAllHistory.addEventListener("click", ()=>{
    const userId = btnDeleteAllHistory.dataset.user;
    if (!userId) return;
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus semua data riwayat? Tindakan ini tidak bisa dipulihkan!`;
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        (0, _manageHistory.deletHistoryByUser)(userId);
    });
});
if (btnDeleteHistory && btnDeleteHistory.length > 0 && confirmDrawer) btnDeleteHistory.forEach((btn)=>{
    btn.addEventListener("click", ()=>{
        const item = btn.dataset.item ? JSON.parse(btn.dataset.item) : undefined;
        if (item) {
            const options = {
                placement: "top",
                backdrop: true,
                bodyScrolling: false,
                edge: false,
                edgeOffset: "",
                backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
            };
            const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
            drawer.show();
            const date = moment(item.createdAt).format("DD-MM-YYYY HH:mm");
            document.getElementById("message-confirm").textContent = `Anda yakin akan menghapus data riwayat pada tanggal "${date}"?`;
            const btnSave = document.getElementById("btn-positive-confirm");
            const btnClose = document.getElementById("btn-close-confirm");
            const btnBack = document.getElementById("btn-negative-confirm");
            btnClose.addEventListener("click", ()=>drawer.hide());
            btnBack.addEventListener("click", ()=>drawer.hide());
            btnSave.addEventListener("click", async ()=>{
                drawer.hide();
                (0, _manageHistory.deleteHistory)(item._id);
            });
        }
    });
});
// 5) END HISTORY
// 6) START CONSULT
if (consultationForm && selectAnswer && selectAnswer.length > 0 && confirmDrawer) consultationForm.addEventListener("submit", (e)=>{
    e.preventDefault();
    const { user, title } = consultationForm.dataset;
    if (!user || !title) {
        console.log("Data not found");
        return;
    }
    const dataSalience = [];
    const dataMoodModification = [];
    const dataTolerance = [];
    const withdrawalSymptom = [];
    const dataConflict = [];
    const dataRelapse = [];
    selectAnswer.forEach((selectAns)=>{
        const factor = selectAns.dataset.factor;
        const value = (0, _weightSetter.setDataWeight)(selectAns.value);
        if (factor && factor === "salience") dataSalience.push(value);
        if (factor && factor === "mood modification") dataMoodModification.push(value);
        if (factor && factor === "tolerance") dataTolerance.push(value);
        if (factor && factor === "withdrawal symptoms") withdrawalSymptom.push(value);
        if (factor && factor === "conflict") dataConflict.push(value);
        if (factor && factor === "relapse") dataRelapse.push(value);
    });
    // console.log({
    //   dataSalience,
    //   dataMoodModification,
    //   dataTolerance,
    //   withdrawalSymptom,
    //   dataConflict,
    //   dataRelapse,
    // });
    const masterData = [
        {
            name: "salience",
            value: dataSalience.reduce((a, b)=>a + b, 0)
        },
        {
            name: "mood modification",
            value: dataMoodModification.reduce((a, b)=>a + b, 0)
        },
        {
            name: "tolerance",
            value: dataTolerance.reduce((a, b)=>a + b, 0)
        },
        {
            name: "withdrawal symptoms",
            value: withdrawalSymptom.reduce((a, b)=>a + b, 0)
        },
        {
            name: "conflict",
            value: dataConflict.reduce((a, b)=>a + b, 0)
        },
        {
            name: "relapse",
            value: dataRelapse.reduce((a, b)=>a + b, 0)
        }
    ];
    // console.log(masterData);
    const options = {
        placement: "top",
        backdrop: true,
        bodyScrolling: false,
        edge: false,
        edgeOffset: "",
        backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30"
    };
    const drawer = new (0, _flowbite.Drawer)(confirmDrawer, options);
    drawer.show();
    document.getElementById("message-confirm").textContent = `Anda yakin ingin melanjutkan?`;
    const btnSave = document.getElementById("btn-positive-confirm");
    const btnClose = document.getElementById("btn-close-confirm");
    const btnBack = document.getElementById("btn-negative-confirm");
    btnClose.addEventListener("click", ()=>drawer.hide());
    btnBack.addEventListener("click", ()=>drawer.hide());
    btnSave.addEventListener("click", async ()=>{
        drawer.hide();
        (0, _manageResult.addDataResult)({
            user: user,
            weight: masterData
        }, title);
    });
});
 // 7) END CONSULT

},{"583211e01824c94f":"eK339","flowbite":"hJBAi","./authentication":"h2YSr","./updateSettings":"iSaaI","./manageArticle":"b7MWQ","./initUpdateArticle":"5fVuK","./manageSymptom":"fAVeq","./initUpdateSymptom":"jkIAc","./manageSolution":"ldihW","./initUpdateSolution":"eGlki","./manageHistory":"gRiT8","./manageResult":"ftdHz","./weightSetter":"jFM8f","2acf745a6fcf02e9":"8RsnC"}],"eK339":[function(require,module,exports) {
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported XLSX */ /*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "set_cptable", ()=>set_cptable);
parcelHelpers.export(exports, "set_fs", ()=>set_fs);
parcelHelpers.export(exports, "version", ()=>version);
parcelHelpers.export(exports, "parse_xlscfb", ()=>parse_xlscfb);
parcelHelpers.export(exports, "parse_zip", ()=>parse_zip);
parcelHelpers.export(exports, "read", ()=>readSync);
parcelHelpers.export(exports, "readFile", ()=>readFileSync);
parcelHelpers.export(exports, "readFileSync", ()=>readFileSync);
parcelHelpers.export(exports, "write", ()=>writeSync);
parcelHelpers.export(exports, "writeFile", ()=>writeFileSync);
parcelHelpers.export(exports, "writeFileSync", ()=>writeFileSync);
parcelHelpers.export(exports, "writeFileAsync", ()=>writeFileAsync);
parcelHelpers.export(exports, "writeXLSX", ()=>writeSyncXLSX);
parcelHelpers.export(exports, "writeFileXLSX", ()=>writeFileSyncXLSX);
parcelHelpers.export(exports, "utils", ()=>utils);
parcelHelpers.export(exports, "stream", ()=>__stream);
parcelHelpers.export(exports, "SSF", ()=>SSF);
parcelHelpers.export(exports, "CFB", ()=>CFB);
var Buffer = require("f481c164bc92069e").Buffer;
var process = require("1e1b0fdaf6fdd859");
var XLSX = {};
XLSX.version = "0.18.5";
var current_codepage = 1200, current_ansi = 1252;
var VALID_ANSI = [
    874,
    932,
    936,
    949,
    950,
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    10000
];
/* ECMA-376 Part I 18.4.1 charset to codepage mapping */ var CS2CP = {
    /*::[*/ 0: 1252,
    /* ANSI */ /*::[*/ 1: 65001,
    /* DEFAULT */ /*::[*/ 2: 65001,
    /* SYMBOL */ /*::[*/ 77: 10000,
    /* MAC */ /*::[*/ 128: 932,
    /* SHIFTJIS */ /*::[*/ 129: 949,
    /* HANGUL */ /*::[*/ 130: 1361,
    /* JOHAB */ /*::[*/ 134: 936,
    /* GB2312 */ /*::[*/ 136: 950,
    /* CHINESEBIG5 */ /*::[*/ 161: 1253,
    /* GREEK */ /*::[*/ 162: 1254,
    /* TURKISH */ /*::[*/ 163: 1258,
    /* VIETNAMESE */ /*::[*/ 177: 1255,
    /* HEBREW */ /*::[*/ 178: 1256,
    /* ARABIC */ /*::[*/ 186: 1257,
    /* BALTIC */ /*::[*/ 204: 1251,
    /* RUSSIAN */ /*::[*/ 222: 874,
    /* THAI */ /*::[*/ 238: 1250,
    /* EASTEUROPE */ /*::[*/ 255: 1252,
    /* OEM */ /*::[*/ 69: 6969 /* MISC */ 
} /*:any*/ ;
var set_ansi = function(cp /*:number*/ ) {
    if (VALID_ANSI.indexOf(cp) == -1) return;
    current_ansi = CS2CP[0] = cp;
};
function reset_ansi() {
    set_ansi(1252);
}
var set_cp = function(cp /*:number*/ ) {
    current_codepage = cp;
    set_ansi(cp);
};
function reset_cp() {
    set_cp(1200);
    reset_ansi();
}
function char_codes(data /*:string*/ ) /*:Array<number>*/ {
    var o /*:Array<number>*/  = [];
    for(var i = 0, len = data.length; i < len; ++i)o[i] = data.charCodeAt(i);
    return o;
}
function utf16leread(data /*:string*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));
    return o.join("");
}
function utf16beread(data /*:string*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));
    return o.join("");
}
var debom = function(data /*:string*/ ) /*:string*/ {
    var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
    if (c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
    if (c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
    if (c1 == 0xFEFF) return data.slice(1);
    return data;
};
var _getchar = function _gc1(x /*:number*/ ) /*:string*/ {
    return String.fromCharCode(x);
};
var _getansi = function _ga1(x /*:number*/ ) /*:string*/ {
    return String.fromCharCode(x);
};
var $cptable;
function set_cptable(cptable) {
    $cptable = cptable;
    set_cp = function(cp /*:number*/ ) {
        current_codepage = cp;
        set_ansi(cp);
    };
    debom = function(data /*:string*/ ) {
        if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) return $cptable.utils.decode(1200, char_codes(data.slice(2)));
        return data;
    };
    _getchar = function _gc2(x /*:number*/ ) /*:string*/ {
        if (current_codepage === 1200) return String.fromCharCode(x);
        return $cptable.utils.decode(current_codepage, [
            x & 255,
            x >> 8
        ])[0];
    };
    _getansi = function _ga2(x /*:number*/ ) /*:string*/ {
        return $cptable.utils.decode(current_ansi, [
            x
        ])[0];
    };
    cpdoit();
}
var DENSE = null;
var DIF_XL = true;
var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
function Base64_encode(input) {
    var o = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    for(var i = 0; i < input.length;){
        c1 = input.charCodeAt(i++);
        e1 = c1 >> 2;
        c2 = input.charCodeAt(i++);
        e2 = (c1 & 3) << 4 | c2 >> 4;
        c3 = input.charCodeAt(i++);
        e3 = (c2 & 15) << 2 | c3 >> 6;
        e4 = c3 & 63;
        if (isNaN(c2)) e3 = e4 = 64;
        else if (isNaN(c3)) e4 = 64;
        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
    }
    return o;
}
function Base64_decode(input) {
    var o = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    input = input.replace(/[^\w\+\/\=]/g, "");
    for(var i = 0; i < input.length;){
        e1 = Base64_map.indexOf(input.charAt(i++));
        e2 = Base64_map.indexOf(input.charAt(i++));
        c1 = e1 << 2 | e2 >> 4;
        o += String.fromCharCode(c1);
        e3 = Base64_map.indexOf(input.charAt(i++));
        c2 = (e2 & 15) << 4 | e3 >> 2;
        if (e3 !== 64) o += String.fromCharCode(c2);
        e4 = Base64_map.indexOf(input.charAt(i++));
        c3 = (e3 & 3) << 6 | e4;
        if (e4 !== 64) o += String.fromCharCode(c3);
    }
    return o;
}
var has_buf = /*#__PURE__*/ function() {
    return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
}();
var Buffer_from = /*#__PURE__*/ function() {
    if (typeof Buffer !== "undefined") {
        var nbfs = !Buffer.from;
        if (!nbfs) try {
            Buffer.from("foo", "utf8");
        } catch (e) {
            nbfs = true;
        }
        return nbfs ? function(buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
    }
    return function() {};
}();
function new_raw_buf(len /*:number*/ ) {
    /* jshint -W056 */ if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
/* jshint +W056 */ }
function new_unsafe_buf(len /*:number*/ ) {
    /* jshint -W056 */ if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
/* jshint +W056 */ }
var s2a = function s2a(s /*:string*/ ) /*:any*/ {
    if (has_buf) return Buffer_from(s, "binary");
    return s.split("").map(function(x /*:string*/ ) /*:number*/ {
        return x.charCodeAt(0) & 0xff;
    });
};
function s2ab(s /*:string*/ ) /*:any*/ {
    if (typeof ArrayBuffer === "undefined") return s2a(s);
    var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
    for(var i = 0; i != s.length; ++i)view[i] = s.charCodeAt(i) & 0xFF;
    return buf;
}
function a2s(data /*:any*/ ) /*:string*/ {
    if (Array.isArray(data)) return data.map(function(c) {
        return String.fromCharCode(c);
    }).join("");
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length; ++i)o[i] = String.fromCharCode(data[i]);
    return o.join("");
}
function a2u(data /*:Array<number>*/ ) /*:Uint8Array*/ {
    if (typeof Uint8Array === "undefined") throw new Error("Unsupported");
    return new Uint8Array(data);
}
function ab2a(data /*:ArrayBuffer|Uint8Array*/ ) /*:Array<number>*/ {
    if (typeof ArrayBuffer == "undefined") throw new Error("Unsupported");
    if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
    /*:: if(data instanceof ArrayBuffer) throw new Error("unreachable"); */ var o = new Array(data.length);
    for(var i = 0; i < data.length; ++i)o[i] = data[i];
    return o;
}
var bconcat = has_buf ? function(bufs) {
    return Buffer.concat(bufs.map(function(buf) {
        return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
    }));
} : function(bufs) {
    if (typeof Uint8Array !== "undefined") {
        var i = 0, maxlen = 0;
        for(i = 0; i < bufs.length; ++i)maxlen += bufs[i].length;
        var o = new Uint8Array(maxlen);
        var len = 0;
        for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i){
            len = bufs[i].length;
            if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
            else if (typeof bufs[i] == "string") throw "wtf";
            else o.set(new Uint8Array(bufs[i]), maxlen);
        }
        return o;
    }
    return [].concat.apply([], bufs.map(function(buf) {
        return Array.isArray(buf) ? buf : [].slice.call(buf);
    }));
};
function utf8decode(content /*:string*/ ) {
    var out = [], widx = 0, L = content.length + 250;
    var o = new_raw_buf(content.length + 255);
    for(var ridx = 0; ridx < content.length; ++ridx){
        var c = content.charCodeAt(ridx);
        if (c < 0x80) o[widx++] = c;
        else if (c < 0x800) {
            o[widx++] = 192 | c >> 6 & 31;
            o[widx++] = 128 | c & 63;
        } else if (c >= 0xD800 && c < 0xE000) {
            c = (c & 1023) + 64;
            var d = content.charCodeAt(++ridx) & 1023;
            o[widx++] = 240 | c >> 8 & 7;
            o[widx++] = 128 | c >> 2 & 63;
            o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;
            o[widx++] = 128 | d & 63;
        } else {
            o[widx++] = 224 | c >> 12 & 15;
            o[widx++] = 128 | c >> 6 & 63;
            o[widx++] = 128 | c & 63;
        }
        if (widx > L) {
            out.push(o.slice(0, widx));
            widx = 0;
            o = new_raw_buf(65535);
            L = 65530;
        }
    }
    out.push(o.slice(0, widx));
    return bconcat(out);
}
var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
/*::
declare type Block = any;
declare type BufArray = {
	newblk(sz:number):Block;
	next(sz:number):Block;
	end():any;
	push(buf:Block):void;
};

type RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};

type EvertType = {[string]:string};
type EvertNumType = {[string]:number};
type EvertArrType = {[string]:Array<string>};

type StringConv = {(string):string};

*/ /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */ /*jshint -W041 */ function _strrev(x /*:string*/ ) /*:string*/ {
    var o = "", i = x.length - 1;
    while(i >= 0)o += x.charAt(i--);
    return o;
}
function pad0(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
function pad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill(" ", d - t.length) + t;
}
function rpad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : t + fill(" ", d - t.length);
}
function pad0r1(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + Math.round(v);
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
function pad0r2(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
var p2_32 = /*#__PURE__*/ Math.pow(2, 32);
function pad0r(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
    var i = Math.round(v);
    return pad0r2(i, d);
}
/* yes, in 2022 this is still faster than string compare */ function SSF_isgeneral(s /*:string*/ , i /*:?number*/ ) /*:boolean*/ {
    i = i || 0;
    return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
}
var days /*:Array<Array<string> >*/  = [
    [
        "Sun",
        "Sunday"
    ],
    [
        "Mon",
        "Monday"
    ],
    [
        "Tue",
        "Tuesday"
    ],
    [
        "Wed",
        "Wednesday"
    ],
    [
        "Thu",
        "Thursday"
    ],
    [
        "Fri",
        "Friday"
    ],
    [
        "Sat",
        "Saturday"
    ]
];
var months /*:Array<Array<string> >*/  = [
    [
        "J",
        "Jan",
        "January"
    ],
    [
        "F",
        "Feb",
        "February"
    ],
    [
        "M",
        "Mar",
        "March"
    ],
    [
        "A",
        "Apr",
        "April"
    ],
    [
        "M",
        "May",
        "May"
    ],
    [
        "J",
        "Jun",
        "June"
    ],
    [
        "J",
        "Jul",
        "July"
    ],
    [
        "A",
        "Aug",
        "August"
    ],
    [
        "S",
        "Sep",
        "September"
    ],
    [
        "O",
        "Oct",
        "October"
    ],
    [
        "N",
        "Nov",
        "November"
    ],
    [
        "D",
        "Dec",
        "December"
    ]
];
function SSF_init_table(t /*:any*/ ) {
    if (!t) t = {};
    t[0] = "General";
    t[1] = "0";
    t[2] = "0.00";
    t[3] = "#,##0";
    t[4] = "#,##0.00";
    t[9] = "0%";
    t[10] = "0.00%";
    t[11] = "0.00E+00";
    t[12] = "# ?/?";
    t[13] = "# ??/??";
    t[14] = "m/d/yy";
    t[15] = "d-mmm-yy";
    t[16] = "d-mmm";
    t[17] = "mmm-yy";
    t[18] = "h:mm AM/PM";
    t[19] = "h:mm:ss AM/PM";
    t[20] = "h:mm";
    t[21] = "h:mm:ss";
    t[22] = "m/d/yy h:mm";
    t[37] = "#,##0 ;(#,##0)";
    t[38] = "#,##0 ;[Red](#,##0)";
    t[39] = "#,##0.00;(#,##0.00)";
    t[40] = "#,##0.00;[Red](#,##0.00)";
    t[45] = "mm:ss";
    t[46] = "[h]:mm:ss";
    t[47] = "mmss.0";
    t[48] = "##0.0E+0";
    t[49] = "@";
    t[56] = '"上午/下午 "hh"時"mm"分"ss"秒 "';
    return t;
}
/* repeated to satiate webpack */ var table_fmt = {
    0: "General",
    1: "0",
    2: "0.00",
    3: "#,##0",
    4: "#,##0.00",
    9: "0%",
    10: "0.00%",
    11: "0.00E+00",
    12: "# ?/?",
    13: "# ??/??",
    14: "m/d/yy",
    15: "d-mmm-yy",
    16: "d-mmm",
    17: "mmm-yy",
    18: "h:mm AM/PM",
    19: "h:mm:ss AM/PM",
    20: "h:mm",
    21: "h:mm:ss",
    22: "m/d/yy h:mm",
    37: "#,##0 ;(#,##0)",
    38: "#,##0 ;[Red](#,##0)",
    39: "#,##0.00;(#,##0.00)",
    40: "#,##0.00;[Red](#,##0.00)",
    45: "mm:ss",
    46: "[h]:mm:ss",
    47: "mmss.0",
    48: "##0.0E+0",
    49: "@",
    56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
};
/* Defaults determined by systematically testing in Excel 2019 */ /* These formats appear to default to other formats in the table */ var SSF_default_map = {
    5: 37,
    6: 38,
    7: 39,
    8: 40,
    23: 0,
    24: 0,
    25: 0,
    26: 0,
    27: 14,
    28: 14,
    29: 14,
    30: 14,
    31: 14,
    50: 14,
    51: 14,
    52: 14,
    53: 14,
    54: 14,
    55: 14,
    56: 14,
    57: 14,
    58: 14,
    59: 1,
    60: 2,
    61: 3,
    62: 4,
    67: 9,
    68: 10,
    69: 12,
    70: 13,
    71: 14,
    72: 14,
    73: 15,
    74: 16,
    75: 17,
    76: 20,
    77: 21,
    78: 22,
    79: 45,
    80: 46,
    81: 47,
    82: 0 // 82 ->  0 ... 65536 -> 0 (omitted)
};
/* These formats technically refer to Accounting formats with no equivalent */ var SSF_default_str = {
    //  5 -- Currency,   0 decimal, black negative
    5: '"$"#,##0_);\\("$"#,##0\\)',
    63: '"$"#,##0_);\\("$"#,##0\\)',
    //  6 -- Currency,   0 decimal, red   negative
    6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    //  7 -- Currency,   2 decimal, black negative
    7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    //  8 -- Currency,   2 decimal, red   negative
    8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    // 41 -- Accounting, 0 decimal, No Symbol
    41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
    // 42 -- Accounting, 0 decimal, $  Symbol
    42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
    // 43 -- Accounting, 2 decimal, No Symbol
    43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
    // 44 -- Accounting, 2 decimal, $  Symbol
    44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
};
function SSF_frac(x /*:number*/ , D /*:number*/ , mixed /*:?boolean*/ ) /*:Array<number>*/ {
    var sgn = x < 0 ? -1 : 1;
    var B = x * sgn;
    var P_2 = 0, P_1 = 1, P = 0;
    var Q_2 = 1, Q_1 = 0, Q = 0;
    var A = Math.floor(B);
    while(Q_1 < D){
        A = Math.floor(B);
        P = A * P_1 + P_2;
        Q = A * Q_1 + Q_2;
        if (B - A < 0.00000005) break;
        B = 1 / (B - A);
        P_2 = P_1;
        P_1 = P;
        Q_2 = Q_1;
        Q_1 = Q;
    }
    if (Q > D) {
        if (Q_1 > D) {
            Q = Q_2;
            P = P_2;
        } else {
            Q = Q_1;
            P = P_1;
        }
    }
    if (!mixed) return [
        0,
        sgn * P,
        Q
    ];
    var q = Math.floor(sgn * P / Q);
    return [
        q,
        sgn * P - q * Q,
        Q
    ];
}
function SSF_parse_date_code(v /*:number*/ , opts /*:?any*/ , b2 /*:?boolean*/ ) {
    if (v > 2958465 || v < 0) return null;
    var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;
    var dout = [];
    var out = {
        D: date,
        T: time,
        u: 86400 * (v - date) - time,
        y: 0,
        m: 0,
        d: 0,
        H: 0,
        M: 0,
        S: 0,
        q: 0
    };
    if (Math.abs(out.u) < 1e-6) out.u = 0;
    if (opts && opts.date1904) date += 1462;
    if (out.u > 0.9999) {
        out.u = 0;
        if (++time == 86400) {
            out.T = time = 0;
            ++date;
            ++out.D;
        }
    }
    if (date === 60) {
        dout = b2 ? [
            1317,
            10,
            29
        ] : [
            1900,
            2,
            29
        ];
        dow = 3;
    } else if (date === 0) {
        dout = b2 ? [
            1317,
            8,
            29
        ] : [
            1900,
            1,
            0
        ];
        dow = 6;
    } else {
        if (date > 60) --date;
        /* 1 = Jan 1 1900 in Gregorian */ var d = new Date(1900, 0, 1);
        d.setDate(d.getDate() + date - 1);
        dout = [
            d.getFullYear(),
            d.getMonth() + 1,
            d.getDate()
        ];
        dow = d.getDay();
        if (date < 60) dow = (dow + 6) % 7;
        if (b2) dow = SSF_fix_hijri(d, dout);
    }
    out.y = dout[0];
    out.m = dout[1];
    out.d = dout[2];
    out.S = time % 60;
    time = Math.floor(time / 60);
    out.M = time % 60;
    time = Math.floor(time / 60);
    out.H = time;
    out.q = dow;
    return out;
}
var SSFbasedate = /*#__PURE__*/ new Date(1899, 11, 31, 0, 0, 0);
var SSFdnthresh = /*#__PURE__*/ SSFbasedate.getTime();
var SSFbase1904 = /*#__PURE__*/ new Date(1900, 2, 1, 0, 0, 0);
function datenum_local(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {
    var epoch = /*#__PURE__*/ v.getTime();
    if (date1904) epoch -= 126230400000;
    else if (v >= SSFbase1904) epoch += 86400000;
    return (epoch - (SSFdnthresh + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ SSFbasedate.getTimezoneOffset()) * 60000)) / 86400000;
}
/* ECMA-376 18.8.30 numFmt*/ /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */ /* exponent >= -9 and <= 9 */ function SSF_strip_decimal(o /*:string*/ ) /*:string*/ {
    return o.indexOf(".") == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
}
/* General Exponential always shows 2 digits exp and trims the mantissa */ function SSF_normalize_exp(o /*:string*/ ) /*:string*/ {
    if (o.indexOf("E") == -1) return o;
    return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
}
/* exponent >= -9 and <= 9 */ function SSF_small_exp(v /*:number*/ ) /*:string*/ {
    var w = v < 0 ? 12 : 11;
    var o = SSF_strip_decimal(v.toFixed(12));
    if (o.length <= w) return o;
    o = v.toPrecision(10);
    if (o.length <= w) return o;
    return v.toExponential(5);
}
/* exponent >= 11 or <= -10 likely exponential */ function SSF_large_exp(v /*:number*/ ) /*:string*/ {
    var o = SSF_strip_decimal(v.toFixed(11));
    return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
}
function SSF_general_num(v /*:number*/ ) /*:string*/ {
    var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
    if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);
    else if (Math.abs(V) <= 9) o = SSF_small_exp(v);
    else if (V === 10) o = v.toFixed(10).substr(0, 12);
    else o = SSF_large_exp(v);
    return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
}
/*
	"General" rules:
	- text is passed through ("@")
	- booleans are rendered as TRUE/FALSE
	- "up to 11 characters" displayed for numbers
	- Default date format (code 14) used for Dates

	The longest 32-bit integer text is "-2147483648", exactly 11 chars
	TODO: technically the display depends on the width of the cell
*/ function SSF_general(v /*:any*/ , opts /*:any*/ ) {
    switch(typeof v){
        case "string":
            return v;
        case "boolean":
            return v ? "TRUE" : "FALSE";
        case "number":
            return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
        case "undefined":
            return "";
        case "object":
            if (v == null) return "";
            if (v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
    }
    throw new Error("unsupported value in General format: " + v);
}
function SSF_fix_hijri(date /*:Date*/ , o /*:[number, number, number]*/ ) {
    /* TODO: properly adjust y/m/d and  */ o[0] -= 581;
    var dow = date.getDay();
    if (date < 60) dow = (dow + 6) % 7;
    return dow;
}
//var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");
function SSF_write_date(type /*:number*/ , fmt /*:string*/ , val, ss0 /*:?number*/ ) /*:string*/ {
    var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
    switch(type){
        case 98:
            /* 'b' buddhist year */ y = val.y + 543;
        /* falls through */ case 121:
            /* 'y' year */ switch(fmt.length){
                case 1:
                case 2:
                    out = y % 100;
                    outl = 2;
                    break;
                default:
                    out = y % 10000;
                    outl = 4;
                    break;
            }
            break;
        case 109:
            /* 'm' month */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.m;
                    outl = fmt.length;
                    break;
                case 3:
                    return months[val.m - 1][1];
                case 5:
                    return months[val.m - 1][0];
                default:
                    return months[val.m - 1][2];
            }
            break;
        case 100:
            /* 'd' day */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.d;
                    outl = fmt.length;
                    break;
                case 3:
                    return days[val.q][0];
                default:
                    return days[val.q][1];
            }
            break;
        case 104:
            /* 'h' 12-hour */ switch(fmt.length){
                case 1:
                case 2:
                    out = 1 + (val.H + 11) % 12;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad hour format: " + fmt;
            }
            break;
        case 72:
            /* 'H' 24-hour */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.H;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad hour format: " + fmt;
            }
            break;
        case 77:
            /* 'M' minutes */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.M;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad minute format: " + fmt;
            }
            break;
        case 115:
            /* 's' seconds */ if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000") throw "bad second format: " + fmt;
            if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
            /*::if(!ss0) ss0 = 0; */ if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
            else tt = ss0 === 1 ? 10 : 1;
            ss = Math.round(tt * (val.S + val.u));
            if (ss >= 60 * tt) ss = 0;
            if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt;
            o = pad0(ss, 2 + ss0);
            if (fmt === "ss") return o.substr(0, 2);
            return "." + o.substr(2, fmt.length - 1);
        case 90:
            /* 'Z' absolute time */ switch(fmt){
                case "[h]":
                case "[hh]":
                    out = val.D * 24 + val.H;
                    break;
                case "[m]":
                case "[mm]":
                    out = (val.D * 24 + val.H) * 60 + val.M;
                    break;
                case "[s]":
                case "[ss]":
                    out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                    break;
                default:
                    throw "bad abstime format: " + fmt;
            }
            outl = fmt.length === 3 ? 1 : 2;
            break;
        case 101:
            /* 'e' era */ out = y;
            outl = 1;
            break;
    }
    var outstr = outl > 0 ? pad0(out, outl) : "";
    return outstr;
}
/*jshint -W086 */ /*jshint +W086 */ function commaify(s /*:string*/ ) /*:string*/ {
    var w = 3;
    if (s.length <= w) return s;
    var j = s.length % w, o = s.substr(0, j);
    for(; j != s.length; j += w)o += (o.length > 0 ? "," : "") + s.substr(j, w);
    return o;
}
var pct1 = /%/g;
function write_num_pct(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
function write_num_cm(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var idx = fmt.length - 1;
    while(fmt.charCodeAt(idx - 1) === 44)--idx;
    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
function write_num_exp(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var o /*:string*/ ;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
        if (val == 0) return "0.0E+0";
        else if (val < 0) return "-" + write_num_exp(fmt, -val);
        var period = fmt.indexOf(".");
        if (period === -1) period = fmt.indexOf("E");
        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
        if (ee < 0) ee += period;
        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
        if (o.indexOf("e") === -1) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else o += "E+" + (fakee - ee);
            while(o.substr(0, 2) === "0."){
                o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
                o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
            }
            o = o.replace(/\+-/, "-");
        }
        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
        });
    } else o = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
    if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
    return o.replace("e", "E");
}
var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
function write_num_f1(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {
    var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
    var myn = rr - base * den, myd = den;
    return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
}
function write_num_f2(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {
    return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
}
var dec1 = /^#*0*\.([0#]+)/;
var closeparen = /\).*[0#]/;
var phone = /\(###\) ###\\?-####/;
function hashq(str /*:string*/ ) /*:string*/ {
    var o = "", cc;
    for(var i = 0; i != str.length; ++i)switch(cc = str.charCodeAt(i)){
        case 35:
            break;
        case 63:
            o += " ";
            break;
        case 48:
            o += "0";
            break;
        default:
            o += String.fromCharCode(cc);
    }
    return o;
}
function rnd(val /*:number*/ , d /*:number*/ ) /*:string*/ {
    var dd = Math.pow(10, d);
    return "" + Math.round(val * dd) / dd;
}
function dec(val /*:number*/ , d /*:number*/ ) /*:number*/ {
    var _frac = val - Math.floor(val), dd = Math.pow(10, d);
    if (d < ("" + Math.round(_frac * dd)).length) return 0;
    return Math.round(_frac * dd);
}
function carry(val /*:number*/ , d /*:number*/ ) /*:number*/ {
    if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) return 1;
    return 0;
}
function flr(val /*:number*/ ) /*:string*/ {
    if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
    return "" + Math.floor(val);
}
function write_num_flt(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
        if (val >= 0) return write_num_flt("n", ffmt, val);
        return "(" + write_num_flt("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
    if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val);
    if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val);
    if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o;
    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
        o = pad0r(val, 0);
        if (o === "0") o = "";
        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);
    if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
    if (r = fmt.match(dec1)) {
        o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(/*::(*/ r /*::||[""])*/ [1]).length - $1.length);
        });
        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r = fmt.match(/^(0*)\.(#*)$/)) return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
    if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));
    if (r = fmt.match(/^#,##0\.([#0]*0)$/)) return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
    if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
    if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
        o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
        ri = 0;
        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
            return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
        }));
    }
    if (fmt.match(phone)) {
        o = write_num_flt(type, "##########", val);
        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    }
    var oa = "";
    if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
        o = "" + sign;
        oa = write_num("n", /*::String(*/ r[1], ff[1]);
        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
        o += oa + /*::String(*/ r[2] + "/" + /*::String(*/ r[3] /*::)*/ ;
        oa = rpad_(ff[2], ri);
        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
        o += oa;
        return o;
    }
    if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
    }
    if (r = fmt.match(/^[#0?]+$/)) {
        o = pad0r(val, 0);
        if (fmt.length <= o.length) return o;
        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
        ri = o.indexOf(".");
        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
    }
    if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
        ri = dec(val, r[1].length);
        return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
        }) + "." + pad0(ri, r[1].length);
    }
    switch(fmt){
        case "###,##0.00":
            return write_num_flt(type, "#,##0.00", val);
        case "###,###":
        case "##,###":
        case "#,###":
            var x = commaify(pad0r(aval, 0));
            return x !== "0" ? sign + x : "";
        case "###,###.00":
            return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
        case "#,###.00":
            return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
        default:
    }
    throw new Error("unsupported format |" + fmt + "|");
}
function write_num_cm2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var idx = fmt.length - 1;
    while(fmt.charCodeAt(idx - 1) === 44)--idx;
    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
function write_num_pct2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
function write_num_exp2(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var o /*:string*/ ;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
        if (val == 0) return "0.0E+0";
        else if (val < 0) return "-" + write_num_exp2(fmt, -val);
        var period = fmt.indexOf(".");
        if (period === -1) period = fmt.indexOf("E");
        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
        if (ee < 0) ee += period;
        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
        if (!o.match(/[Ee]/)) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else o += "E+" + (fakee - ee);
            o = o.replace(/\+-/, "-");
        }
        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
        });
    } else o = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
    if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
    return o.replace("e", "E");
}
function write_num_int(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
        if (val >= 0) return write_num_int("n", ffmt, val);
        return "(" + write_num_int("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
    if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val);
    if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val);
    if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o;
    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
        o = "" + val;
        if (val === 0) o = "";
        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);
    if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
    if (r = fmt.match(dec1)) {
        /*:: if(!Array.isArray(r)) throw new Error("unreachable"); */ o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
        o = o.replace(/\.(\d*)$/, function($$, $1) {
            /*:: if(!Array.isArray(r)) throw new Error("unreachable"); */ return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
        });
        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r = fmt.match(/^(0*)\.(#*)$/)) return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
    if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);
    if (r = fmt.match(/^#,##0\.([#0]*0)$/)) return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length);
    if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
    if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
        o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
        ri = 0;
        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
            return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
        }));
    }
    if (fmt.match(phone)) {
        o = write_num_int(type, "##########", val);
        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    }
    var oa = "";
    if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
        o = "" + sign;
        oa = write_num("n", /*::String(*/ r[1], ff[1]);
        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
        o += oa + /*::String(*/ r[2] + "/" + /*::String(*/ r[3] /*::)*/ ;
        oa = rpad_(ff[2], ri);
        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
        o += oa;
        return o;
    }
    if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
    }
    if (r = fmt.match(/^[#0?]+$/)) {
        o = "" + val;
        if (fmt.length <= o.length) return o;
        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
        ri = o.indexOf(".");
        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
    }
    if (r = fmt.match(/^00,000\.([#0]*0)$/)) return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
        return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
    }) + "." + pad0(0, r[1].length);
    switch(fmt){
        case "###,###":
        case "##,###":
        case "#,###":
            var x = commaify("" + aval);
            return x !== "0" ? sign + x : "";
        default:
            if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
    }
    throw new Error("unsupported format |" + fmt + "|");
}
function write_num(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
}
function SSF_split_fmt(fmt /*:string*/ ) /*:Array<string>*/ {
    var out /*:Array<string>*/  = [];
    var in_str = false /*, cc*/ ;
    for(var i = 0, j = 0; i < fmt.length; ++i)switch(/*cc=*/ fmt.charCodeAt(i)){
        case 34:
            /* '"' */ in_str = !in_str;
            break;
        case 95:
        case 42:
        case 92:
            /* '_' '*' '\\' */ ++i;
            break;
        case 59:
            /* ';' */ out[out.length] = fmt.substr(j, i - j);
            j = i + 1;
    }
    out[out.length] = fmt.substr(j);
    if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
    return out;
}
var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
function fmt_is_date(fmt /*:string*/ ) /*:boolean*/ {
    var i = 0, /*cc = 0,*/ c = "", o = "";
    while(i < fmt.length)switch(c = fmt.charAt(i)){
        case "G":
            if (SSF_isgeneral(fmt, i)) i += 6;
            i++;
            break;
        case '"':
            for(; /*cc=*/ fmt.charCodeAt(++i) !== 34 && i < fmt.length;);
            ++i;
            break;
        case "\\":
            i += 2;
            break;
        case "_":
            i += 2;
            break;
        case "@":
            ++i;
            break;
        case "B":
        case "b":
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true;
        /* falls through */ case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
        /* falls through */ case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
            return true;
        case "A":
        case "a":
        case "上":
            if (fmt.substr(i, 3).toUpperCase() === "A/P") return true;
            if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
            if (fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
            ++i;
            break;
        case "[":
            o = c;
            while(fmt.charAt(i++) !== "]" && i < fmt.length)o += fmt.charAt(i);
            if (o.match(SSF_abstime)) return true;
            break;
        case ".":
        /* falls through */ case "0":
        case "#":
            while(i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1));
            break;
        case "?":
            while(fmt.charAt(++i) === c);
            break;
        case "*":
            ++i;
            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
            break;
        case "(":
        case ")":
            ++i;
            break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
            while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1);
            break;
        case " ":
            ++i;
            break;
        default:
            ++i;
            break;
    }
    return false;
}
function eval_fmt(fmt /*:string*/ , v /*:any*/ , opts /*:any*/ , flen /*:number*/ ) {
    var out = [], o = "", i = 0, c = "", lst = "t", dt, j, cc;
    var hr = "H";
    /* Tokenize */ while(i < fmt.length)switch(c = fmt.charAt(i)){
        case "G":
            /* General */ if (!SSF_isgeneral(fmt, i)) throw new Error("unrecognized character " + c + " in " + fmt);
            out[out.length] = {
                t: "G",
                v: "General"
            };
            i += 7;
            break;
        case '"':
            /* Literal text */ for(o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;)o += String.fromCharCode(cc);
            out[out.length] = {
                t: "t",
                v: o
            };
            ++i;
            break;
        case "\\":
            var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t";
            out[out.length] = {
                t: t,
                v: w
            };
            ++i;
            break;
        case "_":
            out[out.length] = {
                t: "t",
                v: " "
            };
            i += 2;
            break;
        case "@":
            /* Text Placeholder */ out[out.length] = {
                t: "T",
                v: v
            };
            ++i;
            break;
        case "B":
        case "b":
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
                if (dt == null) {
                    dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
                    if (dt == null) return "";
                }
                out[out.length] = {
                    t: "X",
                    v: fmt.substr(i, 2)
                };
                lst = c;
                i += 2;
                break;
            }
        /* falls through */ case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
            c = c.toLowerCase();
        /* falls through */ case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
            if (v < 0) return "";
            if (dt == null) {
                dt = SSF_parse_date_code(v, opts);
                if (dt == null) return "";
            }
            o = c;
            while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c)o += c;
            if (c === "m" && lst.toLowerCase() === "h") c = "M";
            if (c === "h") c = hr;
            out[out.length] = {
                t: c,
                v: o
            };
            lst = c;
            break;
        case "A":
        case "a":
        case "上":
            var q = {
                t: c,
                v: c
            };
            if (dt == null) dt = SSF_parse_date_code(v, opts);
            if (fmt.substr(i, 3).toUpperCase() === "A/P") {
                if (dt != null) q.v = dt.H >= 12 ? "P" : "A";
                q.t = "T";
                hr = "h";
                i += 3;
            } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
                if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM";
                q.t = "T";
                i += 5;
                hr = "h";
            } else if (fmt.substr(i, 5).toUpperCase() === "上午/下午") {
                if (dt != null) q.v = dt.H >= 12 ? "下午" : "上午";
                q.t = "T";
                i += 5;
                hr = "h";
            } else {
                q.t = "t";
                ++i;
            }
            if (dt == null && q.t === "T") return "";
            out[out.length] = q;
            lst = c;
            break;
        case "[":
            o = c;
            while(fmt.charAt(i++) !== "]" && i < fmt.length)o += fmt.charAt(i);
            if (o.slice(-1) !== "]") throw 'unterminated "[" block: |' + o + "|";
            if (o.match(SSF_abstime)) {
                if (dt == null) {
                    dt = SSF_parse_date_code(v, opts);
                    if (dt == null) return "";
                }
                out[out.length] = {
                    t: "Z",
                    v: o.toLowerCase()
                };
                lst = o.charAt(1);
            } else if (o.indexOf("$") > -1) {
                o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                if (!fmt_is_date(fmt)) out[out.length] = {
                    t: "t",
                    v: o
                };
            }
            break;
        /* Numbers */ case ".":
            if (dt != null) {
                o = c;
                while(++i < fmt.length && (c = fmt.charAt(i)) === "0")o += c;
                out[out.length] = {
                    t: "s",
                    v: o
                };
                break;
            }
        /* falls through */ case "0":
        case "#":
            o = c;
            while(++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1)o += c;
            out[out.length] = {
                t: "n",
                v: o
            };
            break;
        case "?":
            o = c;
            while(fmt.charAt(++i) === c)o += c;
            out[out.length] = {
                t: c,
                v: o
            };
            lst = c;
            break;
        case "*":
            ++i;
            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
            break; // **
        case "(":
        case ")":
            out[out.length] = {
                t: flen === 1 ? "t" : c,
                v: c
            };
            ++i;
            break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
            o = c;
            while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1)o += fmt.charAt(i);
            out[out.length] = {
                t: "D",
                v: o
            };
            break;
        case " ":
            out[out.length] = {
                t: c,
                v: c
            };
            ++i;
            break;
        case "$":
            out[out.length] = {
                t: "t",
                v: "$"
            };
            ++i;
            break;
        default:
            if (",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error("unrecognized character " + c + " in " + fmt);
            out[out.length] = {
                t: "t",
                v: c
            };
            ++i;
            break;
    }
    /* Scan for date/time parts */ var bt = 0, ss0 = 0, ssm;
    for(i = out.length - 1, lst = "t"; i >= 0; --i)switch(out[i].t){
        case "h":
        case "H":
            out[i].t = hr;
            lst = "h";
            if (bt < 1) bt = 1;
            break;
        case "s":
            if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
            if (bt < 3) bt = 3;
        /* falls through */ case "d":
        case "y":
        case "M":
        case "e":
            lst = out[i].t;
            break;
        case "m":
            if (lst === "s") {
                out[i].t = "M";
                if (bt < 2) bt = 2;
            }
            break;
        case "X":
            break;
        case "Z":
            if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
            if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
            if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
    }
    /* time rounding depends on presence of minute / second / usec fields */ switch(bt){
        case 0:
            break;
        case 1:
            /*::if(!dt) break;*/ if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
            }
            if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
            }
            if (dt.M >= 60) {
                dt.M = 0;
                ++dt.H;
            }
            break;
        case 2:
            /*::if(!dt) break;*/ if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
            }
            if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
            }
            break;
    }
    /* replace fields */ var nstr = "", jj;
    for(i = 0; i < out.length; ++i)switch(out[i].t){
        case "t":
        case "T":
        case " ":
        case "D":
            break;
        case "X":
            out[i].v = "";
            out[i].t = ";";
            break;
        case "d":
        case "m":
        case "y":
        case "h":
        case "H":
        case "M":
        case "s":
        case "e":
        case "b":
        case "Z":
            /*::if(!dt) throw "unreachable"; */ out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
            out[i].t = "t";
            break;
        case "n":
        case "?":
            jj = i + 1;
            while(out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))){
                out[i].v += out[jj].v;
                out[jj] = {
                    v: "",
                    t: ";"
                };
                ++jj;
            }
            nstr += out[i].v;
            i = jj - 1;
            break;
        case "G":
            out[i].t = "t";
            out[i].v = SSF_general(v, opts);
            break;
    }
    var vv = "", myv, ostr;
    if (nstr.length > 0) {
        if (nstr.charCodeAt(0) == 40) /* '(' */ {
            myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
            ostr = write_num("n", nstr, myv);
        } else {
            myv = v < 0 && flen > 1 ? -v : v;
            ostr = write_num("n", nstr, myv);
            if (myv < 0 && out[0] && out[0].t == "t") {
                ostr = ostr.substr(1);
                out[0].v = "-" + out[0].v;
            }
        }
        jj = ostr.length - 1;
        var decpt = out.length;
        for(i = 0; i < out.length; ++i)if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) {
            decpt = i;
            break;
        }
        var lasti = out.length;
        if (decpt === out.length && ostr.indexOf("E") === -1) {
            for(i = out.length - 1; i >= 0; --i){
                if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
                if (jj >= out[i].v.length - 1) {
                    jj -= out[i].v.length;
                    out[i].v = ostr.substr(jj + 1, out[i].v.length);
                } else if (jj < 0) out[i].v = "";
                else {
                    out[i].v = ostr.substr(0, jj + 1);
                    jj = -1;
                }
                out[i].t = "t";
                lasti = i;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
        } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
            jj = ostr.indexOf(".") - 1;
            for(i = decpt; i >= 0; --i){
                if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
                j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
                vv = out[i].v.substr(j + 1);
                for(; j >= 0; --j)if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
                out[i].v = vv;
                out[i].t = "t";
                lasti = i;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            jj = ostr.indexOf(".") + 1;
            for(i = decpt; i < out.length; ++i){
                if (out[i] == null || "n?(".indexOf(out[i].t) === -1 && i !== decpt) continue;
                j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
                vv = out[i].v.substr(0, j);
                for(; j < out[i].v.length; ++j)if (jj < ostr.length) vv += ostr.charAt(jj++);
                out[i].v = vv;
                out[i].t = "t";
                lasti = i;
            }
        }
    }
    for(i = 0; i < out.length; ++i)if (out[i] != null && "n?".indexOf(out[i].t) > -1) {
        myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
        out[i].v = write_num(out[i].t, out[i].v, myv);
        out[i].t = "t";
    }
    var retval = "";
    for(i = 0; i !== out.length; ++i)if (out[i] != null) retval += out[i].v;
    return retval;
}
var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
function chkcond(v, rr) {
    if (rr == null) return false;
    var thresh = parseFloat(rr[2]);
    switch(rr[1]){
        case "=":
            if (v == thresh) return true;
            break;
        case ">":
            if (v > thresh) return true;
            break;
        case "<":
            if (v < thresh) return true;
            break;
        case "<>":
            if (v != thresh) return true;
            break;
        case ">=":
            if (v >= thresh) return true;
            break;
        case "<=":
            if (v <= thresh) return true;
            break;
    }
    return false;
}
function choose_fmt(f /*:string*/ , v /*:any*/ ) {
    var fmt = SSF_split_fmt(f);
    var l = fmt.length, lat = fmt[l - 1].indexOf("@");
    if (l < 4 && lat > -1) --l;
    if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
    if (typeof v !== "number") return [
        4,
        fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"
    ];
    switch(fmt.length){
        case 1:
            fmt = lat > -1 ? [
                "General",
                "General",
                "General",
                fmt[0]
            ] : [
                fmt[0],
                fmt[0],
                fmt[0],
                "@"
            ];
            break;
        case 2:
            fmt = lat > -1 ? [
                fmt[0],
                fmt[0],
                fmt[0],
                fmt[1]
            ] : [
                fmt[0],
                fmt[1],
                fmt[0],
                "@"
            ];
            break;
        case 3:
            fmt = lat > -1 ? [
                fmt[0],
                fmt[1],
                fmt[0],
                fmt[2]
            ] : [
                fmt[0],
                fmt[1],
                fmt[2],
                "@"
            ];
            break;
        case 4:
            break;
    }
    var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
    if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [
        l,
        ff
    ];
    if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
        var m1 = fmt[0].match(cfregex2);
        var m2 = fmt[1].match(cfregex2);
        return chkcond(v, m1) ? [
            l,
            fmt[0]
        ] : chkcond(v, m2) ? [
            l,
            fmt[1]
        ] : [
            l,
            fmt[m1 != null && m2 != null ? 2 : 1]
        ];
    }
    return [
        l,
        ff
    ];
}
function SSF_format(fmt /*:string|number*/ , v /*:any*/ , o /*:?any*/ ) {
    if (o == null) o = {};
    var sfmt = "";
    switch(typeof fmt){
        case "string":
            if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
            else sfmt = fmt;
            break;
        case "number":
            if (fmt == 14 && o.dateNF) sfmt = o.dateNF;
            else sfmt = (o.table != null ? o.table /*:any*/  : table_fmt)[fmt];
            if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
            if (sfmt == null) sfmt = SSF_default_str[fmt] || "General";
            break;
    }
    if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);
    if (v instanceof Date) v = datenum_local(v, o.date1904);
    var f = choose_fmt(sfmt, v);
    if (SSF_isgeneral(f[1])) return SSF_general(v, o);
    if (v === true) v = "TRUE";
    else if (v === false) v = "FALSE";
    else if (v === "" || v == null) return "";
    return eval_fmt(f[1], v, o, f[0]);
}
function SSF_load(fmt /*:string*/ , idx /*:?number*/ ) /*:number*/ {
    if (typeof idx != "number") {
        idx = +idx || -1;
        /*::if(typeof idx != 'number') return 0x188; */ for(var i = 0; i < 0x0188; ++i){
            /*::if(typeof idx != 'number') return 0x188; */ if (table_fmt[i] == undefined) {
                if (idx < 0) idx = i;
                continue;
            }
            if (table_fmt[i] == fmt) {
                idx = i;
                break;
            }
        }
        /*::if(typeof idx != 'number') return 0x188; */ if (idx < 0) idx = 0x187;
    }
    /*::if(typeof idx != 'number') return 0x188; */ table_fmt[idx] = fmt;
    return idx;
}
function SSF_load_table(tbl /*:SSFTable*/ ) /*:void*/ {
    for(var i = 0; i != 0x0188; ++i)if (tbl[i] !== undefined) SSF_load(tbl[i], i);
}
function make_ssf() {
    table_fmt = SSF_init_table();
}
var SSF = {
    format: SSF_format,
    load: SSF_load,
    _table: table_fmt,
    load_table: SSF_load_table,
    parse_date_code: SSF_parse_date_code,
    is_date: fmt_is_date,
    get_table: function get_table() {
        return SSF._table = table_fmt;
    }
};
var SSFImplicit /*{[number]:string}*/  = {
    "5": '"$"#,##0_);\\("$"#,##0\\)',
    "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "23": "General",
    "24": "General",
    "25": "General",
    "26": "General",
    "27": "m/d/yy",
    "28": "m/d/yy",
    "29": "m/d/yy",
    "30": "m/d/yy",
    "31": "m/d/yy",
    "32": "h:mm:ss",
    "33": "h:mm:ss",
    "34": "h:mm:ss",
    "35": "h:mm:ss",
    "36": "m/d/yy",
    "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
    "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
    "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
    "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
    "50": "m/d/yy",
    "51": "m/d/yy",
    "52": "m/d/yy",
    "53": "m/d/yy",
    "54": "m/d/yy",
    "55": "m/d/yy",
    "56": "m/d/yy",
    "57": "m/d/yy",
    "58": "m/d/yy",
    "59": "0",
    "60": "0.00",
    "61": "#,##0",
    "62": "#,##0.00",
    "63": '"$"#,##0_);\\("$"#,##0\\)',
    "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "67": "0%",
    "68": "0.00%",
    "69": "# ?/?",
    "70": "# ??/??",
    "71": "m/d/yy",
    "72": "m/d/yy",
    "73": "d-mmm-yy",
    "74": "d-mmm",
    "75": "mmm-yy",
    "76": "h:mm",
    "77": "h:mm:ss",
    "78": "m/d/yy h:mm",
    "79": "mm:ss",
    "80": "[h]:mm:ss",
    "81": "mmss.0"
} /*:any*/ ;
/* dateNF parse TODO: move to SSF */ var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
function dateNF_regex(dateNF /*:string|number*/ ) /*:RegExp*/ {
    var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
    fmt = fmt.replace(dateNFregex, "(\\d+)");
    return new RegExp("^" + fmt + "$");
}
function dateNF_fix(str /*:string*/ , dateNF /*:string*/ , match /*:Array<string>*/ ) /*:string*/ {
    var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
    (dateNF.match(dateNFregex) || []).forEach(function(n, i) {
        var v = parseInt(match[i + 1], 10);
        switch(n.toLowerCase().charAt(0)){
            case "y":
                Y = v;
                break;
            case "d":
                d = v;
                break;
            case "h":
                H = v;
                break;
            case "s":
                S = v;
                break;
            case "m":
                if (H >= 0) M = v;
                else m = v;
                break;
        }
    });
    if (S >= 0 && M == -1 && m >= 0) {
        M = m;
        m = -1;
    }
    var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
    if (datestr.length == 7) datestr = "0" + datestr;
    if (datestr.length == 8) datestr = "20" + datestr;
    var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
    if (H == -1 && M == -1 && S == -1) return datestr;
    if (Y == -1 && m == -1 && d == -1) return timestr;
    return datestr + "T" + timestr;
}
/*::
declare var ReadShift:any;
declare var CheckField:any;
declare var prep_blob:any;
declare var __readUInt32LE:any;
declare var __readInt32LE:any;
declare var __toBuffer:any;
declare var __utf16le:any;
declare var bconcat:any;
declare var s2a:any;
declare var chr0:any;
declare var chr1:any;
declare var has_buf:boolean;
declare var new_buf:any;
declare var new_raw_buf:any;
declare var new_unsafe_buf:any;
declare var Buffer_from:any;
*/ /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*jshint eqnull:true */ /*exported CFB */ /*global Uint8Array:false, Uint16Array:false */ /*::
type SectorEntry = {
	name?:string;
	nodes?:Array<number>;
	data:RawBytes;
};
type SectorList = {
	[k:string|number]:SectorEntry;
	name:?string;
	fat_addrs:Array<number>;
	ssz:number;
}
type CFBFiles = {[n:string]:CFBEntry};
*/ /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported CRC32 */ var CRC32 = /*#__PURE__*/ function() {
    var CRC32 = {};
    CRC32.version = "1.2.0";
    /* see perf/crc32table.js */ /*global Int32Array */ function signed_crc_table() /*:any*/ {
        var c = 0, table /*:Array<number>*/  = new Array(256);
        for(var n = 0; n != 256; ++n){
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
        }
        return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
    }
    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
        var c = 0, v = 0, n = 0, table /*:Array<number>*/  = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
        for(n = 0; n != 256; ++n)table[n] = T[n];
        for(n = 0; n != 256; ++n){
            v = T[n];
            for(c = 256 + n; c < 4096; c += 256)v = table[c] = v >>> 8 ^ T[v & 0xFF];
        }
        var out = [];
        for(n = 1; n != 16; ++n)out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
        return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
    var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr /*:string*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed /*:: ? 0 : 0 */  ^ -1;
        for(var i = 0, L = bstr.length; i < L;)C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];
        return ~C;
    }
    function crc32_buf(B /*:Uint8Array|Array<number>*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed /*:: ? 0 : 0 */  ^ -1, L = B.length - 15, i = 0;
        for(; i < L;)C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
        L += 15;
        while(i < L)C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];
        return ~C;
    }
    function crc32_str(str /*:string*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed ^ -1;
        for(var i = 0, L = str.length, c = 0, d = 0; i < L;){
            c = str.charCodeAt(i++);
            if (c < 0x80) C = C >>> 8 ^ T0[(C ^ c) & 0xFF];
            else if (c < 0x800) {
                C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            } else if (c >= 0xD800 && c < 0xE000) {
                c = (c & 1023) + 64;
                d = str.charCodeAt(i++) & 1023;
                C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];
            } else {
                C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            }
        }
        return ~C;
    }
    CRC32.table = T0;
    CRC32.bstr = crc32_bstr;
    CRC32.buf = crc32_buf;
    CRC32.str = crc32_str;
    return CRC32;
}();
/* [MS-CFB] v20171201 */ var CFB = /*#__PURE__*/ function _CFB() {
    var exports = {};
    exports.version = "1.2.1";
    /* [MS-CFB] 2.6.4 */ function namecmp(l /*:string*/ , r /*:string*/ ) /*:number*/ {
        var L = l.split("/"), R = r.split("/");
        for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i){
            if (c = L[i].length - R[i].length) return c;
            if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
        }
        return L.length - R.length;
    }
    function dirname(p /*:string*/ ) /*:string*/ {
        if (p.charAt(p.length - 1) == "/") return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return c === -1 ? p : p.slice(0, c + 1);
    }
    function filename(p /*:string*/ ) /*:string*/ {
        if (p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return c === -1 ? p : p.slice(c + 1);
    }
    /* -------------------------------------------------------------------------- */ /* DOS Date format:
   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
   add 1980 to stored year
   stored second should be doubled
*/ /* write JS date to buf as a DOS date */ function write_dos_date(buf /*:CFBlob*/ , date /*:Date|string*/ ) {
        if (typeof date === "string") date = new Date(date);
        var hms /*:number*/  = date.getHours();
        hms = hms << 6 | date.getMinutes();
        hms = hms << 5 | date.getSeconds() >>> 1;
        buf.write_shift(2, hms);
        var ymd /*:number*/  = date.getFullYear() - 1980;
        ymd = ymd << 4 | date.getMonth() + 1;
        ymd = ymd << 5 | date.getDate();
        buf.write_shift(2, ymd);
    }
    /* read four bytes from buf and interpret as a DOS date */ function parse_dos_date(buf /*:CFBlob*/ ) /*:Date*/ {
        var hms = buf.read_shift(2) & 0xFFFF;
        var ymd = buf.read_shift(2) & 0xFFFF;
        var val = new Date();
        var d = ymd & 0x1F;
        ymd >>>= 5;
        var m = ymd & 0x0F;
        ymd >>>= 4;
        val.setMilliseconds(0);
        val.setFullYear(ymd + 1980);
        val.setMonth(m - 1);
        val.setDate(d);
        var S = hms & 0x1F;
        hms >>>= 5;
        var M = hms & 0x3F;
        hms >>>= 6;
        val.setHours(hms);
        val.setMinutes(M);
        val.setSeconds(S << 1);
        return val;
    }
    function parse_extra_field(blob /*:CFBlob*/ ) /*:any*/ {
        prep_blob(blob, 0);
        var o = /*::(*/ {} /*:: :any)*/ ;
        var flags = 0;
        while(blob.l <= blob.length - 4){
            var type = blob.read_shift(2);
            var sz = blob.read_shift(2), tgt = blob.l + sz;
            var p = {};
            switch(type){
                /* UNIX-style Timestamps */ case 0x5455:
                    flags = blob.read_shift(1);
                    if (flags & 1) p.mtime = blob.read_shift(4);
                    /* for some reason, CD flag corresponds to LFH */ if (sz > 5) {
                        if (flags & 2) p.atime = blob.read_shift(4);
                        if (flags & 4) p.ctime = blob.read_shift(4);
                    }
                    if (p.mtime) p.mt = new Date(p.mtime * 1000);
                    break;
            }
            blob.l = tgt;
            o[type] = p;
        }
        return o;
    }
    var fs /*:: = require('fs'); */ ;
    function get_fs() {
        return fs || (fs = {});
    }
    function parse(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
        if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);
        if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
        var mver = 3;
        var ssz = 512;
        var nmfs = 0; // number of mini FAT sectors
        var difat_sec_cnt = 0;
        var dir_start = 0;
        var minifat_start = 0;
        var difat_start = 0;
        var fat_addrs /*:Array<number>*/  = []; // locations of FAT sectors
        /* [MS-CFB] 2.2 Compound File Header */ var blob /*:CFBlob*/  = /*::(*/ file.slice(0, 512) /*:: :any)*/ ;
        prep_blob(blob, 0);
        /* major version */ var mv = check_get_mver(blob);
        mver = mv[0];
        switch(mver){
            case 3:
                ssz = 512;
                break;
            case 4:
                ssz = 4096;
                break;
            case 0:
                if (mv[1] == 0) return parse_zip(file, options);
            /* falls through */ default:
                throw new Error("Major Version: Expected 3 or 4 saw " + mver);
        }
        /* reprocess header */ if (ssz !== 512) {
            blob = /*::(*/ file.slice(0, ssz) /*:: :any)*/ ;
            prep_blob(blob, 28 /* blob.l */ );
        }
        /* Save header for final object */ var header /*:RawBytes*/  = file.slice(0, ssz);
        check_shifts(blob, mver);
        // Number of Directory Sectors
        var dir_cnt /*:number*/  = blob.read_shift(4, "i");
        if (mver === 3 && dir_cnt !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
        // Number of FAT Sectors
        blob.l += 4;
        // First Directory Sector Location
        dir_start = blob.read_shift(4, "i");
        // Transaction Signature
        blob.l += 4;
        // Mini Stream Cutoff Size
        blob.chk("00100000", "Mini Stream Cutoff Size: ");
        // First Mini FAT Sector Location
        minifat_start = blob.read_shift(4, "i");
        // Number of Mini FAT Sectors
        nmfs = blob.read_shift(4, "i");
        // First DIFAT sector location
        difat_start = blob.read_shift(4, "i");
        // Number of DIFAT Sectors
        difat_sec_cnt = blob.read_shift(4, "i");
        // Grab FAT Sector Locations
        for(var q = -1, j = 0; j < 109; ++j){
            q = blob.read_shift(4, "i");
            if (q < 0) break;
            fat_addrs[j] = q;
        }
        /** Break the file up into sectors */ var sectors /*:Array<RawBytes>*/  = sectorify(file, ssz);
        sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
        /** Chains */ var sector_list /*:SectorList*/  = make_sector_list(sectors, dir_start, fat_addrs, ssz);
        sector_list[dir_start].name = "!Directory";
        if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
        sector_list[fat_addrs[0]].name = "!FAT";
        sector_list.fat_addrs = fat_addrs;
        sector_list.ssz = ssz;
        /* [MS-CFB] 2.6.1 Compound File Directory Entry */ var files /*:CFBFiles*/  = {}, Paths /*:Array<string>*/  = [], FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
        build_full_paths(FileIndex, FullPaths, Paths);
        Paths.shift();
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        // $FlowIgnore
        if (options && options.raw) o.raw = {
            header: header,
            sectors: sectors
        };
        return o;
    } // parse
    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */ function check_get_mver(blob /*:CFBlob*/ ) /*:[number, number]*/ {
        if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [
            0,
            0
        ];
        // header signature 8
        blob.chk(HEADER_SIGNATURE, "Header Signature: ");
        // clsid 16
        //blob.chk(HEADER_CLSID, 'CLSID: ');
        blob.l += 16;
        // minor version 2
        var mver /*:number*/  = blob.read_shift(2, "u");
        return [
            blob.read_shift(2, "u"),
            mver
        ];
    }
    function check_shifts(blob /*:CFBlob*/ , mver /*:number*/ ) /*:void*/ {
        var shift = 0x09;
        // Byte Order
        //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
        blob.l += 2;
        // Sector Shift
        switch(shift = blob.read_shift(2)){
            case 0x09:
                if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift);
                break;
            case 0x0c:
                if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift);
                break;
            default:
                throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
        }
        // Mini Sector Shift
        blob.chk("0600", "Mini Sector Shift: ");
        // Reserved
        blob.chk("000000000000", "Reserved: ");
    }
    /** Break the file up into sectors */ function sectorify(file /*:RawBytes*/ , ssz /*:number*/ ) /*:Array<RawBytes>*/ {
        var nsectors = Math.ceil(file.length / ssz) - 1;
        var sectors /*:Array<RawBytes>*/  = [];
        for(var i = 1; i < nsectors; ++i)sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);
        sectors[nsectors - 1] = file.slice(nsectors * ssz);
        return sectors;
    }
    /* [MS-CFB] 2.6.4 Red-Black Tree */ function build_full_paths(FI /*:CFBFileIndex*/ , FP /*:Array<string>*/ , Paths /*:Array<string>*/ ) /*:void*/ {
        var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
        var dad /*:Array<number>*/  = [], q /*:Array<number>*/  = [];
        for(; i < pl; ++i){
            dad[i] = q[i] = i;
            FP[i] = Paths[i];
        }
        for(; j < q.length; ++j){
            i = q[j];
            L = FI[i].L;
            R = FI[i].R;
            C = FI[i].C;
            if (dad[i] === i) {
                if (L !== -1 /*NOSTREAM*/  && dad[L] !== L) dad[i] = dad[L];
                if (R !== -1 && dad[R] !== R) dad[i] = dad[R];
            }
            if (C !== -1 /*NOSTREAM*/ ) dad[C] = i;
            if (L !== -1 && i != dad[i]) {
                dad[L] = dad[i];
                if (q.lastIndexOf(L) < j) q.push(L);
            }
            if (R !== -1 && i != dad[i]) {
                dad[R] = dad[i];
                if (q.lastIndexOf(R) < j) q.push(R);
            }
        }
        for(i = 1; i < pl; ++i)if (dad[i] === i) {
            if (R !== -1 /*NOSTREAM*/  && dad[R] !== R) dad[i] = dad[R];
            else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];
        }
        for(i = 1; i < pl; ++i){
            if (FI[i].type === 0 /* unknown */ ) continue;
            j = i;
            if (j != dad[j]) do {
                j = dad[j];
                FP[i] = FP[j] + "/" + FP[i];
            }while (j !== 0 && -1 !== dad[j] && j != dad[j]);
            dad[i] = -1;
        }
        FP[0] += "/";
        for(i = 1; i < pl; ++i)if (FI[i].type !== 2 /* stream */ ) FP[i] += "/";
    }
    function get_mfat_entry(entry /*:CFBEntry*/ , payload /*:RawBytes*/ , mini /*:?RawBytes*/ ) /*:CFBlob*/ {
        var start = entry.start, size = entry.size;
        //return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);
        var o = [];
        var idx = start;
        while(mini && size > 0 && idx >= 0){
            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
        }
        if (o.length === 0) return new_buf(0);
        return bconcat(o).slice(0, entry.size);
    }
    /** Chase down the rest of the DIFAT chain to build a comprehensive list
    DIFAT chains by storing the next sector number as the last 32 bits */ function sleuth_fat(idx /*:number*/ , cnt /*:number*/ , sectors /*:Array<RawBytes>*/ , ssz /*:number*/ , fat_addrs) /*:void*/ {
        var q /*:number*/  = ENDOFCHAIN;
        if (idx === ENDOFCHAIN) {
            if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
        } else if (idx !== -1 /*FREESECT*/ ) {
            var sector = sectors[idx], m = (ssz >>> 2) - 1;
            if (!sector) return;
            for(var i = 0; i < m; ++i){
                if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;
                fat_addrs.push(q);
            }
            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
        }
    }
    /** Follow the linked list of sectors for a given starting point */ function get_sector_list(sectors /*:Array<RawBytes>*/ , start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ , chkd /*:?Array<boolean>*/ ) /*:SectorEntry*/ {
        var buf /*:Array<number>*/  = [], buf_chain /*:Array<any>*/  = [];
        if (!chkd) chkd = [];
        var modulus = ssz - 1, j = 0, jj = 0;
        for(j = start; j >= 0;){
            chkd[j] = true;
            buf[buf.length] = j;
            buf_chain.push(sectors[j]);
            var addr = fat_addrs[Math.floor(j * 4 / ssz)];
            jj = j * 4 & modulus;
            if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
            if (!sectors[addr]) break;
            j = __readInt32LE(sectors[addr], jj);
        }
        return {
            nodes: buf,
            data: __toBuffer([
                buf_chain
            ])
        };
    }
    /** Chase down the sector linked lists */ function make_sector_list(sectors /*:Array<RawBytes>*/ , dir_start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ ) /*:SectorList*/ {
        var sl = sectors.length, sector_list /*:SectorList*/  = [];
        var chkd /*:Array<boolean>*/  = [], buf /*:Array<number>*/  = [], buf_chain /*:Array<RawBytes>*/  = [];
        var modulus = ssz - 1, i = 0, j = 0, k = 0, jj = 0;
        for(i = 0; i < sl; ++i){
            buf = [];
            k = i + dir_start;
            if (k >= sl) k -= sl;
            if (chkd[k]) continue;
            buf_chain = [];
            var seen = [];
            for(j = k; j >= 0;){
                seen[j] = true;
                chkd[j] = true;
                buf[buf.length] = j;
                buf_chain.push(sectors[j]);
                var addr /*:number*/  = fat_addrs[Math.floor(j * 4 / ssz)];
                jj = j * 4 & modulus;
                if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
                if (!sectors[addr]) break;
                j = __readInt32LE(sectors[addr], jj);
                if (seen[j]) break;
            }
            sector_list[k] = {
                nodes: buf,
                data: __toBuffer([
                    buf_chain
                ])
            } /*:SectorEntry*/ ;
        }
        return sector_list;
    }
    /* [MS-CFB] 2.6.1 Compound File Directory Entry */ function read_directory(dir_start /*:number*/ , sector_list /*:SectorList*/ , sectors /*:Array<RawBytes>*/ , Paths /*:Array<string>*/ , nmfs, files, FileIndex, mini) {
        var minifat_store = 0, pl = Paths.length ? 2 : 0;
        var sector = sector_list[dir_start].data;
        var i = 0, namelen = 0, name;
        for(; i < sector.length; i += 128){
            var blob /*:CFBlob*/  = /*::(*/ sector.slice(i, i + 128) /*:: :any)*/ ;
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name = __utf16le(blob, 0, namelen - pl);
            Paths.push(name);
            var o /*:CFBEntry*/  = {
                name: name,
                type: blob.read_shift(1),
                color: blob.read_shift(1),
                L: blob.read_shift(4, "i"),
                R: blob.read_shift(4, "i"),
                C: blob.read_shift(4, "i"),
                clsid: blob.read_shift(16),
                state: blob.read_shift(4, "i"),
                start: 0,
                size: 0
            };
            var ctime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);
            var mtime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);
            o.start = blob.read_shift(4, "i");
            o.size = blob.read_shift(4, "i");
            if (o.size < 0 && o.start < 0) {
                o.size = o.type = 0;
                o.start = ENDOFCHAIN;
                o.name = "";
            }
            if (o.type === 5) {
                minifat_store = o.start;
                if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
            /*minifat_size = o.size;*/ } else if (o.size >= 4096 /* MSCSZ */ ) {
                o.storage = "fat";
                if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
                sector_list[o.start].name = o.name;
                o.content = sector_list[o.start].data.slice(0, o.size);
            } else {
                o.storage = "minifat";
                if (o.size < 0) o.size = 0;
                else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
            }
            if (o.content) prep_blob(o.content, 0);
            files[name] = o;
            FileIndex.push(o);
        }
    }
    function read_date(blob /*:RawBytes|CFBlob*/ , offset /*:number*/ ) /*:Date*/ {
        return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);
    }
    function read_file(filename /*:string*/ , options /*:CFBReadOpts*/ ) {
        get_fs();
        return parse(fs.readFileSync(filename), options);
    }
    function read(blob /*:RawBytes|string*/ , options /*:CFBReadOpts*/ ) {
        var type = options && options.type;
        if (!type) {
            if (has_buf && Buffer.isBuffer(blob)) type = "buffer";
        }
        switch(type || "base64"){
            case "file":
                /*:: if(typeof blob !== 'string') throw "Must pass a filename when type='file'"; */ return read_file(blob, options);
            case "base64":
                /*:: if(typeof blob !== 'string') throw "Must pass a base64-encoded binary string when type='file'"; */ return parse(s2a(Base64_decode(blob)), options);
            case "binary":
                /*:: if(typeof blob !== 'string') throw "Must pass a binary string when type='file'"; */ return parse(s2a(blob), options);
        }
        return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */ blob, options);
    }
    function init_cfb(cfb /*:CFBContainer*/ , opts /*:?any*/ ) /*:void*/ {
        var o = opts || {}, root = o.root || "Root Entry";
        if (!cfb.FullPaths) cfb.FullPaths = [];
        if (!cfb.FileIndex) cfb.FileIndex = [];
        if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
        if (cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = {
                name: root,
                type: 5
            } /*:any*/ ;
        }
        if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
        seed_cfb(cfb);
    }
    function seed_cfb(cfb /*:CFBContainer*/ ) /*:void*/ {
        var nm = "\x01Sh33tJ5";
        if (CFB.find(cfb, "/" + nm)) return;
        var p = new_buf(4);
        p[0] = 55;
        p[1] = p[3] = 50;
        p[2] = 54;
        cfb.FileIndex.push({
            name: nm,
            type: 2,
            content: p,
            size: 4,
            L: 69,
            R: 69,
            C: 69
        } /*:any*/ );
        cfb.FullPaths.push(cfb.FullPaths[0] + nm);
        rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb /*:CFBContainer*/ , f /*:?boolean*/ ) /*:void*/ {
        init_cfb(cfb);
        var gc = false, s = false;
        for(var i = cfb.FullPaths.length - 1; i >= 0; --i){
            var _file = cfb.FileIndex[i];
            switch(_file.type){
                case 0:
                    if (s) gc = true;
                    else {
                        cfb.FileIndex.pop();
                        cfb.FullPaths.pop();
                    }
                    break;
                case 1:
                case 2:
                case 5:
                    s = true;
                    if (isNaN(_file.R * _file.L * _file.C)) gc = true;
                    if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
                    break;
                default:
                    gc = true;
                    break;
            }
        }
        if (!gc && !f) return;
        var now = new Date(1987, 1, 19), j = 0;
        // Track which names exist
        var fullPaths = Object.create ? Object.create(null) : {};
        var data /*:Array<[string, CFBEntry]>*/  = [];
        for(i = 0; i < cfb.FullPaths.length; ++i){
            fullPaths[cfb.FullPaths[i]] = true;
            if (cfb.FileIndex[i].type === 0) continue;
            data.push([
                cfb.FullPaths[i],
                cfb.FileIndex[i]
            ]);
        }
        for(i = 0; i < data.length; ++i){
            var dad = dirname(data[i][0]);
            s = fullPaths[dad];
            if (!s) {
                data.push([
                    dad,
                    {
                        name: filename(dad).replace("/", ""),
                        type: 1,
                        clsid: HEADER_CLSID,
                        ct: now,
                        mt: now,
                        content: null
                    } /*:any*/ 
                ]);
                // Add name to set
                fullPaths[dad] = true;
            }
        }
        data.sort(function(x, y) {
            return namecmp(x[0], y[0]);
        });
        cfb.FullPaths = [];
        cfb.FileIndex = [];
        for(i = 0; i < data.length; ++i){
            cfb.FullPaths[i] = data[i][0];
            cfb.FileIndex[i] = data[i][1];
        }
        for(i = 0; i < data.length; ++i){
            var elt = cfb.FileIndex[i];
            var nm = cfb.FullPaths[i];
            elt.name = filename(nm).replace("/", "");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = elt.clsid || HEADER_CLSID;
            if (i === 0) {
                elt.C = data.length > 1 ? 1 : -1;
                elt.size = 0;
                elt.type = 5;
            } else if (nm.slice(-1) == "/") {
                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == nm) break;
                elt.C = j >= data.length ? -1 : j;
                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;
                elt.R = j >= data.length ? -1 : j;
                elt.type = 1;
            } else {
                if (dirname(cfb.FullPaths[i + 1] || "") == dirname(nm)) elt.R = i + 1;
                elt.type = 2;
            }
        }
    }
    function _write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {
        var _opts = options || {};
        /* MAD is order-sensitive, skip rebuild and sort */ if (_opts.fileType == "mad") return write_mad(cfb, _opts);
        rebuild_cfb(cfb);
        switch(_opts.fileType){
            case "zip":
                return write_zip(cfb, _opts);
        }
        var L = function(cfb /*:CFBContainer*/ ) /*:Array<number>*/ {
            var mini_size = 0, fat_size = 0;
            for(var i = 0; i < cfb.FileIndex.length; ++i){
                var file = cfb.FileIndex[i];
                if (!file.content) continue;
                /*:: if(file.content == null) throw new Error("unreachable"); */ var flen = file.content.length;
                if (flen > 0) {
                    if (flen < 0x1000) mini_size += flen + 0x3F >> 6;
                    else fat_size += flen + 0x01FF >> 9;
                }
            }
            var dir_cnt = cfb.FullPaths.length + 3 >> 2;
            var mini_cnt = mini_size + 7 >> 3;
            var mfat_cnt = mini_size + 0x7F >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = fat_base + 0x7F >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);
            while(fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt)difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);
            var L = [
                1,
                difat_cnt,
                fat_cnt,
                mfat_cnt,
                dir_cnt,
                fat_size,
                mini_size,
                0
            ];
            cfb.FileIndex[0].size = mini_size << 6;
            L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);
            return L;
        }(cfb);
        var o = new_buf(L[7] << 9);
        var i = 0, T = 0;
        for(i = 0; i < 8; ++i)o.write_shift(1, HEADER_SIG[i]);
        for(i = 0; i < 8; ++i)o.write_shift(2, 0);
        o.write_shift(2, 0x003E);
        o.write_shift(2, 0x0003);
        o.write_shift(2, 0xFFFE);
        o.write_shift(2, 0x0009);
        o.write_shift(2, 0x0006);
        for(i = 0; i < 3; ++i)o.write_shift(2, 0);
        o.write_shift(4, 0);
        o.write_shift(4, L[2]);
        o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
        o.write_shift(4, 0);
        o.write_shift(4, 4096);
        o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[3]);
        o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[1]);
        for(i = 0; i < 109; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);
        if (L[1]) for(T = 0; T < L[1]; ++T){
            for(; i < 236 + T * 127; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);
            o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
        }
        var chainit = function(w /*:number*/ ) /*:void*/ {
            for(T += w; i < T - 1; ++i)o.write_shift(-4, i + 1);
            if (w) {
                ++i;
                o.write_shift(-4, ENDOFCHAIN);
            }
        };
        T = i = 0;
        for(T += L[1]; i < T; ++i)o.write_shift(-4, consts.DIFSECT);
        for(T += L[2]; i < T; ++i)o.write_shift(-4, consts.FATSECT);
        chainit(L[3]);
        chainit(L[4]);
        var j /*:number*/  = 0, flen /*:number*/  = 0;
        var file /*:CFBEntry*/  = cfb.FileIndex[0];
        for(; j < cfb.FileIndex.length; ++j){
            file = cfb.FileIndex[j];
            if (!file.content) continue;
            /*:: if(file.content == null) throw new Error("unreachable"); */ flen = file.content.length;
            if (flen < 0x1000) continue;
            file.start = T;
            chainit(flen + 0x01FF >> 9);
        }
        chainit(L[6] + 7 >> 3);
        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);
        T = i = 0;
        for(j = 0; j < cfb.FileIndex.length; ++j){
            file = cfb.FileIndex[j];
            if (!file.content) continue;
            /*:: if(file.content == null) throw new Error("unreachable"); */ flen = file.content.length;
            if (!flen || flen >= 0x1000) continue;
            file.start = T;
            chainit(flen + 0x3F >> 6);
        }
        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);
        for(i = 0; i < L[4] << 2; ++i){
            var nm = cfb.FullPaths[i];
            if (!nm || nm.length === 0) {
                for(j = 0; j < 17; ++j)o.write_shift(4, 0);
                for(j = 0; j < 3; ++j)o.write_shift(4, -1);
                for(j = 0; j < 12; ++j)o.write_shift(4, 0);
                continue;
            }
            file = cfb.FileIndex[i];
            if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            var _nm /*:string*/  = i === 0 && _opts.root || file.name;
            flen = 2 * (_nm.length + 1);
            o.write_shift(64, _nm, "utf16le");
            o.write_shift(2, flen);
            o.write_shift(1, file.type);
            o.write_shift(1, file.color);
            o.write_shift(-4, file.L);
            o.write_shift(-4, file.R);
            o.write_shift(-4, file.C);
            if (!file.clsid) for(j = 0; j < 4; ++j)o.write_shift(4, 0);
            else o.write_shift(16, file.clsid, "hex");
            o.write_shift(4, file.state || 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, file.start);
            o.write_shift(4, file.size);
            o.write_shift(4, 0);
        }
        for(i = 1; i < cfb.FileIndex.length; ++i){
            file = cfb.FileIndex[i];
            /*:: if(!file.content) throw new Error("unreachable"); */ if (file.size >= 0x1000) {
                o.l = file.start + 1 << 9;
                if (has_buf && Buffer.isBuffer(file.content)) {
                    file.content.copy(o, o.l, 0, file.size);
                    // o is a 0-filled Buffer so just set next offset
                    o.l += file.size + 511 & -512;
                } else {
                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);
                    for(; j & 0x1FF; ++j)o.write_shift(1, 0);
                }
            }
        }
        for(i = 1; i < cfb.FileIndex.length; ++i){
            file = cfb.FileIndex[i];
            /*:: if(!file.content) throw new Error("unreachable"); */ if (file.size > 0 && file.size < 0x1000) {
                if (has_buf && Buffer.isBuffer(file.content)) {
                    file.content.copy(o, o.l, 0, file.size);
                    // o is a 0-filled Buffer so just set next offset
                    o.l += file.size + 63 & -64;
                } else {
                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);
                    for(; j & 0x3F; ++j)o.write_shift(1, 0);
                }
            }
        }
        if (has_buf) o.l = o.length;
        else // When using Buffer, already 0-filled
        while(o.l < o.length)o.write_shift(1, 0);
        return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */ function find(cfb /*:CFBContainer*/ , path /*:string*/ ) /*:?CFBEntry*/ {
        var UCFullPaths /*:Array<string>*/  = cfb.FullPaths.map(function(x) {
            return x.toUpperCase();
        });
        var UCPaths /*:Array<string>*/  = UCFullPaths.map(function(x) {
            var y = x.split("/");
            return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
        });
        var k /*:boolean*/  = false;
        if (path.charCodeAt(0) === 47 /* "/" */ ) {
            k = true;
            path = UCFullPaths[0].slice(0, -1) + path;
        } else k = path.indexOf("/") !== -1;
        var UCPath /*:string*/  = path.toUpperCase();
        var w /*:number*/  = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
        if (w !== -1) return cfb.FileIndex[w];
        var m = !UCPath.match(chr1);
        UCPath = UCPath.replace(chr0, "");
        if (m) UCPath = UCPath.replace(chr1, "!");
        for(w = 0; w < UCFullPaths.length; ++w){
            if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
            if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
        }
        return null;
    }
    /** CFB Constants */ var MSSZ = 64; /* Mini Sector Size = 1<<6 */ 
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
    /* 2.1 Compound File Sector Numbers and Types */ var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */ var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
    var HEADER_SIG = [
        0xD0,
        0xCF,
        0x11,
        0xE0,
        0xA1,
        0xB1,
        0x1A,
        0xE1
    ];
    var HEADER_CLSID = "00000000000000000000000000000000";
    var consts = {
        /* 2.1 Compund File Sector Numbers and Types */ MAXREGSECT: -6,
        DIFSECT: -4,
        FATSECT: -3,
        ENDOFCHAIN: ENDOFCHAIN,
        FREESECT: -1,
        /* 2.2 Compound File Header */ HEADER_SIGNATURE: HEADER_SIGNATURE,
        HEADER_MINOR_VERSION: "3e00",
        MAXREGSID: -6,
        NOSTREAM: -1,
        HEADER_CLSID: HEADER_CLSID,
        /* 2.6.1 Compound File Directory Entry */ EntryTypes: [
            "unknown",
            "storage",
            "stream",
            "lockbytes",
            "property",
            "root"
        ]
    };
    function write_file(cfb /*:CFBContainer*/ , filename /*:string*/ , options /*:CFBWriteOpts*/ ) /*:void*/ {
        get_fs();
        var o = _write(cfb, options);
        /*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error("unreachable"); */ fs.writeFileSync(filename, o);
    }
    function a2s(o /*:RawBytes*/ ) /*:string*/ {
        var out = new Array(o.length);
        for(var i = 0; i < o.length; ++i)out[i] = String.fromCharCode(o[i]);
        return out.join("");
    }
    function write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {
        var o = _write(cfb, options);
        switch(options && options.type || "buffer"){
            case "file":
                get_fs();
                fs.writeFileSync(options.filename, o /*:any*/ );
                return o;
            case "binary":
                return typeof o == "string" ? o : a2s(o);
            case "base64":
                return Base64_encode(typeof o == "string" ? o : a2s(o));
            case "buffer":
                if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
            /* falls through */ case "array":
                return typeof o == "string" ? s2a(o) : o;
        }
        return o;
    }
    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */ var _zlib;
    function use_zlib(zlib) {
        try {
            var InflateRaw = zlib.InflateRaw;
            var InflRaw = new InflateRaw();
            InflRaw._processChunk(new Uint8Array([
                3,
                0
            ]), InflRaw._finishFlushFlag);
            if (InflRaw.bytesRead) _zlib = zlib;
            else throw new Error("zlib does not expose bytesRead");
        } catch (e) {
            console.error("cannot use native zlib: " + (e.message || e));
        }
    }
    function _inflateRawSync(payload, usz) {
        if (!_zlib) return _inflate(payload, usz);
        var InflateRaw = _zlib.InflateRaw;
        var InflRaw = new InflateRaw();
        var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
        payload.l += InflRaw.bytesRead;
        return out;
    }
    function _deflateRawSync(payload) {
        return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }
    var CLEN_ORDER = [
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
    ];
    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */ var LEN_LN = [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258
    ];
    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */ var DST_LN = [
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577
    ];
    function bit_swap_8(n) {
        var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;
        return (t >> 16 | t >> 8 | t) & 0xFF;
    }
    var use_typed_arrays = typeof Uint8Array !== "undefined";
    var bitswap8 = use_typed_arrays ? new Uint8Array(256) : [];
    for(var q = 0; q < 256; ++q)bitswap8[q] = bit_swap_8(q);
    function bit_swap_n(n, b) {
        var rev = bitswap8[n & 0xFF];
        if (b <= 8) return rev >>> 8 - b;
        rev = rev << 8 | bitswap8[n >> 8 & 0xFF];
        if (b <= 16) return rev >>> 16 - b;
        rev = rev << 8 | bitswap8[n >> 16 & 0xFF];
        return rev >>> 24 - b;
    }
    /* helpers for unaligned bit reads */ function read_bits_2(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;
    }
    function read_bits_3(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;
    }
    function read_bits_4(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;
    }
    function read_bits_5(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;
    }
    function read_bits_7(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;
    }
    /* works up to n = 3 * 8 + 1 = 25 */ function read_bits_n(buf, bl, n) {
        var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
        var v = buf[h] >>> w;
        if (n < 8 - w) return v & f;
        v |= buf[h + 1] << 8 - w;
        if (n < 16 - w) return v & f;
        v |= buf[h + 2] << 16 - w;
        if (n < 24 - w) return v & f;
        v |= buf[h + 3] << 24 - w;
        return v & f;
    }
    /* helpers for unaligned bit writes */ function write_bits_3(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        if (w <= 5) buf[h] |= (v & 7) << w;
        else {
            buf[h] |= v << w & 0xFF;
            buf[h + 1] = (v & 7) >> 8 - w;
        }
        return bl + 3;
    }
    function write_bits_1(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v = (v & 1) << w;
        buf[h] |= v;
        return bl + 1;
    }
    function write_bits_8(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v <<= w;
        buf[h] |= v & 0xFF;
        v >>>= 8;
        buf[h + 1] = v;
        return bl + 8;
    }
    function write_bits_16(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v <<= w;
        buf[h] |= v & 0xFF;
        v >>>= 8;
        buf[h + 1] = v & 0xFF;
        buf[h + 2] = v >>> 8;
        return bl + 16;
    }
    /* until ArrayBuffer#realloc is a thing, fake a realloc */ function realloc(b, sz /*:number*/ ) {
        var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i = 0;
        if (L >= sz) return b;
        if (has_buf) {
            var o = new_unsafe_buf(M);
            // $FlowIgnore
            if (b.copy) b.copy(o);
            else for(; i < b.length; ++i)o[i] = b[i];
            return o;
        } else if (use_typed_arrays) {
            var a = new Uint8Array(M);
            if (a.set) a.set(b);
            else for(; i < L; ++i)a[i] = b[i];
            return a;
        }
        b.length = M;
        return b;
    }
    /* zero-filled arrays for older browsers */ function zero_fill_array(n) {
        var o = new Array(n);
        for(var i = 0; i < n; ++i)o[i] = 0;
        return o;
    }
    /* build tree (used for literals and lengths) */ function build_tree(clens, cmap, MAX /*:number*/ ) /*:number*/ {
        var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;
        var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
        for(i = 0; i < 32; ++i)bl_count[i] = 0;
        for(i = L; i < MAX; ++i)clens[i] = 0;
        L = clens.length;
        var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []
        /* build code tree */ for(i = 0; i < L; ++i){
            bl_count[w = clens[i]]++;
            if (maxlen < w) maxlen = w;
            ctree[i] = 0;
        }
        bl_count[0] = 0;
        for(i = 1; i <= maxlen; ++i)bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;
        for(i = 0; i < L; ++i){
            ccode = clens[i];
            if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;
        }
        /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */ var cleni = 0;
        for(i = 0; i < L; ++i){
            cleni = clens[i];
            if (cleni != 0) {
                ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;
                for(j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)cmap[ccode | j << cleni] = cleni & 15 | i << 4;
            }
        }
        return maxlen;
    }
    /* Fixed Huffman */ var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    if (!use_typed_arrays) {
        for(var i = 0; i < 512; ++i)fix_lmap[i] = 0;
        for(i = 0; i < 32; ++i)fix_dmap[i] = 0;
    }
    (function() {
        var dlens /*:Array<number>*/  = [];
        var i = 0;
        for(; i < 32; i++)dlens.push(5);
        build_tree(dlens, fix_dmap, 32);
        var clens /*:Array<number>*/  = [];
        i = 0;
        for(; i <= 143; i++)clens.push(8);
        for(; i <= 255; i++)clens.push(9);
        for(; i <= 279; i++)clens.push(7);
        for(; i <= 287; i++)clens.push(8);
        build_tree(clens, fix_lmap, 288);
    })();
    var _deflateRaw = /*#__PURE__*/ function _deflateRawIIFE() {
        var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];
        var j = 0, k = 0;
        for(; j < DST_LN.length - 1; ++j)for(; k < DST_LN[j + 1]; ++k)DST_LN_RE[k] = j;
        for(; k < 32768; ++k)DST_LN_RE[k] = 29;
        var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];
        for(j = 0, k = 0; j < LEN_LN.length - 1; ++j)for(; k < LEN_LN[j + 1]; ++k)LEN_LN_RE[k] = j;
        function write_stored(data, out) {
            var boff = 0;
            while(boff < data.length){
                var L = Math.min(0xFFFF, data.length - boff);
                var h = boff + L == data.length;
                out.write_shift(1, +h);
                out.write_shift(2, L);
                out.write_shift(2, ~L & 0xFFFF);
                while(L-- > 0)out[out.l++] = data[boff++];
            }
            return out.l;
        }
        /* Fixed Huffman */ function write_huff_fixed(data, out) {
            var bl = 0;
            var boff = 0;
            var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];
            while(boff < data.length){
                var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);
                /* write a stored block for short data */ if (L < 10) {
                    bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line
                    if (bl & 7) bl += 8 - (bl & 7);
                    out.l = bl / 8 | 0;
                    out.write_shift(2, L);
                    out.write_shift(2, ~L & 0xFFFF);
                    while(L-- > 0)out[out.l++] = data[boff++];
                    bl = out.l * 8;
                    continue;
                }
                bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line
                var hash = 0;
                while(L-- > 0){
                    var d = data[boff];
                    hash = (hash << 5 ^ d) & 0x7FFF;
                    var match = -1, mlen = 0;
                    if (match = addrs[hash]) {
                        match |= boff & -32768;
                        if (match > boff) match -= 0x8000;
                        if (match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250)++mlen;
                    }
                    if (mlen > 2) {
                        /* Copy Token  */ d = LEN_LN_RE[mlen];
                        if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;
                        else {
                            write_bits_8(out, bl, 3);
                            bl += 5;
                            write_bits_8(out, bl, bitswap8[d - 23] >> 5);
                            bl += 3;
                        }
                        var len_eb = d < 8 ? 0 : d - 4 >> 2;
                        if (len_eb > 0) {
                            write_bits_16(out, bl, mlen - LEN_LN[d]);
                            bl += len_eb;
                        }
                        d = DST_LN_RE[boff - match];
                        bl = write_bits_8(out, bl, bitswap8[d] >> 3);
                        bl -= 3;
                        var dst_eb = d < 4 ? 0 : d - 2 >> 1;
                        if (dst_eb > 0) {
                            write_bits_16(out, bl, boff - match - DST_LN[d]);
                            bl += dst_eb;
                        }
                        for(var q = 0; q < mlen; ++q){
                            addrs[hash] = boff & 0x7FFF;
                            hash = (hash << 5 ^ data[boff]) & 0x7FFF;
                            ++boff;
                        }
                        L -= mlen - 1;
                    } else {
                        /* Literal Token */ if (d <= 143) d = d + 48;
                        else bl = write_bits_1(out, bl, 1);
                        bl = write_bits_8(out, bl, bitswap8[d]);
                        addrs[hash] = boff & 0x7FFF;
                        ++boff;
                    }
                }
                bl = write_bits_8(out, bl, 0) - 1;
            }
            out.l = (bl + 7) / 8 | 0;
            return out.l;
        }
        return function _deflateRaw(data, out) {
            if (data.length < 8) return write_stored(data, out);
            return write_huff_fixed(data, out);
        };
    }();
    function _deflate(data) {
        var buf = new_buf(50 + Math.floor(data.length * 1.1));
        var off = _deflateRaw(data, buf);
        return buf.slice(0, off);
    }
    /* modified inflate function also moves original read head */ var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
    var dyn_len_1 = 1, dyn_len_2 = 1;
    /* 5.5.3 Expanding Huffman Codes */ function dyn(data, boff /*:number*/ ) {
        /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */ var _HLIT = read_bits_5(data, boff) + 257;
        boff += 5;
        var _HDIST = read_bits_5(data, boff) + 1;
        boff += 5;
        var _HCLEN = read_bits_4(data, boff) + 4;
        boff += 4;
        var w = 0;
        /* grab and store code lengths */ var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
        var ctree = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ];
        var maxlen = 1;
        var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
        var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
        var L = clens.length; /* 19 */ 
        for(var i = 0; i < _HCLEN; ++i){
            clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
            if (maxlen < w) maxlen = w;
            bl_count[w]++;
            boff += 3;
        }
        /* build code tree */ var ccode = 0;
        bl_count[0] = 0;
        for(i = 1; i <= maxlen; ++i)next_code[i] = ccode = ccode + bl_count[i - 1] << 1;
        for(i = 0; i < L; ++i)if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
        /* cmap[7 bits from stream] = (off&7) + (lit<<3) */ var cleni = 0;
        for(i = 0; i < L; ++i){
            cleni = clens[i];
            if (cleni != 0) {
                ccode = bitswap8[ctree[i]] >> 8 - cleni;
                for(var j = (1 << 7 - cleni) - 1; j >= 0; --j)dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;
            }
        }
        /* read literal and dist codes at once */ var hcodes /*:Array<number>*/  = [];
        maxlen = 1;
        for(; hcodes.length < _HLIT + _HDIST;){
            ccode = dyn_cmap[read_bits_7(data, boff)];
            boff += ccode & 7;
            switch(ccode >>>= 3){
                case 16:
                    w = 3 + read_bits_2(data, boff);
                    boff += 2;
                    ccode = hcodes[hcodes.length - 1];
                    while(w-- > 0)hcodes.push(ccode);
                    break;
                case 17:
                    w = 3 + read_bits_3(data, boff);
                    boff += 3;
                    while(w-- > 0)hcodes.push(0);
                    break;
                case 18:
                    w = 11 + read_bits_7(data, boff);
                    boff += 7;
                    while(w-- > 0)hcodes.push(0);
                    break;
                default:
                    hcodes.push(ccode);
                    if (maxlen < ccode) maxlen = ccode;
                    break;
            }
        }
        /* build literal / length trees */ var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
        for(i = _HLIT; i < 286; ++i)h1[i] = 0;
        for(i = _HDIST; i < 30; ++i)h2[i] = 0;
        dyn_len_1 = build_tree(h1, dyn_lmap, 286);
        dyn_len_2 = build_tree(h2, dyn_dmap, 30);
        return boff;
    }
    /* return [ data, bytesRead ] */ function inflate(data, usz /*:number*/ ) {
        /* shortcircuit for empty buffer [0x03, 0x00] */ if (data[0] == 3 && !(data[1] & 0x3)) return [
            new_raw_buf(usz),
            2
        ];
        /* bit offset */ var boff = 0;
        /* header includes final bit and type bits */ var header = 0;
        var outbuf = new_unsafe_buf(usz ? usz : 262144);
        var woff = 0;
        var OL = outbuf.length >>> 0;
        var max_len_1 = 0, max_len_2 = 0;
        while((header & 1) == 0){
            header = read_bits_3(data, boff);
            boff += 3;
            if (header >>> 1 == 0) {
                /* Stored block */ if (boff & 7) boff += 8 - (boff & 7);
                /* 2 bytes sz, 2 bytes bit inverse */ var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
                boff += 32;
                /* push sz bytes */ if (sz > 0) {
                    if (!usz && OL < woff + sz) {
                        outbuf = realloc(outbuf, woff + sz);
                        OL = outbuf.length;
                    }
                    while(sz-- > 0){
                        outbuf[woff++] = data[boff >>> 3];
                        boff += 8;
                    }
                }
                continue;
            } else if (header >> 1 == 1) {
                /* Fixed Huffman */ max_len_1 = 9;
                max_len_2 = 5;
            } else {
                /* Dynamic Huffman */ boff = dyn(data, boff);
                max_len_1 = dyn_len_1;
                max_len_2 = dyn_len_2;
            }
            for(;;){
                if (!usz && OL < woff + 32767) {
                    outbuf = realloc(outbuf, woff + 32767);
                    OL = outbuf.length;
                }
                /* ingest code and move read head */ var bits = read_bits_n(data, boff, max_len_1);
                var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
                boff += code & 15;
                code >>>= 4;
                /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */ if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;
                else if (code == 256) break;
                else {
                    code -= 257;
                    var len_eb = code < 8 ? 0 : code - 4 >> 2;
                    if (len_eb > 5) len_eb = 0;
                    var tgt = woff + LEN_LN[code];
                    /* length extra bits */ if (len_eb > 0) {
                        tgt += read_bits_n(data, boff, len_eb);
                        boff += len_eb;
                    }
                    /* dist code */ bits = read_bits_n(data, boff, max_len_2);
                    code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                    boff += code & 15;
                    code >>>= 4;
                    var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                    var dst = DST_LN[code];
                    /* dist extra bits */ if (dst_eb > 0) {
                        dst += read_bits_n(data, boff, dst_eb);
                        boff += dst_eb;
                    }
                    /* in the common case, manual byte copy is faster than TA set / Buffer copy */ if (!usz && OL < tgt) {
                        outbuf = realloc(outbuf, tgt + 100);
                        OL = outbuf.length;
                    }
                    while(woff < tgt){
                        outbuf[woff] = outbuf[woff - dst];
                        ++woff;
                    }
                }
            }
        }
        if (usz) return [
            outbuf,
            boff + 7 >>> 3
        ];
        return [
            outbuf.slice(0, woff),
            boff + 7 >>> 3
        ];
    }
    function _inflate(payload, usz) {
        var data = payload.slice(payload.l || 0);
        var out = inflate(data, usz);
        payload.l += out[1];
        return out[0];
    }
    function warn_or_throw(wrn, msg) {
        if (wrn) {
            if (typeof console !== "undefined") console.error(msg);
        } else throw new Error(msg);
    }
    function parse_zip(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        var blob /*:CFBlob*/  = /*::(*/ file /*:: :any)*/ ;
        prep_blob(blob, 0);
        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        init_cfb(o, {
            root: options.root
        });
        /* find end of central directory, start just after signature */ var i = blob.length - 4;
        while((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0)--i;
        blob.l = i + 4;
        /* parse end of central directory */ blob.l += 4;
        var fcnt = blob.read_shift(2);
        blob.l += 6;
        var start_cd = blob.read_shift(4);
        /* parse central directory */ blob.l = start_cd;
        for(i = 0; i < fcnt; ++i){
            /* trust local file header instead of CD entry */ blob.l += 20;
            var csz = blob.read_shift(4);
            var usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var fcsz = blob.read_shift(2);
            blob.l += 8;
            var offset = blob.read_shift(4);
            var EF = parse_extra_field(/*::(*/ blob.slice(blob.l + namelen, blob.l + namelen + efsz));
            blob.l += namelen + efsz + fcsz;
            var L = blob.l;
            blob.l = offset + 4;
            parse_local_file(blob, csz, usz, o, EF);
            blob.l = L;
        }
        return o;
    }
    /* head starts just after local file header signature */ function parse_local_file(blob /*:CFBlob*/ , csz /*:number*/ , usz /*:number*/ , o /*:CFBContainer*/ , EF) {
        /* [local file header] */ blob.l += 2;
        var flags = blob.read_shift(2);
        var meth = blob.read_shift(2);
        var date = parse_dos_date(blob);
        if (flags & 0x2041) throw new Error("Unsupported ZIP encryption");
        var crc32 = blob.read_shift(4);
        var _csz = blob.read_shift(4);
        var _usz = blob.read_shift(4);
        var namelen = blob.read_shift(2);
        var efsz = blob.read_shift(2);
        // TODO: flags & (1<<11) // UTF8
        var name = "";
        for(var i = 0; i < namelen; ++i)name += String.fromCharCode(blob[blob.l++]);
        if (efsz) {
            var ef = parse_extra_field(/*::(*/ blob.slice(blob.l, blob.l + efsz));
            if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;
            if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;
        }
        blob.l += efsz;
        /* [encryption header] */ /* [file data] */ var data = blob.slice(blob.l, blob.l + _csz);
        switch(meth){
            case 8:
                data = _inflateRawSync(blob, _usz);
                break;
            case 0:
                break; // TODO: scan for magic number
            default:
                throw new Error("Unsupported ZIP Compression method " + meth);
        }
        /* [data descriptor] */ var wrn = false;
        if (flags & 8) {
            crc32 = blob.read_shift(4);
            if (crc32 == 0x08074b50) {
                crc32 = blob.read_shift(4);
                wrn = true;
            }
            _csz = blob.read_shift(4);
            _usz = blob.read_shift(4);
        }
        if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
        if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
        //var _crc32 = CRC32.buf(data, 0);
        //if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
        cfb_add(o, name, data, {
            unsafe: true,
            mt: date
        });
    }
    function write_zip(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes*/ {
        var _opts = options || {};
        var out = [], cdirs = [];
        var o /*:CFBlob*/  = new_buf(1);
        var method = _opts.compression ? 8 : 0, flags = 0;
        var desc = false;
        if (desc) flags |= 8;
        var i = 0, j = 0;
        var start_cd = 0, fcnt = 0;
        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
        var crcs = [];
        var sz_cd = 0;
        for(i = 1; i < cfb.FullPaths.length; ++i){
            fp = cfb.FullPaths[i].slice(root.length);
            fi = cfb.FileIndex[i];
            if (!fi.size || !fi.content || fp == "\x01Sh33tJ5") continue;
            var start = start_cd;
            /* TODO: CP437 filename */ var namebuf = new_buf(fp.length);
            for(j = 0; j < fp.length; ++j)namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);
            namebuf = namebuf.slice(0, namebuf.l);
            crcs[fcnt] = CRC32.buf(/*::((*/ fi.content /*::||[]):any)*/ , 0);
            var outbuf = fi.content /*::||[]*/ ;
            if (method == 8) outbuf = _deflateRawSync(outbuf);
            /* local file header */ o = new_buf(30);
            o.write_shift(4, 0x04034b50);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            /* TODO: last mod file time/date */ if (fi.mt) write_dos_date(o, fi.mt);
            else o.write_shift(4, 0);
            o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
            o.write_shift(4, flags & 8 ? 0 : outbuf.length);
            o.write_shift(4, flags & 8 ? 0 : /*::(*/ fi.content /*::||[])*/ .length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            start_cd += o.length;
            out.push(o);
            start_cd += namebuf.length;
            out.push(namebuf);
            /* TODO: extra fields? */ /* TODO: encryption header ? */ start_cd += outbuf.length;
            out.push(outbuf);
            /* data descriptor */ if (flags & 8) {
                o = new_buf(12);
                o.write_shift(-4, crcs[fcnt]);
                o.write_shift(4, outbuf.length);
                o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);
                start_cd += o.l;
                out.push(o);
            }
            /* central directory */ o = new_buf(46);
            o.write_shift(4, 0x02014b50);
            o.write_shift(2, 0);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            o.write_shift(4, 0); /* TODO: last mod file time/date */ 
            o.write_shift(-4, crcs[fcnt]);
            o.write_shift(4, outbuf.length);
            o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, start);
            sz_cd += o.l;
            cdirs.push(o);
            sz_cd += namebuf.length;
            cdirs.push(namebuf);
            ++fcnt;
        }
        /* end of central directory */ o = new_buf(22);
        o.write_shift(4, 0x06054b50);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, fcnt);
        o.write_shift(2, fcnt);
        o.write_shift(4, sz_cd);
        o.write_shift(4, start_cd);
        o.write_shift(2, 0);
        return bconcat([
            bconcat(out /*:any*/ ),
            bconcat(cdirs),
            o
        ]);
    }
    var ContentTypeMap = {
        "htm": "text/html",
        "xml": "text/xml",
        "gif": "image/gif",
        "jpg": "image/jpeg",
        "png": "image/png",
        "mso": "application/x-mso",
        "thmx": "application/vnd.ms-officetheme",
        "sh33tj5": "application/octet-stream"
    } /*:any*/ ;
    function get_content_type(fi /*:CFBEntry*/ , fp /*:string*/ ) /*:string*/ {
        if (fi.ctype) return fi.ctype;
        var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
        if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
        if (fp) {
            m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
            if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
        }
        return "application/octet-stream";
    }
    /* 76 character chunks TODO: intertwine encoding */ function write_base64_76(bstr /*:string*/ ) /*:string*/ {
        var data = Base64_encode(bstr);
        var o = [];
        for(var i = 0; i < data.length; i += 76)o.push(data.slice(i, i + 76));
        return o.join("\r\n") + "\r\n";
    }
    /*
Rules for QP:
	- escape =## applies for all non-display characters and literal "="
	- space or tab at end of line must be encoded
	- \r\n newlines can be preserved, but bare \r and \n must be escaped
	- lines must not exceed 76 characters, use soft breaks =\r\n

TODO: Some files from word appear to write line extensions with bare equals:

```
<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=
="70%"
```
*/ function write_quoted_printable(text /*:string*/ ) /*:string*/ {
        var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
            var w = c.charCodeAt(0).toString(16).toUpperCase();
            return "=" + (w.length == 1 ? "0" + w : w);
        });
        encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
        if (encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
        encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
        var o /*:Array<string>*/  = [], split = encoded.split("\r\n");
        for(var si = 0; si < split.length; ++si){
            var str = split[si];
            if (str.length == 0) {
                o.push("");
                continue;
            }
            for(var i = 0; i < str.length;){
                var end = 76;
                var tmp = str.slice(i, i + end);
                if (tmp.charAt(end - 1) == "=") end--;
                else if (tmp.charAt(end - 2) == "=") end -= 2;
                else if (tmp.charAt(end - 3) == "=") end -= 3;
                tmp = str.slice(i, i + end);
                i += end;
                if (i < str.length) tmp += "=";
                o.push(tmp);
            }
        }
        return o.join("\r\n");
    }
    function parse_quoted_printable(data /*:Array<string>*/ ) /*:RawBytes*/ {
        var o = [];
        /* unify long lines */ for(var di = 0; di < data.length; ++di){
            var line = data[di];
            while(di <= data.length && line.charAt(line.length - 1) == "=")line = line.slice(0, line.length - 1) + data[++di];
            o.push(line);
        }
        /* decode */ for(var oi = 0; oi < o.length; ++oi)o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
            return String.fromCharCode(parseInt($$.slice(1), 16));
        });
        return s2a(o.join("\r\n"));
    }
    function parse_mime(cfb /*:CFBContainer*/ , data /*:Array<string>*/ , root /*:string*/ ) /*:void*/ {
        var fname = "", cte = "", ctype = "", fdata;
        var di = 0;
        for(; di < 10; ++di){
            var line = data[di];
            if (!line || line.match(/^\s*$/)) break;
            var m = line.match(/^(.*?):\s*([^\s].*)$/);
            if (m) switch(m[1].toLowerCase()){
                case "content-location":
                    fname = m[2].trim();
                    break;
                case "content-type":
                    ctype = m[2].trim();
                    break;
                case "content-transfer-encoding":
                    cte = m[2].trim();
                    break;
            }
        }
        ++di;
        switch(cte.toLowerCase()){
            case "base64":
                fdata = s2a(Base64_decode(data.slice(di).join("")));
                break;
            case "quoted-printable":
                fdata = parse_quoted_printable(data.slice(di));
                break;
            default:
                throw new Error("Unsupported Content-Transfer-Encoding " + cte);
        }
        var file = cfb_add(cfb, fname.slice(root.length), fdata, {
            unsafe: true
        });
        if (ctype) file.ctype = ctype;
    }
    function parse_mad(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        if (a2s(file.slice(0, 13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
        var root = options && options.root || "";
        // $FlowIgnore
        var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
        var di = 0, row = "";
        /* if root is not specified, scan for the common prefix */ for(di = 0; di < data.length; ++di){
            row = data[di];
            if (!/^Content-Location:/i.test(row)) continue;
            row = row.slice(row.indexOf("file"));
            if (!root) root = row.slice(0, row.lastIndexOf("/") + 1);
            if (row.slice(0, root.length) == root) continue;
            while(root.length > 0){
                root = root.slice(0, root.length - 1);
                root = root.slice(0, root.lastIndexOf("/") + 1);
                if (row.slice(0, root.length) == root) break;
            }
        }
        var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
        if (!mboundary) throw new Error("MAD cannot find boundary");
        var boundary = "--" + (mboundary[1] || "");
        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        init_cfb(o);
        var start_di, fcnt = 0;
        for(di = 0; di < data.length; ++di){
            var line = data[di];
            if (line !== boundary && line !== boundary + "--") continue;
            if (fcnt++) parse_mime(o, data.slice(start_di, di), root);
            start_di = di;
        }
        return o;
    }
    function write_mad(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:string*/ {
        var opts = options || {};
        var boundary = opts.boundary || "SheetJS";
        boundary = "------=" + boundary;
        var out = [
            "MIME-Version: 1.0",
            'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
            "",
            "",
            ""
        ];
        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
        for(var i = 1; i < cfb.FullPaths.length; ++i){
            fp = cfb.FullPaths[i].slice(root.length);
            fi = cfb.FileIndex[i];
            if (!fi.size || !fi.content || fp == "\x01Sh33tJ5") continue;
            /* Normalize filename */ fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
                return "_x" + c.charCodeAt(0).toString(16) + "_";
            }).replace(/[\u0080-\uFFFF]/g, function(u) {
                return "_u" + u.charCodeAt(0).toString(16) + "_";
            });
            /* Extract content as binary string */ var ca = fi.content;
            // $FlowIgnore
            var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);
            /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */ var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
            for(var csl = 0; csl <= L; ++csl)if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;
            var qp = dispcnt >= L * 4 / 5;
            out.push(boundary);
            out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
            out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
            out.push("Content-Type: " + get_content_type(fi, fp));
            out.push("");
            out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
        }
        out.push(boundary + "--\r\n");
        return out.join("\r\n");
    }
    function cfb_new(opts /*:?any*/ ) /*:CFBContainer*/ {
        var o /*:CFBContainer*/  = {} /*:any*/ ;
        init_cfb(o, opts);
        return o;
    }
    function cfb_add(cfb /*:CFBContainer*/ , name /*:string*/ , content /*:?RawBytes*/ , opts /*:?any*/ ) /*:CFBEntry*/ {
        var unsafe = opts && opts.unsafe;
        if (!unsafe) init_cfb(cfb);
        var file = !unsafe && CFB.find(cfb, name);
        if (!file) {
            var fpath /*:string*/  = cfb.FullPaths[0];
            if (name.slice(0, fpath.length) == fpath) fpath = name;
            else {
                if (fpath.slice(-1) != "/") fpath += "/";
                fpath = (fpath + name).replace("//", "/");
            }
            file = {
                name: filename(name),
                type: 2
            } /*:any*/ ;
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            if (!unsafe) CFB.utils.cfb_gc(cfb);
        }
        /*:: if(!file) throw new Error("unreachable"); */ file.content = content /*:any*/ ;
        file.size = content ? content.length : 0;
        if (opts) {
            if (opts.CLSID) file.clsid = opts.CLSID;
            if (opts.mt) file.mt = opts.mt;
            if (opts.ct) file.ct = opts.ct;
        }
        return file;
    }
    function cfb_del(cfb /*:CFBContainer*/ , name /*:string*/ ) /*:boolean*/ {
        init_cfb(cfb);
        var file = CFB.find(cfb, name);
        if (file) {
            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {
                cfb.FileIndex.splice(j, 1);
                cfb.FullPaths.splice(j, 1);
                return true;
            }
        }
        return false;
    }
    function cfb_mov(cfb /*:CFBContainer*/ , old_name /*:string*/ , new_name /*:string*/ ) /*:boolean*/ {
        init_cfb(cfb);
        var file = CFB.find(cfb, old_name);
        if (file) {
            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {
                cfb.FileIndex[j].name = filename(new_name);
                cfb.FullPaths[j] = new_name;
                return true;
            }
        }
        return false;
    }
    function cfb_gc(cfb /*:CFBContainer*/ ) /*:void*/ {
        rebuild_cfb(cfb, true);
    }
    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
        cfb_new: cfb_new,
        cfb_add: cfb_add,
        cfb_del: cfb_del,
        cfb_mov: cfb_mov,
        cfb_gc: cfb_gc,
        ReadShift: ReadShift,
        CheckField: CheckField,
        prep_blob: prep_blob,
        bconcat: bconcat,
        use_zlib: use_zlib,
        _deflateRaw: _deflate,
        _inflateRaw: _inflate,
        consts: consts
    };
    return exports;
}();
let _fs = void 0;
function set_fs(fs) {
    _fs = fs;
}
/* normalize data for blob ctor */ function blobify(data) {
    if (typeof data === "string") return s2ab(data);
    if (Array.isArray(data)) return a2u(data);
    return data;
}
/* write or download file */ function write_dl(fname /*:string*/ , payload /*:any*/ , enc /*:?string*/ ) {
    /*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */ if (typeof _fs !== "undefined" && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
    if (typeof Deno !== "undefined") {
        /* in this spot, it's safe to assume typed arrays and TextEncoder/TextDecoder exist */ if (enc && typeof payload == "string") switch(enc){
            case "utf8":
                payload = new TextEncoder(enc).encode(payload);
                break;
            case "binary":
                payload = s2ab(payload);
                break;
            /* TODO: binary equivalent */ default:
                throw new Error("Unsupported encoding " + enc);
        }
        return Deno.writeFileSync(fname, payload);
    }
    var data = enc == "utf8" ? utf8write(payload) : payload;
    /*:: declare var IE_SaveFile: any; */ if (typeof IE_SaveFile !== "undefined") return IE_SaveFile(data, fname);
    if (typeof Blob !== "undefined") {
        var blob = new Blob([
            blobify(data)
        ], {
            type: "application/octet-stream"
        });
        /*:: declare var navigator: any; */ if (typeof navigator !== "undefined" && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
        /*:: declare var saveAs: any; */ if (typeof saveAs !== "undefined") return saveAs(blob, fname);
        if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
            var url = URL.createObjectURL(blob);
            /*:: declare var chrome: any; */ if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                    URL.revokeObjectURL(url);
                }, 60000);
                return chrome.downloads.download({
                    url: url,
                    filename: fname,
                    saveAs: true
                });
            }
            var a = document.createElement("a");
            if (a.download != null) {
                /*:: if(document.body == null) throw new Error("unreachable"); */ a.download = fname;
                a.href = url;
                document.body.appendChild(a);
                a.click();
                /*:: if(document.body == null) throw new Error("unreachable"); */ document.body.removeChild(a);
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                    URL.revokeObjectURL(url);
                }, 60000);
                return url;
            }
        }
    }
    // $FlowIgnore
    if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
        // $FlowIgnore
        var out = File(fname);
        out.open("w");
        out.encoding = "binary";
        if (Array.isArray(payload)) payload = a2s(payload);
        out.write(payload);
        out.close();
        return payload;
    } catch (e) {
        if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("cannot save file " + fname);
}
/* read binary data from file */ function read_binary(path /*:string*/ ) {
    if (typeof _fs !== "undefined") return _fs.readFileSync(path);
    if (typeof Deno !== "undefined") return Deno.readFileSync(path);
    // $FlowIgnore
    if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
        // $FlowIgnore
        var infile = File(path);
        infile.open("r");
        infile.encoding = "binary";
        var data = infile.read();
        infile.close();
        return data;
    } catch (e) {
        if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("Cannot access file " + path);
}
function keys(o /*:any*/ ) /*:Array<any>*/ {
    var ks = Object.keys(o), o2 = [];
    for(var i = 0; i < ks.length; ++i)if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
    return o2;
}
function evert_key(obj /*:any*/ , key /*:string*/ ) /*:EvertType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];
    return o;
}
function evert(obj /*:any*/ ) /*:EvertType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = K[i];
    return o;
}
function evert_num(obj /*:any*/ ) /*:EvertNumType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = parseInt(K[i], 10);
    return o;
}
function evert_arr(obj /*:any*/ ) /*:EvertArrType*/ {
    var o /*:EvertArrType*/  = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i){
        if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];
        o[obj[K[i]]].push(K[i]);
    }
    return o;
}
var basedate = /*#__PURE__*/ new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
function datenum(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {
    var epoch = /*#__PURE__*/ v.getTime();
    if (date1904) epoch -= 126316800000;
    var dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;
    return (epoch - dnthresh) / 86400000;
}
var refdate = /*#__PURE__*/ new Date();
var dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (refdate.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;
var refoffset = /*#__PURE__*/ refdate.getTimezoneOffset();
function numdate(v /*:number*/ ) /*:Date*/ {
    var out = new Date();
    out.setTime(v * 86400000 + dnthresh);
    if (out.getTimezoneOffset() !== refoffset) out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
    return out;
}
/* ISO 8601 Duration */ function parse_isodur(s) {
    var sec = 0, mt = 0, time = false;
    var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
    for(var i = 1; i != m.length; ++i){
        if (!m[i]) continue;
        mt = 1;
        if (i > 3) time = true;
        switch(m[i].slice(m[i].length - 1)){
            case "Y":
                throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));
            case "D":
                mt *= 24;
            /* falls through */ case "H":
                mt *= 60;
            /* falls through */ case "M":
                if (!time) throw new Error("Unsupported ISO Duration Field: M");
                else mt *= 60;
            /* falls through */ case "S":
                break;
        }
        sec += mt * parseInt(m[i], 10);
    }
    return sec;
}
var good_pd_date_1 = /*#__PURE__*/ new Date("2017-02-19T19:06:09.000Z");
var good_pd_date = /*#__PURE__*/ isNaN(/*#__PURE__*/ good_pd_date_1.getFullYear()) ? /*#__PURE__*/ new Date("2/19/17") : good_pd_date_1;
var good_pd = /*#__PURE__*/ good_pd_date.getFullYear() == 2017;
/* parses a date as a local date */ function parseDate(str /*:string|Date*/ , fixdate /*:?number*/ ) /*:Date*/ {
    var d = new Date(str);
    if (good_pd) {
        /*:: if(fixdate == null) fixdate = 0; */ if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60000);
        else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60000);
        return d;
    }
    if (str instanceof Date) return str;
    if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
        var s = d.getFullYear();
        if (str.indexOf("" + s) > -1) return d;
        d.setFullYear(d.getFullYear() + 100);
        return d;
    }
    var n = str.match(/\d+/g) || [
        "2017",
        "2",
        "19",
        "0",
        "0",
        "0"
    ];
    var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
    if (str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60000);
    return out;
}
function cc2str(arr /*:Array<number>*/ , debomit) /*:string*/ {
    if (has_buf && Buffer.isBuffer(arr)) {
        if (debomit) {
            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString("utf16le"));
            if (arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString("binary")));
        }
        return arr.toString("binary");
    }
    if (typeof TextDecoder !== "undefined") try {
        if (debomit) {
            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
            if (arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
        }
        var rev = {
            "€": "\x80",
            "‚": "\x82",
            "ƒ": "\x83",
            "„": "\x84",
            "…": "\x85",
            "†": "\x86",
            "‡": "\x87",
            "ˆ": "\x88",
            "‰": "\x89",
            "Š": "\x8a",
            "‹": "\x8b",
            "Œ": "\x8c",
            "Ž": "\x8e",
            "‘": "\x91",
            "’": "\x92",
            "“": "\x93",
            "”": "\x94",
            "•": "\x95",
            "–": "\x96",
            "—": "\x97",
            "˜": "\x98",
            "™": "\x99",
            "š": "\x9a",
            "›": "\x9b",
            "œ": "\x9c",
            "ž": "\x9e",
            "Ÿ": "\x9f"
        };
        if (Array.isArray(arr)) arr = new Uint8Array(arr);
        return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) {
            return rev[c] || c;
        });
    } catch (e) {}
    var o = [];
    for(var i = 0; i != arr.length; ++i)o.push(String.fromCharCode(arr[i]));
    return o.join("");
}
function dup(o /*:any*/ ) /*:any*/ {
    if (typeof JSON != "undefined" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
    if (typeof o != "object" || o == null) return o;
    if (o instanceof Date) return new Date(o.getTime());
    var out = {};
    for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
    return out;
}
function fill(c /*:string*/ , l /*:number*/ ) /*:string*/ {
    var o = "";
    while(o.length < l)o += c;
    return o;
}
/* TODO: stress test */ function fuzzynum(s /*:string*/ ) /*:number*/ {
    var v /*:number*/  = Number(s);
    if (!isNaN(v)) return isFinite(v) ? v : NaN;
    if (!/\d/.test(s)) return v;
    var wt = 1;
    var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
        wt *= 100;
        return "";
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
        wt = -wt;
        return $1;
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    return v;
}
var lower_months = [
    "january",
    "february",
    "march",
    "april",
    "may",
    "june",
    "july",
    "august",
    "september",
    "october",
    "november",
    "december"
];
function fuzzydate(s /*:string*/ ) /*:Date*/ {
    var o = new Date(s), n = new Date(NaN);
    var y = o.getYear(), m = o.getMonth(), d = o.getDate();
    if (isNaN(d)) return n;
    var lower = s.toLowerCase();
    if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
        lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
        if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
    } else if (lower.match(/[a-z]/)) return n;
    if (y < 0 || y > 8099) return n;
    if ((m > 0 || d > 1) && y != 101) return o;
    if (s.match(/[^-0-9:,\/\\]/)) return n;
    return o;
}
var split_regex = /*#__PURE__*/ function() {
    var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    return function split_regex(str /*:string*/ , re, def /*:string*/ ) /*:Array<string>*/ {
        if (safe_split_regex || typeof re == "string") return str.split(re);
        var p = str.split(re), o = [
            p[0]
        ];
        for(var i = 1; i < p.length; ++i){
            o.push(def);
            o.push(p[i]);
        }
        return o;
    };
}();
function getdatastr(data) /*:?string*/ {
    if (!data) return null;
    if (data.content && data.type) return cc2str(data.content, true);
    if (data.data) return debom(data.data);
    if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary"));
    if (data.asBinary) return debom(data.asBinary());
    if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
    return null;
}
function getdatabin(data) {
    if (!data) return null;
    if (data.data) return char_codes(data.data);
    if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();
    if (data._data && data._data.getContent) {
        var o = data._data.getContent();
        if (typeof o == "string") return char_codes(o);
        return Array.prototype.slice.call(o);
    }
    if (data.content && data.type) return data.content;
    return null;
}
function getdata(data) {
    return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
}
/* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */ /* OASIS does not comment on filename case sensitivity */ function safegetzipfile(zip, file /*:string*/ ) {
    var k = zip.FullPaths || keys(zip.files);
    var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
    for(var i = 0; i < k.length; ++i){
        var n = k[i].replace(/^Root Entry[\/]/, "").toLowerCase();
        if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
    }
    return null;
}
function getzipfile(zip, file /*:string*/ ) {
    var o = safegetzipfile(zip, file);
    if (o == null) throw new Error("Cannot find file " + file + " in zip");
    return o;
}
function getzipdata(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {
    if (!safe) return getdata(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipdata(zip, file);
    } catch (e) {
        return null;
    }
}
function getzipstr(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:?string*/ {
    if (!safe) return getdatastr(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipstr(zip, file);
    } catch (e) {
        return null;
    }
}
function getzipbin(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {
    if (!safe) return getdatabin(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipbin(zip, file);
    } catch (e) {
        return null;
    }
}
function zipentries(zip) {
    var k = zip.FullPaths || keys(zip.files), o = [];
    for(var i = 0; i < k.length; ++i)if (k[i].slice(-1) != "/") o.push(k[i].replace(/^Root Entry[\/]/, ""));
    return o.sort();
}
function zip_add_file(zip, path, content) {
    if (zip.FullPaths) {
        if (typeof content == "string") {
            var res;
            if (has_buf) res = Buffer_from(content);
            else res = utf8decode(content);
            return CFB.utils.cfb_add(zip, path, res);
        }
        CFB.utils.cfb_add(zip, path, content);
    } else zip.file(path, content);
}
function zip_new() {
    return CFB.utils.cfb_new();
}
function zip_read(d, o) {
    switch(o.type){
        case "base64":
            return CFB.read(d, {
                type: "base64"
            });
        case "binary":
            return CFB.read(d, {
                type: "binary"
            });
        case "buffer":
        case "array":
            return CFB.read(d, {
                type: "buffer"
            });
    }
    throw new Error("Unrecognized type " + o.type);
}
function resolve_path(path /*:string*/ , base /*:string*/ ) /*:string*/ {
    if (path.charAt(0) == "/") return path.slice(1);
    var result = base.split("/");
    if (base.slice(-1) != "/") result.pop(); // folder path
    var target = path.split("/");
    while(target.length !== 0){
        var step = target.shift();
        if (step === "..") result.pop();
        else if (step !== ".") result.push(step);
    }
    return result.join("/");
}
var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
var tagregex = /*#__PURE__*/ XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
function parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ , skip_LC /*:?boolean*/ ) /*:any*/ {
    var z = {} /*:any*/ ;
    var eq = 0, c = 0;
    for(; eq !== tag.length; ++eq)if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
    if (!skip_root) z[0] = tag.slice(0, eq);
    if (eq === tag.length) return z;
    var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1;
    if (m) for(i = 0; i != m.length; ++i){
        cc = m[i];
        for(c = 0; c != cc.length; ++c)if (cc.charCodeAt(c) === 61) break;
        q = cc.slice(0, c).trim();
        while(cc.charCodeAt(c + 1) == 32)++c;
        quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
        v = cc.slice(c + 1 + quot, cc.length - quot);
        for(j = 0; j != q.length; ++j)if (q.charCodeAt(j) === 58) break;
        if (j === q.length) {
            if (q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods
            z[q] = v;
            if (!skip_LC) z[q.toLowerCase()] = v;
        } else {
            var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
            if (z[k] && q.slice(j - 3, j) == "ext") continue; // from ods
            z[k] = v;
            if (!skip_LC) z[k.toLowerCase()] = v;
        }
    }
    return z;
}
function strip_ns(x /*:string*/ ) /*:string*/ {
    return x.replace(nsregex2, "<$1");
}
var encodings = {
    "&quot;": '"',
    "&apos;": "'",
    "&gt;": ">",
    "&lt;": "<",
    "&amp;": "&"
};
var rencoding = /*#__PURE__*/ evert(encodings);
//var rencstr = "&<>'\"".split("");
// TODO: CP remap (need to read file version to determine OS)
var unescapexml /*:StringConv*/  = /*#__PURE__*/ function() {
    /* 22.4.2.4 bstr (Basic String) */ var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
    return function unescapexml(text /*:string*/ ) /*:string*/ {
        var s = text + "", i = s.indexOf("<![CDATA[");
        if (i == -1) return s.replace(encregex, function($$, $1) {
            return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
        }).replace(coderegex, function(m, c) {
            return String.fromCharCode(parseInt(c, 16));
        });
        var j = s.indexOf("]]>");
        return unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));
    };
}();
var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
function escapexml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(charegex, function(s) {
        return "_x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + "_";
    });
}
function escapexmltag(text /*:string*/ ) /*:string*/ {
    return escapexml(text).replace(/ /g, "_x0020_");
}
var htmlcharegex = /[\u0000-\u001f]/g;
function escapehtml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s) {
        return "&#x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + ";";
    });
}
function escapexlml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(htmlcharegex, function(s) {
        return "&#x" + s.charCodeAt(0).toString(16).toUpperCase() + ";";
    });
}
/* TODO: handle codepages */ var xlml_fixstr /*:StringConv*/  = /*#__PURE__*/ function() {
    var entregex = /&#(\d+);/g;
    function entrepl($$ /*:string*/ , $1 /*:string*/ ) /*:string*/ {
        return String.fromCharCode(parseInt($1, 10));
    }
    return function xlml_fixstr(str /*:string*/ ) /*:string*/ {
        return str.replace(entregex, entrepl);
    };
}();
function xlml_unfixstr(str /*:string*/ ) /*:string*/ {
    return str.replace(/(\r\n|[\r\n])/g, "&#10;");
}
function parsexmlbool(value /*:any*/ ) /*:boolean*/ {
    switch(value){
        case 1:
        case true:
        case "1":
        case "true":
        case "TRUE":
            return true;
        /* case '0': case 'false': case 'FALSE':*/ default:
            return false;
    }
}
function utf8reada(orig /*:string*/ ) /*:string*/ {
    var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
    while(i < orig.length){
        c = orig.charCodeAt(i++);
        if (c < 128) {
            out += String.fromCharCode(c);
            continue;
        }
        d = orig.charCodeAt(i++);
        if (c > 191 && c < 224) {
            f = (c & 31) << 6;
            f |= d & 63;
            out += String.fromCharCode(f);
            continue;
        }
        e = orig.charCodeAt(i++);
        if (c < 240) {
            out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
            continue;
        }
        f = orig.charCodeAt(i++);
        w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
        out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));
        out += String.fromCharCode(0xDC00 + (w & 1023));
    }
    return out;
}
function utf8readb(data) {
    var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;
    for(i = 0; i < data.length; i += j){
        j = 1;
        if ((c = data.charCodeAt(i)) < 128) w = c;
        else if (c < 224) {
            w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
            j = 2;
        } else if (c < 240) {
            w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
            j = 3;
        } else {
            j = 4;
            w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
            w -= 65536;
            ww = 0xD800 + (w >>> 10 & 1023);
            w = 0xDC00 + (w & 1023);
        }
        if (ww !== 0) {
            out[k++] = ww & 255;
            out[k++] = ww >>> 8;
            ww = 0;
        }
        out[k++] = w % 256;
        out[k++] = w >>> 8;
    }
    return out.slice(0, k).toString("ucs2");
}
function utf8readc(data) {
    return Buffer_from(data, "binary").toString("utf8");
}
var utf8corpus = "foo bar baz\xe2\x98\x83\xf0\x9f\x8d\xa3";
var utf8read = has_buf && /*#__PURE__*/ (utf8readc(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/ utf8readb(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readb) || utf8reada;
var utf8write /*:StringConv*/  = has_buf ? function(data) {
    return Buffer_from(data, "utf8").toString("binary");
} : function(orig /*:string*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [], i = 0, c = 0, d = 0;
    while(i < orig.length){
        c = orig.charCodeAt(i++);
        switch(true){
            case c < 128:
                out.push(String.fromCharCode(c));
                break;
            case c < 2048:
                out.push(String.fromCharCode(192 + (c >> 6)));
                out.push(String.fromCharCode(128 + (c & 63)));
                break;
            case c >= 55296 && c < 57344:
                c -= 55296;
                d = orig.charCodeAt(i++) - 56320 + (c << 10);
                out.push(String.fromCharCode(240 + (d >> 18 & 7)));
                out.push(String.fromCharCode(144 + (d >> 12 & 63)));
                out.push(String.fromCharCode(128 + (d >> 6 & 63)));
                out.push(String.fromCharCode(128 + (d & 63)));
                break;
            default:
                out.push(String.fromCharCode(224 + (c >> 12)));
                out.push(String.fromCharCode(128 + (c >> 6 & 63)));
                out.push(String.fromCharCode(128 + (c & 63)));
        }
    }
    return out.join("");
};
// matches <foo>...</foo> extracts content
var matchtag = /*#__PURE__*/ function() {
    var mtcache /*:{[k:string]:RegExp}*/  = {} /*:any*/ ;
    return function matchtag(f /*:string*/ , g /*:?string*/ ) /*:RegExp*/ {
        var t = f + "|" + (g || "");
        if (mtcache[t]) return mtcache[t];
        return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "");
    };
}();
var htmldecode /*:{(s:string):string}*/  = /*#__PURE__*/ function() {
    var entities /*:Array<[RegExp, string]>*/  = [
        [
            "nbsp",
            " "
        ],
        [
            "middot",
            "\xb7"
        ],
        [
            "quot",
            '"'
        ],
        [
            "apos",
            "'"
        ],
        [
            "gt",
            ">"
        ],
        [
            "lt",
            "<"
        ],
        [
            "amp",
            "&"
        ]
    ].map(function(x /*:[string, string]*/ ) {
        return [
            new RegExp("&" + x[0] + ";", "ig"),
            x[1]
        ];
    });
    return function htmldecode(str /*:string*/ ) /*:string*/ {
        var o = str// Remove new lines and spaces from start of content
        .replace(/^[\t\n\r ]+/, "")// Remove new lines and spaces from end of content
        .replace(/[\t\n\r ]+$/, "")// Added line which removes any white space characters after and before html tags
        .replace(/>\s+/g, ">").replace(/\s+</g, "<")// Replace remaining new lines and spaces with space
        .replace(/[\t\n\r ]+/g, " ")// Replace <br> tags with new lines
        .replace(/<\s*[bB][rR]\s*\/?>/g, "\n")// Strip HTML elements
        .replace(/<[^>]*>/g, "");
        for(var i = 0; i < entities.length; ++i)o = o.replace(entities[i][0], entities[i][1]);
        return o;
    };
}();
var vtregex = /*#__PURE__*/ function() {
    var vt_cache = {};
    return function vt_regex(bt) {
        if (vt_cache[bt] !== undefined) return vt_cache[bt];
        return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
    };
}();
var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
function parseVector(data /*:string*/ , opts) /*:Array<{v:string,t:string}>*/ {
    var h = parsexmltag(data);
    var matches /*:Array<string>*/  = data.match(vtregex(h.baseType)) || [];
    var res /*:Array<any>*/  = [];
    if (matches.length != h.size) {
        if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
        return res;
    }
    matches.forEach(function(x /*:string*/ ) {
        var v = x.replace(vtvregex, "").match(vtmregex);
        if (v) res.push({
            v: utf8read(v[2]),
            t: v[1]
        });
    });
    return res;
}
var wtregex = /(^\s|\s$|\n)/;
function writetag(f /*:string*/ , g /*:string*/ ) /*:string*/ {
    return "<" + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f + ">";
}
function wxt_helper(h) /*:string*/ {
    return keys(h).map(function(k) {
        return " " + k + '="' + h[k] + '"';
    }).join("");
}
function writextag(f /*:string*/ , g /*:?string*/ , h) {
    return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">";
}
function write_w3cdtf(d /*:Date*/ , t /*:?boolean*/ ) /*:string*/ {
    try {
        return d.toISOString().replace(/\.\d*/, "");
    } catch (e) {
        if (t) throw e;
    }
    return "";
}
function write_vt(s, xlsx /*:?boolean*/ ) /*:string*/ {
    switch(typeof s){
        case "string":
            var o = writextag("vt:lpwstr", escapexml(s));
            if (xlsx) o = o.replace(/&quot;/g, "_x0022_");
            return o;
        case "number":
            return writextag((s | 0) == s ? "vt:i4" : "vt:r8", escapexml(String(s)));
        case "boolean":
            return writextag("vt:bool", s ? "true" : "false");
    }
    if (s instanceof Date) return writextag("vt:filetime", write_w3cdtf(s));
    throw new Error("Unable to serialize " + s);
}
function xlml_normalize(d) /*:string*/ {
    if (has_buf && /*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString("utf8");
    if (typeof d === "string") return d;
    /* duktape */ if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
    throw new Error("Bad input format: expected Buffer or string");
}
/* UOS uses CJK in tags */ var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
//var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;
var XMLNS = {
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
    CT: "http://schemas.openxmlformats.org/package/2006/content-types",
    RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
    TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
    "dc": "http://purl.org/dc/elements/1.1/",
    "dcterms": "http://purl.org/dc/terms/",
    "dcmitype": "http://purl.org/dc/dcmitype/",
    "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
    "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
    "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
    "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
    "xsi": "http://www.w3.org/2001/XMLSchema-instance",
    "xsd": "http://www.w3.org/2001/XMLSchema"
} /*:any*/ ;
var XMLNS_main = [
    "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
    "http://purl.oclc.org/ooxml/spreadsheetml/main",
    "http://schemas.microsoft.com/office/excel/2006/main",
    "http://schemas.microsoft.com/office/excel/2006/2"
];
var XLMLNS = {
    "o": "urn:schemas-microsoft-com:office:office",
    "x": "urn:schemas-microsoft-com:office:excel",
    "ss": "urn:schemas-microsoft-com:office:spreadsheet",
    "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
    "mv": "http://macVmlSchemaUri",
    "v": "urn:schemas-microsoft-com:vml",
    "html": "http://www.w3.org/TR/REC-html40"
} /*:any*/ ;
function read_double_le(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    var s = 1 - 2 * (b[idx + 7] >>> 7);
    var e = ((b[idx + 7] & 0x7f) << 4) + (b[idx + 6] >>> 4 & 0x0f);
    var m = b[idx + 6] & 0x0f;
    for(var i = 5; i >= 0; --i)m = m * 256 + b[idx + i];
    if (e == 0x7ff) return m == 0 ? s * Infinity : NaN;
    if (e == 0) e = -1022;
    else {
        e -= 1023;
        m += Math.pow(2, 52);
    }
    return s * Math.pow(2, e - 52) * m;
}
function write_double_le(b /*:RawBytes|CFBlob*/ , v /*:number*/ , idx /*:number*/ ) {
    var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
    var av = bs ? -v : v;
    if (!isFinite(av)) {
        e = 0x7ff;
        m = isNaN(v) ? 0x6969 : 0;
    } else if (av == 0) e = m = 0;
    else {
        e = Math.floor(Math.log(av) / Math.LN2);
        m = av * Math.pow(2, 52 - e);
        if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) e = -1022;
        else {
            m -= Math.pow(2, 52);
            e += 1023;
        }
    }
    for(var i = 0; i <= 5; ++i, m /= 256)b[idx + i] = m & 0xff;
    b[idx + 6] = (e & 0x0f) << 4 | m & 0xf;
    b[idx + 7] = e >> 4 | bs;
}
var ___toBuffer = function(bufs /*:Array<Array<RawBytes> >*/ ) /*:RawBytes*/ {
    var x = [], w = 10240;
    for(var i = 0; i < bufs[0].length; ++i)if (bufs[0][i]) for(var j = 0, L = bufs[0][i].length; j < L; j += w)x.push.apply(x, bufs[0][i].slice(j, j + w));
    return x;
};
var __toBuffer = has_buf ? function(bufs) {
    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {
        return Buffer.isBuffer(x) ? x : Buffer_from(x);
    })) : ___toBuffer(bufs);
} : ___toBuffer;
var ___utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {
    var ss /*:Array<string>*/  = [];
    for(var i = s; i < e; i += 2)ss.push(String.fromCharCode(__readUInt16LE(b, i)));
    return ss.join("").replace(chr0, "");
};
var __utf16le = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {
    if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);
    return b.toString("utf16le", s, e).replace(chr0, "") /*.replace(chr1,'!')*/ ;
} : ___utf16le;
var ___hexlify = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {
    var ss /*:Array<string>*/  = [];
    for(var i = s; i < s + l; ++i)ss.push(("0" + b[i].toString(16)).slice(-2));
    return ss.join("");
};
var __hexlify = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {
    return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
} : ___hexlify;
var ___utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
    var ss = [];
    for(var i = s; i < e; i++)ss.push(String.fromCharCode(__readUInt8(b, i)));
    return ss.join("");
};
var __utf8 = has_buf ? function utf8_b(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
    return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
} : ___utf8;
var ___lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __lpstr = ___lpstr;
var ___cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __cpstr = ___cpstr;
var ___lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = 2 * __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __lpwstr = ___lpwstr;
var ___lpp4 = function lpp4_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
};
var __lpp4 = ___lpp4;
var ___8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
};
var __8lpp4 = ___8lpp4;
var ___double = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) {
    return read_double_le(b, idx);
};
var __double = ___double;
var is_buf = function is_buf_a(a) {
    return Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
};
if (has_buf /*:: && typeof Buffer !== 'undefined'*/ ) {
    __lpstr = function lpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpstr(b, i);
        var len = b.readUInt32LE(i);
        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
    };
    __cpstr = function cpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___cpstr(b, i);
        var len = b.readUInt32LE(i);
        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
    };
    __lpwstr = function lpwstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);
        var len = 2 * b.readUInt32LE(i);
        return b.toString("utf16le", i + 4, i + 4 + len - 1);
    };
    __lpp4 = function lpp4_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpp4(b, i);
        var len = b.readUInt32LE(i);
        return b.toString("utf16le", i + 4, i + 4 + len);
    };
    __8lpp4 = function lpp4_8b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);
        var len = b.readUInt32LE(i);
        return b.toString("utf8", i + 4, i + 4 + len);
    };
    __double = function double_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (Buffer.isBuffer(b)) return b.readDoubleLE(i);
        return ___double(b, i);
    };
    is_buf = function is_buf_b(a) {
        return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
    };
}
/* from js-xls */ function cpdoit() {
    __utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
        return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
    };
    __utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
        return $cptable.utils.decode(65001, b.slice(s, e));
    };
    __lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = 2 * __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
    };
    __8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
    };
}
if (typeof $cptable !== "undefined") cpdoit();
var __readUInt8 = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx];
};
var __readUInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 1] * 256 + b[idx];
};
var __readInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    var u = b[idx + 1] * 256 + b[idx];
    return u < 0x8000 ? u : (0xffff - u + 1) * -1;
};
var __readUInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 3] * 16777216 + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
};
var __readInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
};
var __readInt32BE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
};
function ReadShift(size /*:number*/ , t /*:?string*/ ) /*:number|string*/ {
    var o = "", oI /*:: :number = 0*/ , oR, oo = [], w, vv, i, loc;
    switch(t){
        case "dbcs":
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            else for(i = 0; i < size; ++i){
                o += String.fromCharCode(__readUInt16LE(this, loc));
                loc += 2;
            }
            size *= 2;
            break;
        case "utf8":
            o = __utf8(this, this.l, this.l + size);
            break;
        case "utf16le":
            size *= 2;
            o = __utf16le(this, this.l, this.l + size);
            break;
        case "wstr":
            if (typeof $cptable !== "undefined") o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
            else return ReadShift.call(this, size, "dbcs");
            size = 2 * size;
            break;
        /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */ case "lpstr-ansi":
            o = __lpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
        case "lpstr-cp":
            o = __cpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
        /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */ case "lpwstr":
            o = __lpwstr(this, this.l);
            size = 4 + 2 * __readUInt32LE(this, this.l);
            break;
        /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */ case "lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __lpp4(this, this.l);
            if (size & 0x02) size += 2;
            break;
        /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */ case "8lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __8lpp4(this, this.l);
            if (size & 0x03) size += 4 - (size & 0x03);
            break;
        case "cstr":
            size = 0;
            o = "";
            while((w = __readUInt8(this, this.l + size++)) !== 0)oo.push(_getchar(w));
            o = oo.join("");
            break;
        case "_wstr":
            size = 0;
            o = "";
            while((w = __readUInt16LE(this, this.l + size)) !== 0){
                oo.push(_getchar(w));
                size += 2;
            }
            size += 2;
            o = oo.join("");
            break;
        /* sbcs and dbcs support continue records in the SST way TODO codepages */ case "dbcs-cont":
            o = "";
            loc = this.l;
            for(i = 0; i < size; ++i){
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                    w = __readUInt8(this, loc);
                    this.l = loc + 1;
                    vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                    return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt16LE(this, loc)));
                loc += 2;
            }
            o = oo.join("");
            size *= 2;
            break;
        case "cpstr":
            if (typeof $cptable !== "undefined") {
                o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
                break;
            }
        /* falls through */ case "sbcs-cont":
            o = "";
            loc = this.l;
            for(i = 0; i != size; ++i){
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                    w = __readUInt8(this, loc);
                    this.l = loc + 1;
                    vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                    return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt8(this, loc)));
                loc += 1;
            }
            o = oo.join("");
            break;
        default:
            switch(size){
                case 1:
                    oI = __readUInt8(this, this.l);
                    this.l++;
                    return oI;
                case 2:
                    oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                    this.l += 2;
                    return oI;
                case 4:
                case -4:
                    if (t === "i" || (this[this.l + 3] & 0x80) === 0) {
                        oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                        this.l += 4;
                        return oI;
                    } else {
                        oR = __readUInt32LE(this, this.l);
                        this.l += 4;
                    }
                    return oR;
                case 8:
                case -8:
                    if (t === "f") {
                        if (size == 8) oR = __double(this, this.l);
                        else oR = __double([
                            this[this.l + 7],
                            this[this.l + 6],
                            this[this.l + 5],
                            this[this.l + 4],
                            this[this.l + 3],
                            this[this.l + 2],
                            this[this.l + 1],
                            this[this.l + 0]
                        ], 0);
                        this.l += 8;
                        return oR;
                    } else size = 8;
                /* falls through */ case 16:
                    o = __hexlify(this, this.l, size);
                    break;
            }
    }
    this.l += size;
    return o;
}
var __writeUInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
    b[idx + 2] = val >>> 16 & 0xFF;
    b[idx + 3] = val >>> 24 & 0xFF;
};
var __writeInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >> 8 & 0xFF;
    b[idx + 2] = val >> 16 & 0xFF;
    b[idx + 3] = val >> 24 & 0xFF;
};
var __writeUInt16LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
};
function WriteShift(t /*:number*/ , val /*:string|number*/ , f /*:?string*/ ) /*:any*/ {
    var size = 0, i = 0;
    if (f === "dbcs") {
        /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i)__writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
        size = 2 * val.length;
    } else if (f === "sbcs") {
        if (typeof $cptable !== "undefined" && current_ansi == 874) /* TODO: use tables directly, don't encode */ /*:: if(typeof val !== "string") throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i){
            var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));
            this[this.l + i] = cppayload[0];
        }
        else {
            /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ val = val.replace(/[^\x00-\x7F]/g, "_");
            /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i)this[this.l + i] = val.charCodeAt(i) & 0xFF;
        }
        size = val.length;
    } else if (f === "hex") {
        for(; i < t; ++i)/*:: if(typeof val !== "string") throw new Error("unreachable"); */ this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
        return this;
    } else if (f === "utf16le") {
        /*:: if(typeof val !== "string") throw new Error("unreachable"); */ var end /*:number*/  = Math.min(this.l + t, this.length);
        for(i = 0; i < Math.min(val.length, t); ++i){
            var cc = val.charCodeAt(i);
            this[this.l++] = cc & 0xff;
            this[this.l++] = cc >> 8;
        }
        while(this.l < end)this[this.l++] = 0;
        return this;
    } else /*:: if(typeof val === 'number') */ switch(t){
        case 1:
            size = 1;
            this[this.l] = val & 0xFF;
            break;
        case 2:
            size = 2;
            this[this.l] = val & 0xFF;
            val >>>= 8;
            this[this.l + 1] = val & 0xFF;
            break;
        case 3:
            size = 3;
            this[this.l] = val & 0xFF;
            val >>>= 8;
            this[this.l + 1] = val & 0xFF;
            val >>>= 8;
            this[this.l + 2] = val & 0xFF;
            break;
        case 4:
            size = 4;
            __writeUInt32LE(this, val, this.l);
            break;
        case 8:
            size = 8;
            if (f === "f") {
                write_double_le(this, val, this.l);
                break;
            }
        /* falls through */ case 16:
            break;
        case -4:
            size = 4;
            __writeInt32LE(this, val, this.l);
            break;
    }
    this.l += size;
    return this;
}
function CheckField(hexstr /*:string*/ , fld /*:string*/ ) /*:void*/ {
    var m = __hexlify(this, this.l, hexstr.length >> 1);
    if (m !== hexstr) throw new Error(fld + "Expected " + hexstr + " saw " + m);
    this.l += hexstr.length >> 1;
}
function prep_blob(blob, pos /*:number*/ ) /*:void*/ {
    blob.l = pos;
    blob.read_shift = /*::(*/ ReadShift /*:: :any)*/ ;
    blob.chk = CheckField;
    blob.write_shift = WriteShift;
}
function parsenoop(blob, length /*:: :number, opts?:any */ ) {
    blob.l += length;
}
function new_buf(sz /*:number*/ ) /*:Block*/ {
    var o = new_raw_buf(sz);
    prep_blob(o, 0);
    return o;
}
/* [MS-XLSB] 2.1.4 Record */ function recordhopper(data, cb /*:RecordHopperCB*/ , opts /*:?any*/ ) {
    if (!data) return;
    var tmpbyte, cntbyte, length;
    prep_blob(data, data.l || 0);
    var L = data.length, RT = 0, tgt = 0;
    while(data.l < L){
        RT = data.read_shift(1);
        if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);
        var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
        tmpbyte = data.read_shift(1);
        length = tmpbyte & 0x7F;
        for(cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte)length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;
        tgt = data.l + length;
        var d = R.f && R.f(data, length, opts);
        data.l = tgt;
        if (cb(d, R, RT)) return;
    }
}
/* control buffer usage for fixed-length buffers */ function buf_array() /*:BufArray*/ {
    var bufs /*:Array<Block>*/  = [], blksz = has_buf ? 256 : 2048;
    var newblk = function ba_newblk(sz /*:number*/ ) /*:Block*/ {
        var o /*:Block*/  = new_buf(sz);
        prep_blob(o, 0);
        return o;
    };
    var curbuf /*:Block*/  = newblk(blksz);
    var endbuf = function ba_endbuf() {
        if (!curbuf) return;
        if (curbuf.length > curbuf.l) {
            curbuf = curbuf.slice(0, curbuf.l);
            curbuf.l = curbuf.length;
        }
        if (curbuf.length > 0) bufs.push(curbuf);
        curbuf = null;
    };
    var next = function ba_next(sz /*:number*/ ) /*:Block*/ {
        if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
        endbuf();
        return curbuf = newblk(Math.max(sz + 1, blksz));
    };
    var end = function ba_end() {
        endbuf();
        return bconcat(bufs);
    };
    var push = function ba_push(buf) {
        endbuf();
        curbuf = buf;
        if (curbuf.l == null) curbuf.l = curbuf.length;
        next(blksz);
    };
    return {
        next: next,
        push: push,
        end: end,
        _bufs: bufs
    } /*:any*/ ;
}
function write_record(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) {
    var t /*:number*/  = +type, l;
    if (isNaN(t)) return; // TODO: throw something here?
    if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;
    l = 1 + (t >= 0x80 ? 1 : 0) + 1 /* + length*/ ;
    if (length >= 0x80) ++l;
    if (length >= 0x4000) ++l;
    if (length >= 0x200000) ++l;
    var o = ba.next(l);
    if (t <= 0x7F) o.write_shift(1, t);
    else {
        o.write_shift(1, (t & 0x7F) + 0x80);
        o.write_shift(1, t >> 7);
    }
    for(var i = 0; i != 4; ++i)if (length >= 0x80) {
        o.write_shift(1, (length & 0x7F) + 0x80);
        length >>= 7;
    } else {
        o.write_shift(1, length);
        break;
    }
    if (/*:: length != null &&*/ length > 0 && is_buf(payload)) ba.push(payload);
}
/* XLS ranges enforced */ function shift_cell_xls(cell /*:CellAddress*/ , tgt /*:any*/ , opts /*:?any*/ ) /*:CellAddress*/ {
    var out = dup(cell);
    if (tgt.s) {
        if (out.cRel) out.c += tgt.s.c;
        if (out.rRel) out.r += tgt.s.r;
    } else {
        if (out.cRel) out.c += tgt.c;
        if (out.rRel) out.r += tgt.r;
    }
    if (!opts || opts.biff < 12) {
        while(out.c >= 0x100)out.c -= 0x100;
        while(out.r >= 0x10000)out.r -= 0x10000;
    }
    return out;
}
function shift_range_xls(cell, range, opts) {
    var out = dup(cell);
    out.s = shift_cell_xls(out.s, range.s, opts);
    out.e = shift_cell_xls(out.e, range.s, opts);
    return out;
}
function encode_cell_xls(c /*:CellAddress*/ , biff /*:number*/ ) /*:string*/ {
    if (c.cRel && c.c < 0) {
        c = dup(c);
        while(c.c < 0)c.c += biff > 8 ? 0x4000 : 0x100;
    }
    if (c.rRel && c.r < 0) {
        c = dup(c);
        while(c.r < 0)c.r += biff > 8 ? 0x100000 : biff > 5 ? 0x10000 : 0x4000;
    }
    var s = encode_cell(c);
    if (!c.cRel && c.cRel != null) s = fix_col(s);
    if (!c.rRel && c.rRel != null) s = fix_row(s);
    return s;
}
function encode_range_xls(r, opts) /*:string*/ {
    if (r.s.r == 0 && !r.s.rRel) {
        if (r.e.r == (opts.biff >= 12 ? 0xFFFFF : opts.biff >= 8 ? 0x10000 : 0x4000) && !r.e.rRel) return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
    }
    if (r.s.c == 0 && !r.s.cRel) {
        if (r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
    }
    return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
}
function decode_row(rowstr /*:string*/ ) /*:number*/ {
    return parseInt(unfix_row(rowstr), 10) - 1;
}
function encode_row(row /*:number*/ ) /*:string*/ {
    return "" + (row + 1);
}
function fix_row(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
}
function unfix_row(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/\$(\d+)$/, "$1");
}
function decode_col(colstr /*:string*/ ) /*:number*/ {
    var c = unfix_col(colstr), d = 0, i = 0;
    for(; i !== c.length; ++i)d = 26 * d + c.charCodeAt(i) - 64;
    return d - 1;
}
function encode_col(col /*:number*/ ) /*:string*/ {
    if (col < 0) throw new Error("invalid column " + col);
    var s = "";
    for(++col; col; col = Math.floor((col - 1) / 26))s = String.fromCharCode((col - 1) % 26 + 65) + s;
    return s;
}
function fix_col(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/^([A-Z])/, "$$$1");
}
function unfix_col(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/^\$([A-Z])/, "$1");
}
function split_cell(cstr /*:string*/ ) /*:Array<string>*/ {
    return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
}
//function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
function decode_cell(cstr /*:string*/ ) /*:CellAddress*/ {
    var R = 0, C = 0;
    for(var i = 0; i < cstr.length; ++i){
        var cc = cstr.charCodeAt(i);
        if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
        else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
    }
    return {
        c: C - 1,
        r: R - 1
    };
}
//function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }
function encode_cell(cell /*:CellAddress*/ ) /*:string*/ {
    var col = cell.c + 1;
    var s = "";
    for(; col; col = (col - 1) / 26 | 0)s = String.fromCharCode((col - 1) % 26 + 65) + s;
    return s + (cell.r + 1);
}
function decode_range(range /*:string*/ ) /*:Range*/ {
    var idx = range.indexOf(":");
    if (idx == -1) return {
        s: decode_cell(range),
        e: decode_cell(range)
    };
    return {
        s: decode_cell(range.slice(0, idx)),
        e: decode_cell(range.slice(idx + 1))
    };
}
/*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */ function encode_range(cs /*:CellAddrSpec|Range*/ , ce /*:?CellAddrSpec*/ ) /*:string*/ {
    if (typeof ce === "undefined" || typeof ce === "number") /*:: if(!(cs instanceof Range)) throw "unreachable"; */ return encode_range(cs.s, cs.e);
    /*:: if((cs instanceof Range)) throw "unreachable"; */ if (typeof cs !== "string") cs = encode_cell(cs /*:any*/ );
    if (typeof ce !== "string") ce = encode_cell(ce /*:any*/ );
    /*:: if(typeof cs !== 'string') throw "unreachable"; */ /*:: if(typeof ce !== 'string') throw "unreachable"; */ return cs == ce ? cs : cs + ":" + ce;
}
function safe_decode_range(range /*:string*/ ) /*:Range*/ {
    var o = {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: 0,
            r: 0
        }
    };
    var idx = 0, i = 0, cc = 0;
    var len = range.length;
    for(idx = 0; i < len; ++i){
        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
        idx = 26 * idx + cc;
    }
    o.s.c = --idx;
    for(idx = 0; i < len; ++i){
        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
        idx = 10 * idx + cc;
    }
    o.s.r = --idx;
    if (i === len || cc != 10) {
        o.e.c = o.s.c;
        o.e.r = o.s.r;
        return o;
    }
    ++i;
    for(idx = 0; i != len; ++i){
        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
        idx = 26 * idx + cc;
    }
    o.e.c = --idx;
    for(idx = 0; i != len; ++i){
        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
        idx = 10 * idx + cc;
    }
    o.e.r = --idx;
    return o;
}
function safe_format_cell(cell /*:Cell*/ , v /*:any*/ ) {
    var q = cell.t == "d" && v instanceof Date;
    if (cell.z != null) try {
        return cell.w = SSF_format(cell.z, q ? datenum(v) : v);
    } catch (e) {}
    try {
        return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
    } catch (e) {
        return "" + v;
    }
}
function format_cell(cell /*:Cell*/ , v /*:any*/ , o /*:any*/ ) {
    if (cell == null || cell.t == null || cell.t == "z") return "";
    if (cell.w !== undefined) return cell.w;
    if (cell.t == "d" && !cell.z && o && o.dateNF) cell.z = o.dateNF;
    if (cell.t == "e") return BErr[cell.v] || cell.v;
    if (v == undefined) return safe_format_cell(cell, cell.v);
    return safe_format_cell(cell, v);
}
function sheet_to_workbook(sheet /*:Worksheet*/ , opts) /*:Workbook*/ {
    var n = opts && opts.sheet ? opts.sheet : "Sheet1";
    var sheets = {};
    sheets[n] = sheet;
    return {
        SheetNames: [
            n
        ],
        Sheets: sheets
    };
}
function sheet_add_aoa(_ws /*:?Worksheet*/ , data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {
    var o = opts || {};
    var dense = _ws ? Array.isArray(_ws) : o.dense;
    if (DENSE != null && dense == null) dense = DENSE;
    var ws /*:Worksheet*/  = _ws || (dense ? [] : {} /*:any*/ );
    var _R = 0, _C = 0;
    if (ws && o.origin != null) {
        if (typeof o.origin == "number") _R = o.origin;
        else {
            var _origin /*:CellAddress*/  = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
        }
        if (!ws["!ref"]) ws["!ref"] = "A1:A1";
    }
    var range /*:Range*/  = {
        s: {
            c: 10000000,
            r: 10000000
        },
        e: {
            c: 0,
            r: 0
        }
    } /*:any*/ ;
    if (ws["!ref"]) {
        var _range = safe_decode_range(ws["!ref"]);
        range.s.c = _range.s.c;
        range.s.r = _range.s.r;
        range.e.c = Math.max(range.e.c, _range.e.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        if (_R == -1) range.e.r = _R = _range.e.r + 1;
    }
    for(var R = 0; R != data.length; ++R){
        if (!data[R]) continue;
        if (!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
        for(var C = 0; C != data[R].length; ++C){
            if (typeof data[R][C] === "undefined") continue;
            var cell /*:Cell*/  = {
                v: data[R][C]
            } /*:any*/ ;
            var __R = _R + R, __C = _C + C;
            if (range.s.r > __R) range.s.r = __R;
            if (range.s.c > __C) range.s.c = __C;
            if (range.e.r < __R) range.e.r = __R;
            if (range.e.c < __C) range.e.c = __C;
            if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
            else {
                if (Array.isArray(cell.v)) {
                    cell.f = data[R][C][1];
                    cell.v = cell.v[0];
                }
                if (cell.v === null) {
                    if (cell.f) cell.t = "n";
                    else if (o.nullError) {
                        cell.t = "e";
                        cell.v = 0;
                    } else if (!o.sheetStubs) continue;
                    else cell.t = "z";
                } else if (typeof cell.v === "number") cell.t = "n";
                else if (typeof cell.v === "boolean") cell.t = "b";
                else if (cell.v instanceof Date) {
                    cell.z = o.dateNF || table_fmt[14];
                    if (o.cellDates) {
                        cell.t = "d";
                        cell.w = SSF_format(cell.z, datenum(cell.v));
                    } else {
                        cell.t = "n";
                        cell.v = datenum(cell.v);
                        cell.w = SSF_format(cell.z, cell.v);
                    }
                } else cell.t = "s";
            }
            if (dense) {
                if (!ws[__R]) ws[__R] = [];
                if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
                ws[__R][__C] = cell;
            } else {
                var cell_ref = encode_cell({
                    c: __C,
                    r: __R
                } /*:any*/ );
                if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
                ws[cell_ref] = cell;
            }
        }
    }
    if (range.s.c < 10000000) ws["!ref"] = encode_range(range);
    return ws;
}
function aoa_to_sheet(data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {
    return sheet_add_aoa(null, data, opts);
}
function parse_Int32LE(data) {
    return data.read_shift(4, "i");
}
function write_UInt32LE(x /*:number*/ , o) {
    if (!o) o = new_buf(4);
    o.write_shift(4, x);
    return o;
}
/* [MS-XLSB] 2.5.168 */ function parse_XLWideString(data /*::, length*/ ) /*:string*/ {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
}
function write_XLWideString(data /*:string*/ , o) {
    var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(4 + 2 * data.length);
    }
    o.write_shift(4, data.length);
    if (data.length > 0) o.write_shift(0, data, "dbcs");
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.91 */ //function parse_LPWideString(data/*::, length*/)/*:string*/ {
//	var cchCharacters = data.read_shift(2);
//	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
//}
/* [MS-XLSB] 2.5.143 */ function parse_StrRun(data) {
    return {
        ich: data.read_shift(2),
        ifnt: data.read_shift(2)
    };
}
function write_StrRun(run, o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, run.ich || 0);
    o.write_shift(2, run.ifnt || 0);
    return o;
}
/* [MS-XLSB] 2.5.121 */ function parse_RichStr(data, length /*:number*/ ) /*:XLString*/ {
    var start = data.l;
    var flags = data.read_shift(1);
    var str = parse_XLWideString(data);
    var rgsStrRun = [];
    var z = {
        t: str,
        h: str
    } /*:any*/ ;
    if ((flags & 1) !== 0) {
        /* TODO: formatted string */ var dwSizeStrRun = data.read_shift(4);
        for(var i = 0; i != dwSizeStrRun; ++i)rgsStrRun.push(parse_StrRun(data));
        z.r = rgsStrRun;
    } else z.r = [
        {
            ich: 0,
            ifnt: 0
        }
    ];
    //if((flags & 2) !== 0) { /* fExtStr */
    //	/* TODO: phonetic string */
    //}
    data.l = start + length;
    return z;
}
function write_RichStr(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {
    /* TODO: formatted string */ var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(15 + 4 * str.t.length);
    }
    o.write_shift(1, 0);
    write_XLWideString(str.t, o);
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */ var parse_BrtCommentText = parse_RichStr;
function write_BrtCommentText(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {
    /* TODO: formatted string */ var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(23 + 4 * str.t.length);
    }
    o.write_shift(1, 1);
    write_XLWideString(str.t, o);
    o.write_shift(4, 1);
    write_StrRun({
        ich: 0,
        ifnt: 0
    }, o);
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.9 */ function parse_XLSBCell(data) /*:any*/ {
    var col = data.read_shift(4);
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++; //var fPhShow = data.read_shift(1);
    return {
        c: col,
        iStyleRef: iStyleRef
    };
}
function write_XLSBCell(cell /*:any*/ , o /*:?Block*/ ) {
    if (o == null) o = new_buf(8);
    o.write_shift(-4, cell.c);
    o.write_shift(3, cell.iStyleRef || cell.s);
    o.write_shift(1, 0); /* fPhShow */ 
    return o;
}
/* Short XLSB Cell does not include column */ function parse_XLSBShortCell(data) /*:any*/ {
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++; //var fPhShow = data.read_shift(1);
    return {
        c: -1,
        iStyleRef: iStyleRef
    };
}
function write_XLSBShortCell(cell /*:any*/ , o /*:?Block*/ ) {
    if (o == null) o = new_buf(4);
    o.write_shift(3, cell.iStyleRef || cell.s);
    o.write_shift(1, 0); /* fPhShow */ 
    return o;
}
/* [MS-XLSB] 2.5.21 */ var parse_XLSBCodeName = parse_XLWideString;
var write_XLSBCodeName = write_XLWideString;
/* [MS-XLSB] 2.5.166 */ function parse_XLNullableWideString(data /*::, length*/ ) /*:string*/ {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, "dbcs");
}
function write_XLNullableWideString(data /*:string*/ , o) {
    var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(127);
    }
    o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
    if (data.length > 0) o.write_shift(0, data, "dbcs");
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.165 */ var parse_XLNameWideString = parse_XLWideString;
//var write_XLNameWideString = write_XLWideString;
/* [MS-XLSB] 2.5.114 */ var parse_RelID = parse_XLNullableWideString;
var write_RelID = write_XLNullableWideString;
/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */ function parse_RkNumber(data) /*:number*/ {
    var b = data.slice(data.l, data.l + 4);
    var fX100 = b[0] & 1, fInt = b[0] & 2;
    data.l += 4;
    var RK = fInt === 0 ? __double([
        0,
        0,
        0,
        0,
        b[0] & 0xFC,
        b[1],
        b[2],
        b[3]
    ], 0) : __readInt32LE(b, 0) >> 2;
    return fX100 ? RK / 100 : RK;
}
function write_RkNumber(data /*:number*/ , o) {
    if (o == null) o = new_buf(4);
    var fX100 = 0, fInt = 0, d100 = data * 100;
    if (data == (data | 0) && data >= -536870912 && data < 536870912) fInt = 1;
    else if (d100 == (d100 | 0) && d100 >= -536870912 && d100 < 536870912) {
        fInt = 1;
        fX100 = 1;
    }
    if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
    else throw new Error("unsupported RkNumber " + data); // TODO
}
/* [MS-XLSB] 2.5.117 RfX */ function parse_RfX(data /*::, length*/ ) /*:Range*/ {
    var cell /*:Range*/  = {
        s: {},
        e: {}
    } /*:any*/ ;
    cell.s.r = data.read_shift(4);
    cell.e.r = data.read_shift(4);
    cell.s.c = data.read_shift(4);
    cell.e.c = data.read_shift(4);
    return cell;
}
function write_RfX(r /*:Range*/ , o) {
    if (!o) o = new_buf(16);
    o.write_shift(4, r.s.r);
    o.write_shift(4, r.e.r);
    o.write_shift(4, r.s.c);
    o.write_shift(4, r.e.c);
    return o;
}
/* [MS-XLSB] 2.5.153 UncheckedRfX */ var parse_UncheckedRfX = parse_RfX;
var write_UncheckedRfX = write_RfX;
/* [MS-XLSB] 2.5.155 UncheckedSqRfX */ //function parse_UncheckedSqRfX(data) {
//	var cnt = data.read_shift(4);
//	var out = [];
//	for(var i = 0; i < cnt; ++i) {
//		var rng = parse_UncheckedRfX(data);
//		out.push(encode_range(rng));
//	}
//	return out.join(",");
//}
//function write_UncheckedSqRfX(sqrfx/*:string*/) {
//	var parts = sqrfx.split(/\s*,\s*/);
//	var o = new_buf(4); o.write_shift(4, parts.length);
//	var out = [o];
//	parts.forEach(function(rng) {
//		out.push(write_UncheckedRfX(safe_decode_range(rng)));
//	});
//	return bconcat(out);
//}
/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */ /* TODO: error checking, NaN and Infinity values are not valid Xnum */ function parse_Xnum(data /*::, length*/ ) {
    if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
    return data.read_shift(8, "f");
}
function write_Xnum(data, o) {
    return (o || new_buf(8)).write_shift(8, data, "f");
}
/* [MS-XLSB] 2.4.324 BrtColor */ function parse_BrtColor(data /*::, length*/ ) {
    var out = {};
    var d = data.read_shift(1);
    //var fValidRGB = d & 1;
    var xColorType = d >>> 1;
    var index = data.read_shift(1);
    var nTS = data.read_shift(2, "i");
    var bR = data.read_shift(1);
    var bG = data.read_shift(1);
    var bB = data.read_shift(1);
    data.l++; //var bAlpha = data.read_shift(1);
    switch(xColorType){
        case 0:
            out.auto = 1;
            break;
        case 1:
            out.index = index;
            var icv = XLSIcv[index];
            /* automatic pseudo index 81 */ if (icv) out.rgb = rgb2Hex(icv);
            break;
        case 2:
            /* if(!fValidRGB) throw new Error("invalid"); */ out.rgb = rgb2Hex([
                bR,
                bG,
                bB
            ]);
            break;
        case 3:
            out.theme = index;
            break;
    }
    if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
    return out;
}
function write_BrtColor(color, o) {
    if (!o) o = new_buf(8);
    if (!color || color.auto) {
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
    }
    if (color.index != null) {
        o.write_shift(1, 0x02);
        o.write_shift(1, color.index);
    } else if (color.theme != null) {
        o.write_shift(1, 0x06);
        o.write_shift(1, color.theme);
    } else {
        o.write_shift(1, 0x05);
        o.write_shift(1, 0);
    }
    var nTS = color.tint || 0;
    if (nTS > 0) nTS *= 32767;
    else if (nTS < 0) nTS *= 32768;
    o.write_shift(2, nTS);
    if (!color.rgb || color.theme != null) {
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
    } else {
        var rgb = color.rgb || "FFFFFF";
        if (typeof rgb == "number") rgb = ("000000" + rgb.toString(16)).slice(-6);
        o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
        o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
        o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
        o.write_shift(1, 0xFF);
    }
    return o;
}
/* [MS-XLSB] 2.5.52 */ function parse_FontFlags(data /*::, length, opts*/ ) {
    var d = data.read_shift(1);
    data.l++;
    var out = {
        fBold: d & 0x01,
        fItalic: d & 0x02,
        fUnderline: d & 0x04,
        fStrikeout: d & 0x08,
        fOutline: d & 0x10,
        fShadow: d & 0x20,
        fCondense: d & 0x40,
        fExtend: d & 0x80
    };
    return out;
}
function write_FontFlags(font, o) {
    if (!o) o = new_buf(2);
    var grbit = (font.italic ? 0x02 : 0) | (font.strike ? 0x08 : 0) | (font.outline ? 0x10 : 0) | (font.shadow ? 0x20 : 0) | (font.condense ? 0x40 : 0) | (font.extend ? 0x80 : 0);
    o.write_shift(1, grbit);
    o.write_shift(1, 0);
    return o;
}
/* [MS-OLEDS] 2.3.1 and 2.3.2 */ function parse_ClipboardFormatOrString(o, w /*:number*/ ) /*:string*/ {
    // $FlowIgnore
    var ClipFmt = {
        2: "BITMAP",
        3: "METAFILEPICT",
        8: "DIB",
        14: "ENHMETAFILE"
    };
    var m /*:number*/  = o.read_shift(4);
    switch(m){
        case 0x00000000:
            return "";
        case 0xffffffff:
        case 0xfffffffe:
            return ClipFmt[o.read_shift(4)] || "";
    }
    if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
    o.l -= 4;
    return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
}
function parse_ClipboardFormatOrAnsiString(o) {
    return parse_ClipboardFormatOrString(o, 1);
}
function parse_ClipboardFormatOrUnicodeString(o) {
    return parse_ClipboardFormatOrString(o, 2);
}
/* [MS-OLEPS] 2.2 PropertyType */ // Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars
//var VT_EMPTY    = 0x0000;
//var VT_NULL     = 0x0001;
var VT_I2 = 0x0002;
var VT_I4 = 0x0003;
//var VT_R4       = 0x0004;
//var VT_R8       = 0x0005;
//var VT_CY       = 0x0006;
//var VT_DATE     = 0x0007;
//var VT_BSTR     = 0x0008;
//var VT_ERROR    = 0x000A;
var VT_BOOL = 0x000B;
var VT_VARIANT = 0x000C;
//var VT_DECIMAL  = 0x000E;
//var VT_I1       = 0x0010;
//var VT_UI1      = 0x0011;
//var VT_UI2      = 0x0012;
var VT_UI4 = 0x0013;
//var VT_I8       = 0x0014;
//var VT_UI8      = 0x0015;
//var VT_INT      = 0x0016;
//var VT_UINT     = 0x0017;
var VT_LPSTR = 0x001E;
//var VT_LPWSTR   = 0x001F;
var VT_FILETIME = 0x0040;
var VT_BLOB = 0x0041;
//var VT_STREAM   = 0x0042;
//var VT_STORAGE  = 0x0043;
//var VT_STREAMED_Object  = 0x0044;
//var VT_STORED_Object    = 0x0045;
//var VT_BLOB_Object      = 0x0046;
var VT_CF = 0x0047;
//var VT_CLSID    = 0x0048;
//var VT_VERSIONED_STREAM = 0x0049;
var VT_VECTOR = 0x1000;
var VT_VECTOR_VARIANT = 0x100C;
var VT_VECTOR_LPSTR = 0x101E;
//var VT_ARRAY    = 0x2000;
var VT_STRING = 0x0050; // 2.3.3.1.11 VtString
var VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString
var VT_CUSTOM = [
    VT_STRING,
    VT_USTR
];
/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */ var DocSummaryPIDDSI = {
    /*::[*/ 0x01: {
        n: "CodePage",
        t: VT_I2
    },
    /*::[*/ 0x02: {
        n: "Category",
        t: VT_STRING
    },
    /*::[*/ 0x03: {
        n: "PresentationFormat",
        t: VT_STRING
    },
    /*::[*/ 0x04: {
        n: "ByteCount",
        t: VT_I4
    },
    /*::[*/ 0x05: {
        n: "LineCount",
        t: VT_I4
    },
    /*::[*/ 0x06: {
        n: "ParagraphCount",
        t: VT_I4
    },
    /*::[*/ 0x07: {
        n: "SlideCount",
        t: VT_I4
    },
    /*::[*/ 0x08: {
        n: "NoteCount",
        t: VT_I4
    },
    /*::[*/ 0x09: {
        n: "HiddenCount",
        t: VT_I4
    },
    /*::[*/ 0x0a: {
        n: "MultimediaClipCount",
        t: VT_I4
    },
    /*::[*/ 0x0b: {
        n: "ScaleCrop",
        t: VT_BOOL
    },
    /*::[*/ 0x0c: {
        n: "HeadingPairs",
        t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ 
    },
    /*::[*/ 0x0d: {
        n: "TitlesOfParts",
        t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ 
    },
    /*::[*/ 0x0e: {
        n: "Manager",
        t: VT_STRING
    },
    /*::[*/ 0x0f: {
        n: "Company",
        t: VT_STRING
    },
    /*::[*/ 0x10: {
        n: "LinksUpToDate",
        t: VT_BOOL
    },
    /*::[*/ 0x11: {
        n: "CharacterCount",
        t: VT_I4
    },
    /*::[*/ 0x13: {
        n: "SharedDoc",
        t: VT_BOOL
    },
    /*::[*/ 0x16: {
        n: "HyperlinksChanged",
        t: VT_BOOL
    },
    /*::[*/ 0x17: {
        n: "AppVersion",
        t: VT_I4,
        p: "version"
    },
    /*::[*/ 0x18: {
        n: "DigSig",
        t: VT_BLOB
    },
    /*::[*/ 0x1A: {
        n: "ContentType",
        t: VT_STRING
    },
    /*::[*/ 0x1B: {
        n: "ContentStatus",
        t: VT_STRING
    },
    /*::[*/ 0x1C: {
        n: "Language",
        t: VT_STRING
    },
    /*::[*/ 0x1D: {
        n: "Version",
        t: VT_STRING
    },
    /*::[*/ 0xFF: {},
    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {
        n: "Locale",
        t: VT_UI4
    },
    /*::[*/ 0x80000003: {
        n: "Behavior",
        t: VT_UI4
    },
    /*::[*/ 0x72627262: {}
};
/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */ var SummaryPIDSI = {
    /*::[*/ 0x01: {
        n: "CodePage",
        t: VT_I2
    },
    /*::[*/ 0x02: {
        n: "Title",
        t: VT_STRING
    },
    /*::[*/ 0x03: {
        n: "Subject",
        t: VT_STRING
    },
    /*::[*/ 0x04: {
        n: "Author",
        t: VT_STRING
    },
    /*::[*/ 0x05: {
        n: "Keywords",
        t: VT_STRING
    },
    /*::[*/ 0x06: {
        n: "Comments",
        t: VT_STRING
    },
    /*::[*/ 0x07: {
        n: "Template",
        t: VT_STRING
    },
    /*::[*/ 0x08: {
        n: "LastAuthor",
        t: VT_STRING
    },
    /*::[*/ 0x09: {
        n: "RevNumber",
        t: VT_STRING
    },
    /*::[*/ 0x0A: {
        n: "EditTime",
        t: VT_FILETIME
    },
    /*::[*/ 0x0B: {
        n: "LastPrinted",
        t: VT_FILETIME
    },
    /*::[*/ 0x0C: {
        n: "CreatedDate",
        t: VT_FILETIME
    },
    /*::[*/ 0x0D: {
        n: "ModifiedDate",
        t: VT_FILETIME
    },
    /*::[*/ 0x0E: {
        n: "PageCount",
        t: VT_I4
    },
    /*::[*/ 0x0F: {
        n: "WordCount",
        t: VT_I4
    },
    /*::[*/ 0x10: {
        n: "CharCount",
        t: VT_I4
    },
    /*::[*/ 0x11: {
        n: "Thumbnail",
        t: VT_CF
    },
    /*::[*/ 0x12: {
        n: "Application",
        t: VT_STRING
    },
    /*::[*/ 0x13: {
        n: "DocSecurity",
        t: VT_I4
    },
    /*::[*/ 0xFF: {},
    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {
        n: "Locale",
        t: VT_UI4
    },
    /*::[*/ 0x80000003: {
        n: "Behavior",
        t: VT_UI4
    },
    /*::[*/ 0x72627262: {}
};
/* [MS-XLS] 2.4.63 Country/Region codes */ var CountryEnum = {
    /*::[*/ 0x0001: "US",
    /*::[*/ 0x0002: "CA",
    /*::[*/ 0x0003: "",
    /*::[*/ 0x0007: "RU",
    /*::[*/ 0x0014: "EG",
    /*::[*/ 0x001E: "GR",
    /*::[*/ 0x001F: "NL",
    /*::[*/ 0x0020: "BE",
    /*::[*/ 0x0021: "FR",
    /*::[*/ 0x0022: "ES",
    /*::[*/ 0x0024: "HU",
    /*::[*/ 0x0027: "IT",
    /*::[*/ 0x0029: "CH",
    /*::[*/ 0x002B: "AT",
    /*::[*/ 0x002C: "GB",
    /*::[*/ 0x002D: "DK",
    /*::[*/ 0x002E: "SE",
    /*::[*/ 0x002F: "NO",
    /*::[*/ 0x0030: "PL",
    /*::[*/ 0x0031: "DE",
    /*::[*/ 0x0034: "MX",
    /*::[*/ 0x0037: "BR",
    /*::[*/ 0x003d: "AU",
    /*::[*/ 0x0040: "NZ",
    /*::[*/ 0x0042: "TH",
    /*::[*/ 0x0051: "JP",
    /*::[*/ 0x0052: "KR",
    /*::[*/ 0x0054: "VN",
    /*::[*/ 0x0056: "CN",
    /*::[*/ 0x005A: "TR",
    /*::[*/ 0x0069: "JS",
    /*::[*/ 0x00D5: "DZ",
    /*::[*/ 0x00D8: "MA",
    /*::[*/ 0x00DA: "LY",
    /*::[*/ 0x015F: "PT",
    /*::[*/ 0x0162: "IS",
    /*::[*/ 0x0166: "FI",
    /*::[*/ 0x01A4: "CZ",
    /*::[*/ 0x0376: "TW",
    /*::[*/ 0x03C1: "LB",
    /*::[*/ 0x03C2: "JO",
    /*::[*/ 0x03C3: "SY",
    /*::[*/ 0x03C4: "IQ",
    /*::[*/ 0x03C5: "KW",
    /*::[*/ 0x03C6: "SA",
    /*::[*/ 0x03CB: "AE",
    /*::[*/ 0x03CC: "IL",
    /*::[*/ 0x03CE: "QA",
    /*::[*/ 0x03D5: "IR",
    /*::[*/ 0xFFFF: "US" // United States
};
/* [MS-XLS] 2.5.127 */ var XLSFillPattern = [
    null,
    "solid",
    "mediumGray",
    "darkGray",
    "lightGray",
    "darkHorizontal",
    "darkVertical",
    "darkDown",
    "darkUp",
    "darkGrid",
    "darkTrellis",
    "lightHorizontal",
    "lightVertical",
    "lightDown",
    "lightUp",
    "lightGrid",
    "lightTrellis",
    "gray125",
    "gray0625"
];
function rgbify(arr /*:Array<number>*/ ) /*:Array<[number, number, number]>*/ {
    return arr.map(function(x) {
        return [
            x >> 16 & 255,
            x >> 8 & 255,
            x & 255
        ];
    });
}
/* [MS-XLS] 2.5.161 */ /* [MS-XLSB] 2.5.75 Icv */ var _XLSIcv = /*#__PURE__*/ rgbify([
    /* Color Constants */ 0x000000,
    0xFFFFFF,
    0xFF0000,
    0x00FF00,
    0x0000FF,
    0xFFFF00,
    0xFF00FF,
    0x00FFFF,
    /* Overridable Defaults */ 0x000000,
    0xFFFFFF,
    0xFF0000,
    0x00FF00,
    0x0000FF,
    0xFFFF00,
    0xFF00FF,
    0x00FFFF,
    0x800000,
    0x008000,
    0x000080,
    0x808000,
    0x800080,
    0x008080,
    0xC0C0C0,
    0x808080,
    0x9999FF,
    0x993366,
    0xFFFFCC,
    0xCCFFFF,
    0x660066,
    0xFF8080,
    0x0066CC,
    0xCCCCFF,
    0x000080,
    0xFF00FF,
    0xFFFF00,
    0x00FFFF,
    0x800080,
    0x800000,
    0x008080,
    0x0000FF,
    0x00CCFF,
    0xCCFFFF,
    0xCCFFCC,
    0xFFFF99,
    0x99CCFF,
    0xFF99CC,
    0xCC99FF,
    0xFFCC99,
    0x3366FF,
    0x33CCCC,
    0x99CC00,
    0xFFCC00,
    0xFF9900,
    0xFF6600,
    0x666699,
    0x969696,
    0x003366,
    0x339966,
    0x003300,
    0x333300,
    0x993300,
    0x993366,
    0x333399,
    0x333333,
    /* Other entries to appease BIFF8/12 */ 0xFFFFFF,
    /* 0x40 icvForeground ?? */ 0x000000,
    /* 0x41 icvBackground ?? */ 0x000000,
    /* 0x42 icvFrame ?? */ 0x000000,
    /* 0x43 icv3D ?? */ 0x000000,
    /* 0x44 icv3DText ?? */ 0x000000,
    /* 0x45 icv3DHilite ?? */ 0x000000,
    /* 0x46 icv3DShadow ?? */ 0x000000,
    /* 0x47 icvHilite ?? */ 0x000000,
    /* 0x48 icvCtlText ?? */ 0x000000,
    /* 0x49 icvCtlScrl ?? */ 0x000000,
    /* 0x4A icvCtlInv ?? */ 0x000000,
    /* 0x4B icvCtlBody ?? */ 0x000000,
    /* 0x4C icvCtlFrame ?? */ 0x000000,
    /* 0x4D icvCtlFore ?? */ 0x000000,
    /* 0x4E icvCtlBack ?? */ 0x000000,
    /* 0x4F icvCtlNeutral */ 0x000000,
    /* 0x50 icvInfoBk ?? */ 0x000000 /* 0x51 icvInfoText ?? */ 
]);
var XLSIcv = /*#__PURE__*/ dup(_XLSIcv);
/* [MS-XLSB] 2.5.97.2 */ var BErr = {
    /*::[*/ 0x00: "#NULL!",
    /*::[*/ 0x07: "#DIV/0!",
    /*::[*/ 0x0F: "#VALUE!",
    /*::[*/ 0x17: "#REF!",
    /*::[*/ 0x1D: "#NAME?",
    /*::[*/ 0x24: "#NUM!",
    /*::[*/ 0x2A: "#N/A",
    /*::[*/ 0x2B: "#GETTING_DATA",
    /*::[*/ 0xFF: "#WTF?"
};
//var RBErr = evert_num(BErr);
var RBErr = {
    "#NULL!": 0x00,
    "#DIV/0!": 0x07,
    "#VALUE!": 0x0F,
    "#REF!": 0x17,
    "#NAME?": 0x1D,
    "#NUM!": 0x24,
    "#N/A": 0x2A,
    "#GETTING_DATA": 0x2B,
    "#WTF?": 0xFF
};
/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */ /* 12.3 Part Summary <SpreadsheetML> */ /* 14.2 Part Summary <DrawingML> */ /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */ var ct2type /*{[string]:string}*/  = {
    /* Workbook */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
    "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
    /* Worksheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
    "application/vnd.ms-excel.worksheet": "sheets",
    "application/vnd.ms-excel.binIndexWs": "TODO",
    /* Binary Index */ /* Chartsheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
    "application/vnd.ms-excel.chartsheet": "charts",
    /* Macrosheet */ "application/vnd.ms-excel.macrosheet+xml": "macros",
    "application/vnd.ms-excel.macrosheet": "macros",
    "application/vnd.ms-excel.intlmacrosheet": "TODO",
    "application/vnd.ms-excel.binIndexMs": "TODO",
    /* Binary Index */ /* Dialogsheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
    "application/vnd.ms-excel.dialogsheet": "dialogs",
    /* Shared Strings */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
    "application/vnd.ms-excel.sharedStrings": "strs",
    /* Styles */ "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
    "application/vnd.ms-excel.styles": "styles",
    /* File Properties */ "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
    /* Custom Data Properties */ "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
    /* Comments */ "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
    "application/vnd.ms-excel.comments": "comments",
    "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
    "application/vnd.ms-excel.person+xml": "people",
    /* Metadata (Stock/Geography and Dynamic Array) */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
    "application/vnd.ms-excel.sheetMetadata": "metadata",
    /* PivotTable */ "application/vnd.ms-excel.pivotTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
    /* Chart Objects */ "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
    /* Chart Colors */ "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
    /* Chart Style */ "application/vnd.ms-office.chartstyle+xml": "TODO",
    /* Chart Advanced */ "application/vnd.ms-office.chartex+xml": "TODO",
    /* Calculation Chain */ "application/vnd.ms-excel.calcChain": "calcchains",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
    /* Printer Settings */ "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
    /* ActiveX */ "application/vnd.ms-office.activeX": "TODO",
    "application/vnd.ms-office.activeX+xml": "TODO",
    /* Custom Toolbars */ "application/vnd.ms-excel.attachedToolbars": "TODO",
    /* External Data Connections */ "application/vnd.ms-excel.connections": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
    /* External Links */ "application/vnd.ms-excel.externalLink": "links",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
    /* PivotCache */ "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    "application/vnd.ms-excel.pivotCacheRecords": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
    /* Query Table */ "application/vnd.ms-excel.queryTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
    /* Shared Workbook */ "application/vnd.ms-excel.userNames": "TODO",
    "application/vnd.ms-excel.revisionHeaders": "TODO",
    "application/vnd.ms-excel.revisionLog": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
    /* Single Cell Table */ "application/vnd.ms-excel.tableSingleCells": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
    /* Slicer */ "application/vnd.ms-excel.slicer": "TODO",
    "application/vnd.ms-excel.slicerCache": "TODO",
    "application/vnd.ms-excel.slicer+xml": "TODO",
    "application/vnd.ms-excel.slicerCache+xml": "TODO",
    /* Sort Map */ "application/vnd.ms-excel.wsSortMap": "TODO",
    /* Table */ "application/vnd.ms-excel.table": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
    /* Themes */ "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
    /* Theme Override */ "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
    /* Timeline */ "application/vnd.ms-excel.Timeline+xml": "TODO",
    /* verify */ "application/vnd.ms-excel.TimelineCache+xml": "TODO",
    /* verify */ /* VBA */ "application/vnd.ms-office.vbaProject": "vba",
    "application/vnd.ms-office.vbaProjectSignature": "TODO",
    /* Volatile Dependencies */ "application/vnd.ms-office.volatileDependencies": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
    /* Control Properties */ "application/vnd.ms-excel.controlproperties+xml": "TODO",
    /* Data Model */ "application/vnd.openxmlformats-officedocument.model+data": "TODO",
    /* Survey */ "application/vnd.ms-excel.Survey+xml": "TODO",
    /* Drawing */ "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
    /* VML */ "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
    "application/vnd.openxmlformats-package.relationships+xml": "rels",
    "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
    /* Image */ "image/png": "TODO",
    "sheet": "js"
} /*:any*/ ;
var CT_LIST = {
    workbooks: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
        xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
        xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
        xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
        xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
    },
    strs: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
        xlsb: "application/vnd.ms-excel.sharedStrings"
    },
    comments: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
        xlsb: "application/vnd.ms-excel.comments"
    },
    sheets: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
        xlsb: "application/vnd.ms-excel.worksheet"
    },
    charts: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
        xlsb: "application/vnd.ms-excel.chartsheet"
    },
    dialogs: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
        xlsb: "application/vnd.ms-excel.dialogsheet"
    },
    macros: {
        xlsx: "application/vnd.ms-excel.macrosheet+xml",
        xlsb: "application/vnd.ms-excel.macrosheet"
    },
    metadata: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
        xlsb: "application/vnd.ms-excel.sheetMetadata"
    },
    styles: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
        xlsb: "application/vnd.ms-excel.styles"
    }
};
function new_ct() /*:any*/ {
    return {
        workbooks: [],
        sheets: [],
        charts: [],
        dialogs: [],
        macros: [],
        rels: [],
        strs: [],
        comments: [],
        threadedcomments: [],
        links: [],
        coreprops: [],
        extprops: [],
        custprops: [],
        themes: [],
        styles: [],
        calcchains: [],
        vba: [],
        drawings: [],
        metadata: [],
        people: [],
        TODO: [],
        xmlns: ""
    } /*:any*/ ;
}
function parse_ct(data /*:?string*/ ) {
    var ct = new_ct();
    if (!data || !data.match) return ct;
    var ctext = {};
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0].replace(nsregex, "<")){
            case "<?xml":
                break;
            case "<Types":
                ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || [
                    "",
                    ""
                ])[1]];
                break;
            case "<Default":
                ctext[y.Extension] = y.ContentType;
                break;
            case "<Override":
                if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
                break;
        }
    });
    if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
    ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
    ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
    ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
    ct.defaults = ctext;
    delete ct.calcchains;
    return ct;
}
function write_ct(ct, opts) /*:string*/ {
    var type2ct /*{[string]:Array<string>}*/  = evert_arr(ct2type);
    var o /*:Array<string>*/  = [], v;
    o[o.length] = XML_HEADER;
    o[o.length] = writextag("Types", null, {
        "xmlns": XMLNS.CT,
        "xmlns:xsd": XMLNS.xsd,
        "xmlns:xsi": XMLNS.xsi
    });
    o = o.concat([
        [
            "xml",
            "application/xml"
        ],
        [
            "bin",
            "application/vnd.ms-excel.sheet.binary.macroEnabled.main"
        ],
        [
            "vml",
            "application/vnd.openxmlformats-officedocument.vmlDrawing"
        ],
        [
            "data",
            "application/vnd.openxmlformats-officedocument.model+data"
        ],
        /* from test files */ [
            "bmp",
            "image/bmp"
        ],
        [
            "png",
            "image/png"
        ],
        [
            "gif",
            "image/gif"
        ],
        [
            "emf",
            "image/x-emf"
        ],
        [
            "wmf",
            "image/x-wmf"
        ],
        [
            "jpg",
            "image/jpeg"
        ],
        [
            "jpeg",
            "image/jpeg"
        ],
        [
            "tif",
            "image/tiff"
        ],
        [
            "tiff",
            "image/tiff"
        ],
        [
            "pdf",
            "application/pdf"
        ],
        [
            "rels",
            "application/vnd.openxmlformats-package.relationships+xml"
        ]
    ].map(function(x) {
        return writextag("Default", null, {
            "Extension": x[0],
            "ContentType": x[1]
        });
    }));
    /* only write first instance */ var f1 = function(w) {
        if (ct[w] && ct[w].length > 0) {
            v = ct[w][0];
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
        }
    };
    /* book type-specific */ var f2 = function(w) {
        (ct[w] || []).forEach(function(v) {
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
        });
    };
    /* standard type */ var f3 = function(t) {
        (ct[t] || []).forEach(function(v) {
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": type2ct[t][0]
            });
        });
    };
    f1("workbooks");
    f2("sheets");
    f2("charts");
    f3("themes");
    [
        "strs",
        "styles"
    ].forEach(f1);
    [
        "coreprops",
        "extprops",
        "custprops"
    ].forEach(f3);
    f3("vba");
    f3("comments");
    f3("threadedcomments");
    f3("drawings");
    f2("metadata");
    f3("people");
    if (o.length > 2) {
        o[o.length] = "</Types>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 9.3 Relationships */ var RELS = {
    WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
    SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
    STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
    THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
    CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
    CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
    CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
    WS: [
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
        "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    ],
    DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
    MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
    IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
    DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
    XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
    TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
    PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
    VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
} /*:any*/ ;
/* 9.3.3 Representing Relationships */ function get_rels_path(file /*:string*/ ) /*:string*/ {
    var n = file.lastIndexOf("/");
    return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
}
function parse_rels(data /*:?string*/ , currentFilePath /*:string*/ ) {
    var rels = {
        "!id": {}
    };
    if (!data) return rels;
    if (currentFilePath.charAt(0) !== "/") currentFilePath = "/" + currentFilePath;
    var hash = {};
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        /* 9.3.2.2 OPC_Relationships */ if (y[0] === "<Relationship") {
            var rel = {};
            rel.Type = y.Type;
            rel.Target = y.Target;
            rel.Id = y.Id;
            if (y.TargetMode) rel.TargetMode = y.TargetMode;
            var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
            rels[canonictarget] = rel;
            hash[y.Id] = rel;
        }
    });
    rels["!id"] = hash;
    return rels;
}
/* TODO */ function write_rels(rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("Relationships", null, {
            //'xmlns:ns0': XMLNS.RELS,
            "xmlns": XMLNS.RELS
        })
    ];
    keys(rels["!id"]).forEach(function(rid) {
        o[o.length] = writextag("Relationship", null, rels["!id"][rid]);
    });
    if (o.length > 2) {
        o[o.length] = "</Relationships>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
function add_rels(rels, rId /*:number*/ , f, type, relobj, targetmode /*:?string*/ ) /*:number*/ {
    if (!relobj) relobj = {};
    if (!rels["!id"]) rels["!id"] = {};
    if (!rels["!idx"]) rels["!idx"] = 1;
    if (rId < 0) for(rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId);
    rels["!idx"] = rId + 1;
    relobj.Id = "rId" + rId;
    relobj.Type = type;
    relobj.Target = f;
    if (targetmode) relobj.TargetMode = targetmode;
    else if ([
        RELS.HLINK,
        RELS.XPATH,
        RELS.XMISS
    ].indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
    if (rels["!id"][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
    rels["!id"][relobj.Id] = relobj;
    rels[("/" + relobj.Target).replace("//", "/")] = relobj;
    return rId;
}
/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */ /* Part 3 Section 4 Manifest File */ var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
function parse_manifest(d, opts) {
    var str = xlml_normalize(d);
    var Rn;
    var FEtag;
    while(Rn = xlmlregex.exec(str))switch(Rn[3]){
        case "manifest":
            break; // 4.2 <manifest:manifest>
        case "file-entry":
            FEtag = parsexmltag(Rn[0], false);
            if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
            break;
        case "encryption-data":
        case "algorithm":
        case "start-key-generation":
        case "key-derivation":
            throw new Error("Unsupported ODS Encryption");
        default:
            if (opts && opts.WTF) throw Rn;
    }
}
function write_manifest(manifest /*:Array<Array<string> >*/ ) /*:string*/ {
    var o = [
        XML_HEADER
    ];
    o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
    o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
    for(var i = 0; i < manifest.length; ++i)o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
    o.push("</manifest:manifest>");
    return o.join("");
}
/* Part 3 Section 6 Metadata Manifest File */ function write_rdf_type(file /*:string*/ , res /*:string*/ , tag /*:?string*/ ) {
    return [
        '  <rdf:Description rdf:about="' + file + '">\n',
        '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
        "  </rdf:Description>\n"
    ].join("");
}
function write_rdf_has(base /*:string*/ , file /*:string*/ ) {
    return [
        '  <rdf:Description rdf:about="' + base + '">\n',
        '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
        "  </rdf:Description>\n"
    ].join("");
}
function write_rdf(rdf) {
    var o = [
        XML_HEADER
    ];
    o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
    for(var i = 0; i != rdf.length; ++i){
        o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
        o.push(write_rdf_has("", rdf[i][0]));
    }
    o.push(write_rdf_type("", "Document", "pkg"));
    o.push("</rdf:RDF>");
    return o.join("");
}
/* TODO: pull properties */ function write_meta_ods() /*:string*/ {
    return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX.version + "</meta:generator></office:meta></office:document-meta>";
}
/* ECMA-376 Part II 11.1 Core Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var CORE_PROPS /*:Array<Array<string> >*/  = [
    [
        "cp:category",
        "Category"
    ],
    [
        "cp:contentStatus",
        "ContentStatus"
    ],
    [
        "cp:keywords",
        "Keywords"
    ],
    [
        "cp:lastModifiedBy",
        "LastAuthor"
    ],
    [
        "cp:lastPrinted",
        "LastPrinted"
    ],
    [
        "cp:revision",
        "RevNumber"
    ],
    [
        "cp:version",
        "Version"
    ],
    [
        "dc:creator",
        "Author"
    ],
    [
        "dc:description",
        "Comments"
    ],
    [
        "dc:identifier",
        "Identifier"
    ],
    [
        "dc:language",
        "Language"
    ],
    [
        "dc:subject",
        "Subject"
    ],
    [
        "dc:title",
        "Title"
    ],
    [
        "dcterms:created",
        "CreatedDate",
        "date"
    ],
    [
        "dcterms:modified",
        "ModifiedDate",
        "date"
    ]
];
var CORE_PROPS_REGEX /*:Array<RegExp>*/  = /*#__PURE__*/ function() {
    var r = new Array(CORE_PROPS.length);
    for(var i = 0; i < CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i];
        var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
        r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
    }
    return r;
}();
function parse_core_props(data) {
    var p = {};
    data = utf8read(data);
    for(var i = 0; i < CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
        if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
        if (f[2] === "date" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
    }
    return p;
}
function cp_doit(f, g, h, o, p) {
    if (p[f] != null || g == null || g === "") return;
    p[f] = g;
    g = escapexml(g);
    o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
}
function write_core_props(cp, _opts) {
    var opts = _opts || {};
    var o = [
        XML_HEADER,
        writextag("cp:coreProperties", null, {
            //'xmlns': XMLNS.CORE_PROPS,
            "xmlns:cp": XMLNS.CORE_PROPS,
            "xmlns:dc": XMLNS.dc,
            "xmlns:dcterms": XMLNS.dcterms,
            "xmlns:dcmitype": XMLNS.dcmitype,
            "xmlns:xsi": XMLNS.xsi
        })
    ], p = {};
    if (!cp && !opts.Props) return o.join("");
    if (cp) {
        if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {
            "xsi:type": "dcterms:W3CDTF"
        }, o, p);
        if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {
            "xsi:type": "dcterms:W3CDTF"
        }, o, p);
    }
    for(var i = 0; i != CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i];
        var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
        if (v === true) v = "1";
        else if (v === false) v = "0";
        else if (typeof v == "number") v = String(v);
        if (v != null) cp_doit(f[0], v, null, o, p);
    }
    if (o.length > 2) {
        o[o.length] = "</cp:coreProperties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 15.2.12.3 Extended File Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var EXT_PROPS /*:Array<Array<string> >*/  = [
    [
        "Application",
        "Application",
        "string"
    ],
    [
        "AppVersion",
        "AppVersion",
        "string"
    ],
    [
        "Company",
        "Company",
        "string"
    ],
    [
        "DocSecurity",
        "DocSecurity",
        "string"
    ],
    [
        "Manager",
        "Manager",
        "string"
    ],
    [
        "HyperlinksChanged",
        "HyperlinksChanged",
        "bool"
    ],
    [
        "SharedDoc",
        "SharedDoc",
        "bool"
    ],
    [
        "LinksUpToDate",
        "LinksUpToDate",
        "bool"
    ],
    [
        "ScaleCrop",
        "ScaleCrop",
        "bool"
    ],
    [
        "HeadingPairs",
        "HeadingPairs",
        "raw"
    ],
    [
        "TitlesOfParts",
        "TitlesOfParts",
        "raw"
    ]
];
var PseudoPropsPairs = [
    "Worksheets",
    "SheetNames",
    "NamedRanges",
    "DefinedNames",
    "Chartsheets",
    "ChartNames"
];
function load_props_pairs(HP /*:string|Array<Array<any>>*/ , TOP, props, opts) {
    var v = [];
    if (typeof HP == "string") v = parseVector(HP, opts);
    else for(var j = 0; j < HP.length; ++j)v = v.concat(HP[j].map(function(hp) {
        return {
            v: hp
        };
    }));
    var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
        return x.v;
    }) : TOP;
    var idx = 0, len = 0;
    if (parts.length > 0) for(var i = 0; i !== v.length; i += 2){
        len = +v[i + 1].v;
        switch(v[i].v){
            case "Worksheets":
            case "工作表":
            case "Листы":
            case "أوراق العمل":
            case "ワークシート":
            case "גליונות עבודה":
            case "Arbeitsbl\xe4tter":
            case "\xc7alışma Sayfaları":
            case "Feuilles de calcul":
            case "Fogli di lavoro":
            case "Folhas de c\xe1lculo":
            case "Planilhas":
            case "Regneark":
            case "Hojas de c\xe1lculo":
            case "Werkbladen":
                props.Worksheets = len;
                props.SheetNames = parts.slice(idx, idx + len);
                break;
            case "Named Ranges":
            case "Rangos con nombre":
            case "名前付き一覧":
            case "Benannte Bereiche":
            case "Navngivne omr\xe5der":
                props.NamedRanges = len;
                props.DefinedNames = parts.slice(idx, idx + len);
                break;
            case "Charts":
            case "Diagramme":
                props.Chartsheets = len;
                props.ChartNames = parts.slice(idx, idx + len);
                break;
        }
        idx += len;
    }
}
function parse_ext_props(data, p, opts) {
    var q = {};
    if (!p) p = {};
    data = utf8read(data);
    EXT_PROPS.forEach(function(f) {
        var xml = (data.match(matchtag(f[0])) || [])[1];
        switch(f[2]){
            case "string":
                if (xml) p[f[1]] = unescapexml(xml);
                break;
            case "bool":
                p[f[1]] = xml === "true";
                break;
            case "raw":
                var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
                if (cur && cur.length > 0) q[f[1]] = cur[1];
                break;
        }
    });
    if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
    return p;
}
function write_ext_props(cp /*::, opts*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [], W = writextag;
    if (!cp) cp = {};
    cp.Application = "SheetJS";
    o[o.length] = XML_HEADER;
    o[o.length] = writextag("Properties", null, {
        "xmlns": XMLNS.EXT_PROPS,
        "xmlns:vt": XMLNS.vt
    });
    EXT_PROPS.forEach(function(f) {
        if (cp[f[1]] === undefined) return;
        var v;
        switch(f[2]){
            case "string":
                v = escapexml(String(cp[f[1]]));
                break;
            case "bool":
                v = cp[f[1]] ? "true" : "false";
                break;
        }
        if (v !== undefined) o[o.length] = W(f[0], v);
    });
    /* TODO: HeadingPairs, TitlesOfParts */ o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), {
        size: 2,
        baseType: "variant"
    }));
    o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function(s) {
        return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
    }).join(""), {
        size: cp.Worksheets,
        baseType: "lpstr"
    }));
    if (o.length > 2) {
        o[o.length] = "</Properties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 15.2.12.2 Custom File Properties Part */ var custregex = /<[^>]+>[^<]*/g;
function parse_cust_props(data /*:string*/ , opts) {
    var p = {}, name = "";
    var m = data.match(custregex);
    if (m) for(var i = 0; i != m.length; ++i){
        var x = m[i], y = parsexmltag(x);
        switch(y[0]){
            case "<?xml":
                break;
            case "<Properties":
                break;
            case "<property":
                name = unescapexml(y.name);
                break;
            case "</property>":
                name = null;
                break;
            default:
                if (x.indexOf("<vt:") === 0) {
                    var toks = x.split(">");
                    var type = toks[0].slice(4), text = toks[1];
                    /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */ switch(type){
                        case "lpstr":
                        case "bstr":
                        case "lpwstr":
                            p[name] = unescapexml(text);
                            break;
                        case "bool":
                            p[name] = parsexmlbool(text);
                            break;
                        case "i1":
                        case "i2":
                        case "i4":
                        case "i8":
                        case "int":
                        case "uint":
                            p[name] = parseInt(text, 10);
                            break;
                        case "r4":
                        case "r8":
                        case "decimal":
                            p[name] = parseFloat(text);
                            break;
                        case "filetime":
                        case "date":
                            p[name] = parseDate(text);
                            break;
                        case "cy":
                        case "error":
                            p[name] = unescapexml(text);
                            break;
                        default:
                            if (type.slice(-1) == "/") break;
                            if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x, type, toks);
                    }
                } else if (x.slice(0, 2) === "</") ;
                else if (opts.WTF) throw new Error(x);
        }
    }
    return p;
}
function write_cust_props(cp /*::, opts*/ ) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("Properties", null, {
            "xmlns": XMLNS.CUST_PROPS,
            "xmlns:vt": XMLNS.vt
        })
    ];
    if (!cp) return o.join("");
    var pid = 1;
    keys(cp).forEach(function custprop(k) {
        ++pid;
        o[o.length] = writextag("property", write_vt(cp[k], true), {
            "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
            "pid": pid,
            "name": escapexml(k)
        });
    });
    if (o.length > 2) {
        o[o.length] = "</Properties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* Common Name -> XLML Name */ var XLMLDocPropsMap = {
    Title: "Title",
    Subject: "Subject",
    Author: "Author",
    Keywords: "Keywords",
    Comments: "Description",
    LastAuthor: "LastAuthor",
    RevNumber: "Revision",
    Application: "AppName",
    /* TotalTime: 'TotalTime', */ LastPrinted: "LastPrinted",
    CreatedDate: "Created",
    ModifiedDate: "LastSaved",
    /* Pages */ /* Words */ /* Characters */ Category: "Category",
    /* PresentationFormat */ Manager: "Manager",
    Company: "Company",
    /* Guid */ /* HyperlinkBase */ /* Bytes */ /* Lines */ /* Paragraphs */ /* CharactersWithSpaces */ AppVersion: "Version",
    ContentStatus: "ContentStatus",
    /* NOTE: missing from schema */ Identifier: "Identifier",
    /* NOTE: missing from schema */ Language: "Language" /* NOTE: missing from schema */ 
};
var evert_XLMLDPM;
function xlml_set_prop(Props, tag /*:string*/ , val) {
    if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
    tag = evert_XLMLDPM[tag] || tag;
    Props[tag] = val;
}
function xlml_write_docprops(Props, opts) {
    var o /*:Array<string>*/  = [];
    keys(XLMLDocPropsMap).map(function(m) {
        for(var i = 0; i < CORE_PROPS.length; ++i)if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];
        for(i = 0; i < EXT_PROPS.length; ++i)if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];
        throw m;
    }).forEach(function(p) {
        if (Props[p[1]] == null) return;
        var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
        switch(p[2]){
            case "date":
                m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
                break;
        }
        if (typeof m == "number") m = String(m);
        else if (m === true || m === false) m = m ? "1" : "0";
        else if (m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/, "");
        o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
    });
    return writextag("DocumentProperties", o.join(""), {
        xmlns: XLMLNS.o
    });
}
function xlml_write_custprops(Props, Custprops /*::, opts*/ ) {
    var BLACKLIST = [
        "Worksheets",
        "SheetNames"
    ];
    var T = "CustomDocumentProperties";
    var o /*:Array<string>*/  = [];
    if (Props) keys(Props).forEach(function(k) {
        /*:: if(!Props) return; */ if (!Object.prototype.hasOwnProperty.call(Props, k)) return;
        for(var i = 0; i < CORE_PROPS.length; ++i)if (k == CORE_PROPS[i][1]) return;
        for(i = 0; i < EXT_PROPS.length; ++i)if (k == EXT_PROPS[i][1]) return;
        for(i = 0; i < BLACKLIST.length; ++i)if (k == BLACKLIST[i]) return;
        var m = Props[k];
        var t = "string";
        if (typeof m == "number") {
            t = "float";
            m = String(m);
        } else if (m === true || m === false) {
            t = "boolean";
            m = m ? "1" : "0";
        } else m = String(m);
        o.push(writextag(escapexmltag(k), m, {
            "dt:dt": t
        }));
    });
    if (Custprops) keys(Custprops).forEach(function(k) {
        /*:: if(!Custprops) return; */ if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
        if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
        var m = Custprops[k];
        var t = "string";
        if (typeof m == "number") {
            t = "float";
            m = String(m);
        } else if (m === true || m === false) {
            t = "boolean";
            m = m ? "1" : "0";
        } else if (m instanceof Date) {
            t = "dateTime.tz";
            m = m.toISOString();
        } else m = String(m);
        o.push(writextag(escapexmltag(k), m, {
            "dt:dt": t
        }));
    });
    return "<" + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + "</" + T + ">";
}
/* [MS-DTYP] 2.3.3 FILETIME */ /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */ /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */ function parse_FILETIME(blob) {
    var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\.000/, "");
}
function write_FILETIME(time /*:string|Date*/ ) {
    var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
    var t = date.getTime() / 1000 + 11644473600;
    var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);
    l *= 1e7;
    h *= 1e7;
    var w = l / Math.pow(2, 32) | 0;
    if (w > 0) {
        l = l % Math.pow(2, 32);
        h += w;
    }
    var o = new_buf(8);
    o.write_shift(4, l);
    o.write_shift(4, h);
    return o;
}
/* [MS-OSHARED] 2.3.3.1.4 Lpstr */ function parse_lpstr(blob, type, pad /*:?number*/ ) {
    var start = blob.l;
    var str = blob.read_shift(0, "lpstr-cp");
    if (pad) while(blob.l - start & 3)++blob.l;
    return str;
}
/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */ function parse_lpwstr(blob, type, pad) {
    var str = blob.read_shift(0, "lpwstr");
    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;
    return str;
}
/* [MS-OSHARED] 2.3.3.1.11 VtString */ /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */ function parse_VtStringBase(blob, stringType, pad) {
    if (stringType === 0x1F /*VT_LPWSTR*/ ) return parse_lpwstr(blob);
    return parse_lpstr(blob, stringType, pad);
}
function parse_VtString(blob, t /*:number*/ , pad /*:?boolean*/ ) {
    return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
}
function parse_VtUnalignedString(blob, t /*:number*/ ) {
    if (!t) throw new Error("VtUnalignedString must have positive length");
    return parse_VtStringBase(blob, t, 0);
}
/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */ function parse_VtVecLpwstrValue(blob) /*:Array<string>*/ {
    var length = blob.read_shift(4);
    var ret /*:Array<string>*/  = [];
    for(var i = 0; i != length; ++i){
        var start = blob.l;
        ret[i] = blob.read_shift(0, "lpwstr").replace(chr0, "");
        if (blob.l - start & 0x02) blob.l += 2;
    }
    return ret;
}
/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */ function parse_VtVecUnalignedLpstrValue(blob) /*:Array<string>*/ {
    var length = blob.read_shift(4);
    var ret /*:Array<string>*/  = [];
    for(var i = 0; i != length; ++i)ret[i] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
    return ret;
}
/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */ function parse_VtHeadingPair(blob) {
    var start = blob.l;
    var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    if (blob[blob.l] == 0x00 && blob[blob.l + 1] == 0x00 && blob.l - start & 0x02) blob.l += 2;
    var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    return [
        headingString,
        headerParts
    ];
}
/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */ function parse_VtVecHeadingPairValue(blob) {
    var cElements = blob.read_shift(4);
    var out = [];
    for(var i = 0; i < cElements / 2; ++i)out.push(parse_VtHeadingPair(blob));
    return out;
}
/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */ function parse_dictionary(blob, CodePage) {
    var cnt = blob.read_shift(4);
    var dict /*:{[number]:string}*/  = {} /*:any*/ ;
    for(var j = 0; j != cnt; ++j){
        var pid = blob.read_shift(4);
        var len = blob.read_shift(4);
        dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
        if (CodePage === 0x4B0 && len % 2) blob.l += 2;
    }
    if (blob.l & 3) blob.l = blob.l >> 3 << 2;
    return dict;
}
/* [MS-OLEPS] 2.9 BLOB */ function parse_BLOB(blob) {
    var size = blob.read_shift(4);
    var bytes = blob.slice(blob.l, blob.l + size);
    blob.l += size;
    if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;
    return bytes;
}
/* [MS-OLEPS] 2.11 ClipboardData */ function parse_ClipboardData(blob) {
    // TODO
    var o = {};
    o.Size = blob.read_shift(4);
    //o.Format = blob.read_shift(4);
    blob.l += o.Size + 3 - (o.Size - 1) % 4;
    return o;
}
/* [MS-OLEPS] 2.15 TypedPropertyValue */ function parse_TypedPropertyValue(blob, type /*:number*/ , _opts) /*:any*/ {
    var t = blob.read_shift(2), ret, opts = _opts || {};
    blob.l += 2;
    if (type !== VT_VARIANT) {
        if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error("Expected type " + type + " saw " + t);
    }
    switch(type === VT_VARIANT ? t : type){
        case 0x02 /*VT_I2*/ :
            ret = blob.read_shift(2, "i");
            if (!opts.raw) blob.l += 2;
            return ret;
        case 0x03 /*VT_I4*/ :
            ret = blob.read_shift(4, "i");
            return ret;
        case 0x0B /*VT_BOOL*/ :
            return blob.read_shift(4) !== 0x0;
        case 0x13 /*VT_UI4*/ :
            ret = blob.read_shift(4);
            return ret;
        case 0x1E /*VT_LPSTR*/ :
            return parse_lpstr(blob, t, 4).replace(chr0, "");
        case 0x1F /*VT_LPWSTR*/ :
            return parse_lpwstr(blob);
        case 0x40 /*VT_FILETIME*/ :
            return parse_FILETIME(blob);
        case 0x41 /*VT_BLOB*/ :
            return parse_BLOB(blob);
        case 0x47 /*VT_CF*/ :
            return parse_ClipboardData(blob);
        case 0x50 /*VT_STRING*/ :
            return parse_VtString(blob, t, !opts.raw).replace(chr0, "");
        case 0x51 /*VT_USTR*/ :
            return parse_VtUnalignedString(blob, t /*, 4*/ ).replace(chr0, "");
        case 0x100C /*VT_VECTOR|VT_VARIANT*/ :
            return parse_VtVecHeadingPairValue(blob);
        case 0x101E /*VT_VECTOR|VT_LPSTR*/ :
        case 0x101F /*VT_VECTOR|VT_LPWSTR*/ :
            return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
        default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
    }
}
function write_TypedPropertyValue(type /*:number*/ , value) {
    var o = new_buf(4), p = new_buf(4);
    o.write_shift(4, type == 0x50 ? 0x1F : type);
    switch(type){
        case 0x03 /*VT_I4*/ :
            p.write_shift(-4, value);
            break;
        case 0x05 /*VT_I4*/ :
            p = new_buf(8);
            p.write_shift(8, value, "f");
            break;
        case 0x0B /*VT_BOOL*/ :
            p.write_shift(4, value ? 0x01 : 0x00);
            break;
        case 0x40 /*VT_FILETIME*/ :
            /*:: if(typeof value !== "string" && !(value instanceof Date)) throw "unreachable"; */ p = write_FILETIME(value);
            break;
        case 0x1F /*VT_LPWSTR*/ :
        case 0x50 /*VT_STRING*/ :
            /*:: if(typeof value !== "string") throw "unreachable"; */ p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            p.write_shift(4, value.length + 1);
            p.write_shift(0, value, "dbcs");
            while(p.l != p.length)p.write_shift(1, 0);
            break;
        default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
    }
    return bconcat([
        o,
        p
    ]);
}
/* [MS-OLEPS] 2.20 PropertySet */ function parse_PropertySet(blob, PIDSI) {
    var start_addr = blob.l;
    var size = blob.read_shift(4);
    var NumProps = blob.read_shift(4);
    var Props = [], i = 0;
    var CodePage = 0;
    var Dictionary = -1, DictObj /*:{[number]:string}*/  = {} /*:any*/ ;
    for(i = 0; i != NumProps; ++i){
        var PropID = blob.read_shift(4);
        var Offset = blob.read_shift(4);
        Props[i] = [
            PropID,
            Offset + start_addr
        ];
    }
    Props.sort(function(x, y) {
        return x[1] - y[1];
    });
    var PropH = {};
    for(i = 0; i != NumProps; ++i){
        if (blob.l !== Props[i][1]) {
            var fail = true;
            if (i > 0 && PIDSI) switch(PIDSI[Props[i - 1][0]].t){
                case 0x02 /*VT_I2*/ :
                    if (blob.l + 2 === Props[i][1]) {
                        blob.l += 2;
                        fail = false;
                    }
                    break;
                case 0x50 /*VT_STRING*/ :
                    if (blob.l <= Props[i][1]) {
                        blob.l = Props[i][1];
                        fail = false;
                    }
                    break;
                case 0x100C /*VT_VECTOR|VT_VARIANT*/ :
                    if (blob.l <= Props[i][1]) {
                        blob.l = Props[i][1];
                        fail = false;
                    }
                    break;
            }
            if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {
                fail = false;
                blob.l = Props[i][1];
            }
            if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob.l + " :" + i);
        }
        if (PIDSI) {
            var piddsi = PIDSI[Props[i][0]];
            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {
                raw: true
            });
            if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
            if (piddsi.n == "CodePage") switch(PropH[piddsi.n]){
                case 0:
                    PropH[piddsi.n] = 1252;
                /* falls through */ case 874:
                case 932:
                case 936:
                case 949:
                case 950:
                case 1250:
                case 1251:
                case 1253:
                case 1254:
                case 1255:
                case 1256:
                case 1257:
                case 1258:
                case 10000:
                case 1200:
                case 1201:
                case 1252:
                case 65000:
                case -536:
                case 65001:
                case -535:
                    set_cp(CodePage = PropH[piddsi.n] >>> 0 & 0xFFFF);
                    break;
                default:
                    throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
            }
        } else {
            if (Props[i][0] === 0x1) {
                CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
                set_cp(CodePage);
                if (Dictionary !== -1) {
                    var oldpos = blob.l;
                    blob.l = Props[Dictionary][1];
                    DictObj = parse_dictionary(blob, CodePage);
                    blob.l = oldpos;
                }
            } else if (Props[i][0] === 0) {
                if (CodePage === 0) {
                    Dictionary = i;
                    blob.l = Props[i + 1][1];
                    continue;
                }
                DictObj = parse_dictionary(blob, CodePage);
            } else {
                var name = DictObj[Props[i][0]];
                var val;
                /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */ switch(blob[blob.l]){
                    case 0x41 /*VT_BLOB*/ :
                        blob.l += 4;
                        val = parse_BLOB(blob);
                        break;
                    case 0x1E /*VT_LPSTR*/ :
                        blob.l += 4;
                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                        break;
                    case 0x1F /*VT_LPWSTR*/ :
                        blob.l += 4;
                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                        break;
                    case 0x03 /*VT_I4*/ :
                        blob.l += 4;
                        val = blob.read_shift(4, "i");
                        break;
                    case 0x13 /*VT_UI4*/ :
                        blob.l += 4;
                        val = blob.read_shift(4);
                        break;
                    case 0x05 /*VT_R8*/ :
                        blob.l += 4;
                        val = blob.read_shift(8, "f");
                        break;
                    case 0x0B /*VT_BOOL*/ :
                        blob.l += 4;
                        val = parsebool(blob, 4);
                        break;
                    case 0x40 /*VT_FILETIME*/ :
                        blob.l += 4;
                        val = parseDate(parse_FILETIME(blob));
                        break;
                    default:
                        throw new Error("unparsed value: " + blob[blob.l]);
                }
                PropH[name] = val;
            }
        }
    }
    blob.l = start_addr + size; /* step ahead to skip padding */ 
    return PropH;
}
var XLSPSSkip = [
    "CodePage",
    "Thumbnail",
    "_PID_LINKBASE",
    "_PID_HLINKS",
    "SystemIdentifier",
    "FMTID"
]; //.concat(PseudoPropsPairs);
function guess_property_type(val /*:any*/ ) /*:number*/ {
    switch(typeof val){
        case "boolean":
            return 0x0B;
        case "number":
            return (val | 0) == val ? 0x03 : 0x05;
        case "string":
            return 0x1F;
        case "object":
            if (val instanceof Date) return 0x40;
            break;
    }
    return -1;
}
function write_PropertySet(entries, RE, PIDSI) {
    var hdr = new_buf(8), piao = [], prop = [];
    var sz = 8, i = 0;
    var pr = new_buf(8), pio = new_buf(8);
    pr.write_shift(4, 0x0002);
    pr.write_shift(4, 0x04B0);
    pio.write_shift(4, 0x0001);
    prop.push(pr);
    piao.push(pio);
    sz += 8 + pr.length;
    if (!RE) {
        pio = new_buf(8);
        pio.write_shift(4, 0);
        piao.unshift(pio);
        var bufs = [
            new_buf(4)
        ];
        bufs[0].write_shift(4, entries.length);
        for(i = 0; i < entries.length; ++i){
            var value = entries[i][0];
            pr = new_buf(8 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            pr.write_shift(4, i + 2);
            pr.write_shift(4, value.length + 1);
            pr.write_shift(0, value, "dbcs");
            while(pr.l != pr.length)pr.write_shift(1, 0);
            bufs.push(pr);
        }
        pr = bconcat(bufs);
        prop.unshift(pr);
        sz += 8 + pr.length;
    }
    for(i = 0; i < entries.length; ++i){
        if (RE && !RE[entries[i][0]]) continue;
        if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;
        if (entries[i][1] == null) continue;
        var val = entries[i][1], idx = 0;
        if (RE) {
            idx = +RE[entries[i][0]];
            var pinfo = PIDSI /*:: || {}*/ [idx] /*:: || {} */ ;
            if (pinfo.p == "version" && typeof val == "string") {
                /*:: if(typeof val !== "string") throw "unreachable"; */ var arr = val.split(".");
                val = (+arr[0] << 16) + (+arr[1] || 0);
            }
            pr = write_TypedPropertyValue(pinfo.t, val);
        } else {
            var T = guess_property_type(val);
            if (T == -1) {
                T = 0x1F;
                val = String(val);
            }
            pr = write_TypedPropertyValue(T, val);
        }
        prop.push(pr);
        pio = new_buf(8);
        pio.write_shift(4, !RE ? 2 + i : idx);
        piao.push(pio);
        sz += 8 + pr.length;
    }
    var w = 8 * (prop.length + 1);
    for(i = 0; i < prop.length; ++i){
        piao[i].write_shift(4, w);
        w += prop[i].length;
    }
    hdr.write_shift(4, sz);
    hdr.write_shift(4, prop.length);
    return bconcat([
        hdr
    ].concat(piao).concat(prop));
}
/* [MS-OLEPS] 2.21 PropertySetStream */ function parse_PropertySetStream(file, PIDSI, clsid) {
    var blob = file.content;
    if (!blob) return {} /*:any*/ ;
    prep_blob(blob, 0);
    var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
    blob.chk("feff", "Byte Order: ");
    /*var vers = */ blob.read_shift(2); // TODO: check version
    var SystemIdentifier = blob.read_shift(4);
    var CLSID = blob.read_shift(16);
    if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
    NumSets = blob.read_shift(4);
    if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
    FMTID0 = blob.read_shift(16);
    Offset0 = blob.read_shift(4);
    if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
    else if (NumSets === 2) {
        FMTID1 = blob.read_shift(16);
        Offset1 = blob.read_shift(4);
    }
    var PSet0 = parse_PropertySet(blob, PIDSI);
    var rval = {
        SystemIdentifier: SystemIdentifier
    } /*:any*/ ;
    for(var y in PSet0)rval[y] = PSet0[y];
    //rval.blob = blob;
    rval.FMTID = FMTID0;
    //rval.PSet0 = PSet0;
    if (NumSets === 1) return rval;
    if (Offset1 - blob.l == 2) blob.l += 2;
    if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    var PSet1;
    try {
        PSet1 = parse_PropertySet(blob, null);
    } catch (e) {}
    for(y in PSet1)rval[y] = PSet1[y];
    rval.FMTID = [
        FMTID0,
        FMTID1
    ]; // TODO: verify FMTID0/1
    return rval;
}
function write_PropertySetStream(entries, clsid, RE, PIDSI /*:{[key:string|number]:any}*/ , entries2 /*:?any*/ , clsid2 /*:?any*/ ) {
    var hdr = new_buf(entries2 ? 68 : 48);
    var bufs = [
        hdr
    ];
    hdr.write_shift(2, 0xFFFE);
    hdr.write_shift(2, 0x0000); /* TODO: type 1 props */ 
    hdr.write_shift(4, 0x32363237);
    hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
    hdr.write_shift(4, entries2 ? 2 : 1);
    hdr.write_shift(16, clsid, "hex");
    hdr.write_shift(4, entries2 ? 68 : 48);
    var ps0 = write_PropertySet(entries, RE, PIDSI);
    bufs.push(ps0);
    if (entries2) {
        var ps1 = write_PropertySet(entries2, null, null);
        hdr.write_shift(16, clsid2, "hex");
        hdr.write_shift(4, 68 + ps0.length);
        bufs.push(ps1);
    }
    return bconcat(bufs);
}
function parsenoop2(blob, length) {
    blob.read_shift(length);
    return null;
}
function writezeroes(n, o) {
    if (!o) o = new_buf(n);
    for(var j = 0; j < n; ++j)o.write_shift(1, 0);
    return o;
}
function parslurp(blob, length, cb) {
    var arr = [], target = blob.l + length;
    while(blob.l < target)arr.push(cb(blob, target - blob.l));
    if (target !== blob.l) throw new Error("Slurp error");
    return arr;
}
function parsebool(blob, length /*:number*/ ) {
    return blob.read_shift(length) === 0x1;
}
function writebool(v /*:any*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, +!!v);
    return o;
}
function parseuint16(blob /*::, length:?number, opts:?any*/ ) {
    return blob.read_shift(2, "u");
}
function writeuint16(v /*:number*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, v);
    return o;
}
function parseuint16a(blob, length /*:: :?number, opts:?any*/ ) {
    return parslurp(blob, length, parseuint16);
}
/* --- 2.5 Structures --- */ /* [MS-XLS] 2.5.10 Bes (boolean or error) */ function parse_Bes(blob /*::, length*/ ) {
    var v = blob.read_shift(1), t = blob.read_shift(1);
    return t === 0x01 ? v : v === 0x01;
}
function write_Bes(v, t /*:string*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(1, t == "e" ? +v : +!!v);
    o.write_shift(1, t == "e" ? 1 : 0);
    return o;
}
/* [MS-XLS] 2.5.240 ShortXLUnicodeString */ function parse_ShortXLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    var encoding = "sbcs-cont";
    var cp = current_codepage;
    if (opts && opts.biff >= 8) current_codepage = 1200;
    if (!opts || opts.biff == 8) {
        var fHighByte = blob.read_shift(1);
        if (fHighByte) encoding = "dbcs-cont";
    } else if (opts.biff == 12) encoding = "wstr";
    if (opts.biff >= 2 && opts.biff <= 5) encoding = "cpstr";
    var o = cch ? blob.read_shift(cch, encoding) : "";
    current_codepage = cp;
    return o;
}
/* 2.5.293 XLUnicodeRichExtendedString */ function parse_XLUnicodeRichExtendedString(blob) {
    var cp = current_codepage;
    current_codepage = 1200;
    var cch = blob.read_shift(2), flags = blob.read_shift(1);
    var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;
    var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
    var cRun = 0, cbExtRst;
    var z = {};
    if (fRichSt) cRun = blob.read_shift(2);
    if (fExtSt) cbExtRst = blob.read_shift(4);
    var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
    var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    if (fRichSt) blob.l += 4 * cRun; //TODO: parse this
    if (fExtSt) blob.l += cbExtRst; //TODO: parse this
    z.t = msg;
    if (!fRichSt) {
        z.raw = "<t>" + z.t + "</t>";
        z.r = z.t;
    }
    current_codepage = cp;
    return z;
}
function write_XLUnicodeRichExtendedString(xlstr /*:: :XLString, opts*/ ) {
    var str = xlstr.t || "", nfmts = 1;
    var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
    hdr.write_shift(2, str.length);
    hdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);
    if (nfmts > 1) hdr.write_shift(2, nfmts);
    var otext = new_buf(2 * str.length);
    otext.write_shift(2 * str.length, str, "utf16le");
    var out = [
        hdr,
        otext
    ];
    return bconcat(out);
}
/* 2.5.296 XLUnicodeStringNoCch */ function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    var retval;
    if (opts) {
        if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, "cpstr");
        if (opts.biff >= 12) return blob.read_shift(cch, "dbcs-cont");
    }
    var fHighByte = blob.read_shift(1);
    if (fHighByte === 0) retval = blob.read_shift(cch, "sbcs-cont");
    else retval = blob.read_shift(cch, "dbcs-cont");
    return retval;
}
/* 2.5.294 XLUnicodeString */ function parse_XLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return parse_XLUnicodeStringNoCch(blob, cch, opts);
}
/* BIFF5 override */ function parse_XLUnicodeString2(blob, length, opts) {
    if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
    var cch = blob.read_shift(1);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
}
/* TODO: BIFF5 and lower, codepage awareness */ function write_XLUnicodeString(str, opts, o) {
    if (!o) o = new_buf(3 + 2 * str.length);
    o.write_shift(2, str.length);
    o.write_shift(1, 1);
    o.write_shift(31, str, "utf16le");
    return o;
}
/* [MS-XLS] 2.5.61 ControlInfo */ function parse_ControlInfo(blob /*::, length, opts*/ ) {
    var flags = blob.read_shift(1);
    blob.l++;
    var accel = blob.read_shift(2);
    blob.l += 2;
    return [
        flags,
        accel
    ];
}
/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */ function parse_URLMoniker(blob /*::, length, opts*/ ) {
    var len = blob.read_shift(4), start = blob.l;
    var extra = false;
    if (len > 24) {
        /* look ahead */ blob.l += len - 24;
        if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
        blob.l = start;
    }
    var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
    if (extra) blob.l += 24;
    return url;
}
/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */ function parse_FileMoniker(blob /*::, length*/ ) {
    var cAnti = blob.read_shift(2);
    var preamble = "";
    while(cAnti-- > 0)preamble += "../";
    var ansiPath = blob.read_shift(0, "lpstr-ansi");
    blob.l += 2; //var endServer = blob.read_shift(2);
    if (blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
    var sz = blob.read_shift(4);
    if (sz === 0) return preamble + ansiPath.replace(/\\/g, "/");
    var bytes = blob.read_shift(4);
    if (blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
    var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
    return preamble + unicodePath;
}
/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */ function parse_HyperlinkMoniker(blob, length) {
    var clsid = blob.read_shift(16);
    length -= 16;
    switch(clsid){
        case "e0c9ea79f9bace118c8200aa004ba90b":
            return parse_URLMoniker(blob, length);
        case "0303000000000000c000000000000046":
            return parse_FileMoniker(blob, length);
        default:
            throw new Error("Unsupported Moniker " + clsid);
    }
}
/* [MS-OSHARED] 2.3.7.9 HyperlinkString */ function parse_HyperlinkString(blob /*::, length*/ ) {
    var len = blob.read_shift(4);
    var o = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
    return o;
}
function write_HyperlinkString(str /*:string*/ , o) {
    if (!o) o = new_buf(6 + str.length * 2);
    o.write_shift(4, 1 + str.length);
    for(var i = 0; i < str.length; ++i)o.write_shift(2, str.charCodeAt(i));
    o.write_shift(2, 0);
    return o;
}
/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */ function parse_Hyperlink(blob, length) /*:Hyperlink*/ {
    var end = blob.l + length;
    var sVer = blob.read_shift(4);
    if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
    var flags = blob.read_shift(2);
    blob.l += 2;
    var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
    if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    if (flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0020) guid = blob.read_shift(16);
    if (flags & 0x0040) fileTime = parse_FILETIME(blob /*, 8*/ );
    blob.l = end;
    var target = targetFrameName || moniker || oleMoniker || "";
    if (target && Loc) target += "#" + Loc;
    if (!target) target = "#" + Loc;
    if (flags & 0x0002 && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
    var out = {
        Target: target
    } /*:any*/ ;
    if (guid) out.guid = guid;
    if (fileTime) out.time = fileTime;
    if (displayName) out.Tooltip = displayName;
    return out;
}
function write_Hyperlink(hl) {
    var out = new_buf(512), i = 0;
    var Target = hl.Target;
    if (Target.slice(0, 7) == "file://") Target = Target.slice(7);
    var hashidx = Target.indexOf("#");
    var F = hashidx > -1 ? 0x1f : 0x17;
    switch(Target.charAt(0)){
        case "#":
            F = 0x1c;
            break;
        case ".":
            F &= -3;
            break;
    }
    out.write_shift(4, 2);
    out.write_shift(4, F);
    var data = [
        8,
        6815827,
        6619237,
        4849780,
        83
    ];
    for(i = 0; i < data.length; ++i)out.write_shift(4, data[i]);
    if (F == 0x1C) {
        Target = Target.slice(1);
        write_HyperlinkString(Target, out);
    } else if (F & 0x02) {
        data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));
        var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
        out.write_shift(4, 2 * (Pretarget.length + 1));
        for(i = 0; i < Pretarget.length; ++i)out.write_shift(2, Pretarget.charCodeAt(i));
        out.write_shift(2, 0);
        if (F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
    } else {
        data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));
        var P = 0;
        while(Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\")++P;
        out.write_shift(2, P);
        out.write_shift(4, Target.length - 3 * P + 1);
        for(i = 0; i < Target.length - 3 * P; ++i)out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);
        out.write_shift(1, 0);
        out.write_shift(2, 0xFFFF);
        out.write_shift(2, 0xDEAD);
        for(i = 0; i < 6; ++i)out.write_shift(4, 0);
    }
    return out.slice(0, out.l);
}
/* 2.5.178 LongRGBA */ function parse_LongRGBA(blob /*::, length*/ ) {
    var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);
    return [
        r,
        g,
        b,
        a
    ];
}
/* 2.5.177 LongRGB */ function parse_LongRGB(blob, length) {
    var x = parse_LongRGBA(blob, length);
    x[3] = 0;
    return x;
}
/* [MS-XLS] 2.5.19 */ function parse_XLSCell(blob /*::, length*/ ) /*:Cell*/ {
    var rw = blob.read_shift(2); // 0-indexed
    var col = blob.read_shift(2);
    var ixfe = blob.read_shift(2);
    return {
        r: rw,
        c: col,
        ixfe: ixfe
    } /*:any*/ ;
}
function write_XLSCell(R /*:number*/ , C /*:number*/ , ixfe /*:?number*/ , o) {
    if (!o) o = new_buf(6);
    o.write_shift(2, R);
    o.write_shift(2, C);
    o.write_shift(2, ixfe || 0);
    return o;
}
/* [MS-XLS] 2.5.134 */ function parse_frtHeader(blob) {
    var rt = blob.read_shift(2);
    var flags = blob.read_shift(2); // TODO: parse these flags
    blob.l += 8;
    return {
        type: rt,
        flags: flags
    };
}
function parse_OptXLUnicodeString(blob, length, opts) {
    return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
}
/* [MS-XLS] 2.5.344 */ function parse_XTI(blob, length, opts) {
    var w = opts.biff > 8 ? 4 : 2;
    var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, "i"), itabLast = blob.read_shift(w, "i");
    return [
        iSupBook,
        itabFirst,
        itabLast
    ];
}
/* [MS-XLS] 2.5.218 */ function parse_RkRec(blob) {
    var ixfe = blob.read_shift(2);
    var RK = parse_RkNumber(blob);
    return [
        ixfe,
        RK
    ];
}
/* [MS-XLS] 2.5.1 */ function parse_AddinUdf(blob, length, opts) {
    blob.l += 4;
    length -= 4;
    var l = blob.l + length;
    var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    var cb = blob.read_shift(2);
    l -= blob.l;
    if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
    blob.l += cb;
    return udfName;
}
/* [MS-XLS] 2.5.209 TODO: Check sizes */ function parse_Ref8U(blob /*::, length*/ ) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(2);
    var colLast = blob.read_shift(2);
    return {
        s: {
            c: colFirst,
            r: rwFirst
        },
        e: {
            c: colLast,
            r: rwLast
        }
    };
}
function write_Ref8U(r /*:Range*/ , o) {
    if (!o) o = new_buf(8);
    o.write_shift(2, r.s.r);
    o.write_shift(2, r.e.r);
    o.write_shift(2, r.s.c);
    o.write_shift(2, r.e.c);
    return o;
}
/* [MS-XLS] 2.5.211 */ function parse_RefU(blob /*::, length*/ ) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(1);
    var colLast = blob.read_shift(1);
    return {
        s: {
            c: colFirst,
            r: rwFirst
        },
        e: {
            c: colLast,
            r: rwLast
        }
    };
}
/* [MS-XLS] 2.5.207 */ var parse_Ref = parse_RefU;
/* [MS-XLS] 2.5.143 */ function parse_FtCmo(blob /*::, length*/ ) {
    blob.l += 4;
    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var flags = blob.read_shift(2);
    blob.l += 12;
    return [
        id,
        ot,
        flags
    ];
}
/* [MS-XLS] 2.5.149 */ function parse_FtNts(blob) {
    var out = {};
    blob.l += 4;
    blob.l += 16; // GUID TODO
    out.fSharedNote = blob.read_shift(2);
    blob.l += 4;
    return out;
}
/* [MS-XLS] 2.5.142 */ function parse_FtCf(blob) {
    var out = {};
    blob.l += 4;
    blob.cf = blob.read_shift(2);
    return out;
}
/* [MS-XLS] 2.5.140 - 2.5.154 and friends */ function parse_FtSkip(blob) {
    blob.l += 2;
    blob.l += blob.read_shift(2);
}
var FtTab = {
    /*::[*/ 0x00: parse_FtSkip,
    /* FtEnd */ /*::[*/ 0x04: parse_FtSkip,
    /* FtMacro */ /*::[*/ 0x05: parse_FtSkip,
    /* FtButton */ /*::[*/ 0x06: parse_FtSkip,
    /* FtGmo */ /*::[*/ 0x07: parse_FtCf,
    /* FtCf */ /*::[*/ 0x08: parse_FtSkip,
    /* FtPioGrbit */ /*::[*/ 0x09: parse_FtSkip,
    /* FtPictFmla */ /*::[*/ 0x0A: parse_FtSkip,
    /* FtCbls */ /*::[*/ 0x0B: parse_FtSkip,
    /* FtRbo */ /*::[*/ 0x0C: parse_FtSkip,
    /* FtSbs */ /*::[*/ 0x0D: parse_FtNts,
    /* FtNts */ /*::[*/ 0x0E: parse_FtSkip,
    /* FtSbsFmla */ /*::[*/ 0x0F: parse_FtSkip,
    /* FtGboData */ /*::[*/ 0x10: parse_FtSkip,
    /* FtEdoData */ /*::[*/ 0x11: parse_FtSkip,
    /* FtRboData */ /*::[*/ 0x12: parse_FtSkip,
    /* FtCblsData */ /*::[*/ 0x13: parse_FtSkip,
    /* FtLbsData */ /*::[*/ 0x14: parse_FtSkip,
    /* FtCblsFmla */ /*::[*/ 0x15: parse_FtCmo
};
function parse_FtArray(blob, length /*::, ot*/ ) {
    var tgt = blob.l + length;
    var fts = [];
    while(blob.l < tgt){
        var ft = blob.read_shift(2);
        blob.l -= 2;
        try {
            fts.push(FtTab[ft](blob, tgt - blob.l));
        } catch (e) {
            blob.l = tgt;
            return fts;
        }
    }
    if (blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
    return fts;
}
/* --- 2.4 Records --- */ /* [MS-XLS] 2.4.21 */ function parse_BOF(blob, length) {
    var o = {
        BIFFVer: 0,
        dt: 0
    };
    o.BIFFVer = blob.read_shift(2);
    length -= 2;
    if (length >= 2) {
        o.dt = blob.read_shift(2);
        blob.l -= 2;
    }
    switch(o.BIFFVer){
        case 0x0600:
        /* BIFF8 */ case 0x0500:
        /* BIFF5 */ case 0x0400:
        /* BIFF4 */ case 0x0300:
        /* BIFF3 */ case 0x0200:
        /* BIFF2 */ case 0x0002:
        case 0x0007:
            break;
        default:
            if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
    }
    blob.read_shift(length);
    return o;
}
function write_BOF(wb /*:Workbook*/ , t /*:number*/ , o) {
    var h = 0x0600, w = 16;
    switch(o.bookType){
        case "biff8":
            break;
        case "biff5":
            h = 0x0500;
            w = 8;
            break;
        case "biff4":
            h = 0x0004;
            w = 6;
            break;
        case "biff3":
            h = 0x0003;
            w = 6;
            break;
        case "biff2":
            h = 0x0002;
            w = 4;
            break;
        case "xla":
            break;
        default:
            throw new Error("unsupported BIFF version");
    }
    var out = new_buf(w);
    out.write_shift(2, h);
    out.write_shift(2, t);
    if (w > 4) out.write_shift(2, 0x7262);
    if (w > 6) out.write_shift(2, 0x07CD);
    if (w > 8) {
        out.write_shift(2, 0xC009);
        out.write_shift(2, 0x0001);
        out.write_shift(2, 0x0706);
        out.write_shift(2, 0x0000);
    }
    return out;
}
/* [MS-XLS] 2.4.146 */ function parse_InterfaceHdr(blob, length) {
    if (length === 0) return 0x04b0;
    blob.read_shift(2);
    return 0x04b0;
}
/* [MS-XLS] 2.4.349 */ function parse_WriteAccess(blob, length, opts) {
    if (opts.enc) {
        blob.l += length;
        return "";
    }
    var l = blob.l;
    // TODO: make sure XLUnicodeString doesnt overrun
    var UserName = parse_XLUnicodeString2(blob, 0, opts);
    blob.read_shift(length + l - blob.l);
    return UserName;
}
function write_WriteAccess(s /*:string*/ , opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(b8 ? 112 : 54);
    o.write_shift(opts.biff == 8 ? 2 : 1, 7);
    if (b8) o.write_shift(1, 0);
    o.write_shift(4, 0x33336853);
    o.write_shift(4, 0x00534A74 | (b8 ? 0 : 0x20000000));
    while(o.l < o.length)o.write_shift(1, b8 ? 0 : 32);
    return o;
}
/* [MS-XLS] 2.4.351 */ function parse_WsBool(blob, length, opts) {
    var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    return {
        fDialog: flags & 0x10,
        fBelow: flags & 0x40,
        fRight: flags & 0x80
    };
}
/* [MS-XLS] 2.4.28 */ function parse_BoundSheet8(blob, length, opts) {
    var pos = blob.read_shift(4);
    var hidden = blob.read_shift(1) & 0x03;
    var dt = blob.read_shift(1);
    switch(dt){
        case 0:
            dt = "Worksheet";
            break;
        case 1:
            dt = "Macrosheet";
            break;
        case 2:
            dt = "Chartsheet";
            break;
        case 6:
            dt = "VBAModule";
            break;
    }
    var name = parse_ShortXLUnicodeString(blob, 0, opts);
    if (name.length === 0) name = "Sheet1";
    return {
        pos: pos,
        hs: hidden,
        dt: dt,
        name: name
    };
}
function write_BoundSheet8(data, opts) {
    var w = !opts || opts.biff >= 8 ? 2 : 1;
    var o = new_buf(8 + w * data.name.length);
    o.write_shift(4, data.pos);
    o.write_shift(1, data.hs || 0);
    o.write_shift(1, data.dt);
    o.write_shift(1, data.name.length);
    if (opts.biff >= 8) o.write_shift(1, 1);
    o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
    var out = o.slice(0, o.l);
    out.l = o.l;
    return out;
}
/* [MS-XLS] 2.4.265 TODO */ function parse_SST(blob, length) /*:SST*/ {
    var end = blob.l + length;
    var cnt = blob.read_shift(4);
    var ucnt = blob.read_shift(4);
    var strs /*:SST*/  = [];
    for(var i = 0; i != ucnt && blob.l < end; ++i)strs.push(parse_XLUnicodeRichExtendedString(blob));
    strs.Count = cnt;
    strs.Unique = ucnt;
    return strs;
}
function write_SST(sst, opts) {
    var header = new_buf(8);
    header.write_shift(4, sst.Count);
    header.write_shift(4, sst.Unique);
    var strs = [];
    for(var j = 0; j < sst.length; ++j)strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);
    var o = bconcat([
        header
    ].concat(strs));
    /*::(*/ o /*:: :any)*/ .parts = [
        header.length
    ].concat(strs.map(function(str) {
        return str.length;
    }));
    return o;
}
/* [MS-XLS] 2.4.107 */ function parse_ExtSST(blob, length) {
    var extsst = {};
    extsst.dsst = blob.read_shift(2);
    blob.l += length - 2;
    return extsst;
}
/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */ function parse_Row(blob) {
    var z = {} /*:any*/ ;
    z.r = blob.read_shift(2);
    z.c = blob.read_shift(2);
    z.cnt = blob.read_shift(2) - z.c;
    var miyRw = blob.read_shift(2);
    blob.l += 4; // reserved(2), unused(2)
    var flags = blob.read_shift(1); // various flags
    blob.l += 3; // reserved(8), ixfe(12), flags(4)
    if (flags & 0x07) z.level = flags & 0x07;
    // collapsed: flags & 0x10
    if (flags & 0x20) z.hidden = true;
    if (flags & 0x40) z.hpt = miyRw / 20;
    return z;
}
/* [MS-XLS] 2.4.125 */ function parse_ForceFullCalculation(blob) {
    var header = parse_frtHeader(blob);
    if (header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
    var fullcalc = blob.read_shift(4);
    return fullcalc !== 0x0;
}
/* [MS-XLS] 2.4.215 rt */ function parse_RecalcId(blob) {
    blob.read_shift(2);
    return blob.read_shift(4);
}
/* [MS-XLS] 2.4.87 */ function parse_DefaultRowHeight(blob, length, opts) {
    var f = 0;
    if (!(opts && opts.biff == 2)) f = blob.read_shift(2);
    var miyRw = blob.read_shift(2);
    if (opts && opts.biff == 2) {
        f = 1 - (miyRw >> 15);
        miyRw &= 0x7fff;
    }
    var fl = {
        Unsynced: f & 1,
        DyZero: (f & 2) >> 1,
        ExAsc: (f & 4) >> 2,
        ExDsc: (f & 8) >> 3
    };
    return [
        fl,
        miyRw
    ];
}
/* [MS-XLS] 2.4.345 TODO */ function parse_Window1(blob) {
    var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
    var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
    var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
    return {
        Pos: [
            xWn,
            yWn
        ],
        Dim: [
            dxWn,
            dyWn
        ],
        Flags: flags,
        CurTab: iTabCur,
        FirstTab: iTabFirst,
        Selected: ctabSel,
        TabRatio: wTabRatio
    };
}
function write_Window1() {
    var o = new_buf(18);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0x7260);
    o.write_shift(2, 0x44c0);
    o.write_shift(2, 0x38);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 1);
    o.write_shift(2, 0x01f4);
    return o;
}
/* [MS-XLS] 2.4.346 TODO */ function parse_Window2(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff < 5) return {};
    var f = blob.read_shift(2);
    return {
        RTL: f & 0x40
    };
}
function write_Window2(view) {
    var o = new_buf(18), f = 0x6b6;
    if (view && view.RTL) f |= 0x40;
    o.write_shift(2, f);
    o.write_shift(4, 0);
    o.write_shift(4, 64);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
}
/* [MS-XLS] 2.4.189 TODO */ function parse_Pane() {}
/* [MS-XLS] 2.4.122 TODO */ function parse_Font(blob, length, opts) {
    var o /*:any*/  = {
        dyHeight: blob.read_shift(2),
        fl: blob.read_shift(2)
    };
    switch(opts && opts.biff || 8){
        case 2:
            break;
        case 3:
        case 4:
            blob.l += 2;
            break;
        default:
            blob.l += 10;
            break;
    }
    o.name = parse_ShortXLUnicodeString(blob, 0, opts);
    return o;
}
function write_Font(data, opts) {
    var name = data.name || "Arial";
    var b5 = opts && opts.biff == 5, w = b5 ? 15 + name.length : 16 + 2 * name.length;
    var o = new_buf(w);
    o.write_shift(2, (data.sz || 12) * 20);
    o.write_shift(4, 0);
    o.write_shift(2, 400);
    o.write_shift(4, 0);
    o.write_shift(2, 0);
    o.write_shift(1, name.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
    return o;
}
/* [MS-XLS] 2.4.149 */ function parse_LabelSst(blob) {
    var cell = parse_XLSCell(blob);
    cell.isst = blob.read_shift(4);
    return cell;
}
function write_LabelSst(R /*:number*/ , C /*:number*/ , v /*:number*/ , os /*:number*/  /*::, opts*/ ) {
    var o = new_buf(10);
    write_XLSCell(R, C, os, o);
    o.write_shift(4, v);
    return o;
}
/* [MS-XLS] 2.4.148 */ function parse_Label(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2) opts.biff = 5;
    var target = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) blob.l++;
    var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    cell.val = str;
    return cell;
}
function write_Label(R /*:number*/ , C /*:number*/ , v /*:string*/ , os /*:number*/ , opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(8 + +b8 + (1 + b8) * v.length);
    write_XLSCell(R, C, os, o);
    o.write_shift(2, v.length);
    if (b8) o.write_shift(1, 1);
    o.write_shift((1 + b8) * v.length, v, b8 ? "utf16le" : "sbcs");
    return o;
}
/* [MS-XLS] 2.4.126 Number Formats */ function parse_Format(blob, length, opts) {
    var numFmtId = blob.read_shift(2);
    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    return [
        numFmtId,
        fmtstr
    ];
}
function write_Format(i /*:number*/ , f /*:string*/ , opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
    o.write_shift(2, i);
    o.write_shift(b5 ? 1 : 2, f.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? "sbcs" : "utf16le");
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (out.l == null) out.l = out.length;
    return out;
}
var parse_BIFF2Format = parse_XLUnicodeString2;
/* [MS-XLS] 2.4.90 */ function parse_Dimensions(blob, length, opts) {
    var end = blob.l + length;
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var r = blob.read_shift(w), R = blob.read_shift(w);
    var c = blob.read_shift(2), C = blob.read_shift(2);
    blob.l = end;
    return {
        s: {
            r: r,
            c: c
        },
        e: {
            r: R,
            c: C
        }
    };
}
function write_Dimensions(range, opts) {
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var o = new_buf(2 * w + 6);
    o.write_shift(w, range.s.r);
    o.write_shift(w, range.e.r + 1);
    o.write_shift(2, range.s.c);
    o.write_shift(2, range.e.c + 1);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.220 */ function parse_RK(blob) {
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrec = parse_RkRec(blob);
    return {
        r: rw,
        c: col,
        ixfe: rkrec[0],
        rknum: rkrec[1]
    };
}
/* [MS-XLS] 2.4.175 */ function parse_MulRk(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrecs = [];
    while(blob.l < target)rkrecs.push(parse_RkRec(blob));
    if (blob.l !== target) throw new Error("MulRK read error");
    var lastcol = blob.read_shift(2);
    if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
    return {
        r: rw,
        c: col,
        C: lastcol,
        rkrec: rkrecs
    };
}
/* [MS-XLS] 2.4.174 */ function parse_MulBlank(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var ixfes = [];
    while(blob.l < target)ixfes.push(blob.read_shift(2));
    if (blob.l !== target) throw new Error("MulBlank read error");
    var lastcol = blob.read_shift(2);
    if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
    return {
        r: rw,
        c: col,
        C: lastcol,
        ixfe: ixfes
    };
}
/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */ function parse_CellStyleXF(blob, length, style, opts) {
    var o = {};
    var a = blob.read_shift(4), b = blob.read_shift(4);
    var c = blob.read_shift(4), d = blob.read_shift(2);
    o.patternType = XLSFillPattern[c >> 26];
    if (!opts.cellStyles) return o;
    o.alc = a & 0x07;
    o.fWrap = a >> 3 & 0x01;
    o.alcV = a >> 4 & 0x07;
    o.fJustLast = a >> 7 & 0x01;
    o.trot = a >> 8 & 0xFF;
    o.cIndent = a >> 16 & 0x0F;
    o.fShrinkToFit = a >> 20 & 0x01;
    o.iReadOrder = a >> 22 & 0x02;
    o.fAtrNum = a >> 26 & 0x01;
    o.fAtrFnt = a >> 27 & 0x01;
    o.fAtrAlc = a >> 28 & 0x01;
    o.fAtrBdr = a >> 29 & 0x01;
    o.fAtrPat = a >> 30 & 0x01;
    o.fAtrProt = a >> 31 & 0x01;
    o.dgLeft = b & 0x0F;
    o.dgRight = b >> 4 & 0x0F;
    o.dgTop = b >> 8 & 0x0F;
    o.dgBottom = b >> 12 & 0x0F;
    o.icvLeft = b >> 16 & 0x7F;
    o.icvRight = b >> 23 & 0x7F;
    o.grbitDiag = b >> 30 & 0x03;
    o.icvTop = c & 0x7F;
    o.icvBottom = c >> 7 & 0x7F;
    o.icvDiag = c >> 14 & 0x7F;
    o.dgDiag = c >> 21 & 0x0F;
    o.icvFore = d & 0x7F;
    o.icvBack = d >> 7 & 0x7F;
    o.fsxButton = d >> 14 & 0x01;
    return o;
}
//function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}
/* [MS-XLS] 2.4.353 TODO: actually do this right */ function parse_XF(blob, length, opts) {
    var o = {};
    o.ifnt = blob.read_shift(2);
    o.numFmtId = blob.read_shift(2);
    o.flags = blob.read_shift(2);
    o.fStyle = o.flags >> 2 & 0x01;
    length -= 6;
    o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
    return o;
}
function write_XF(data, ixfeP, opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 16 : 20);
    o.write_shift(2, 0);
    if (data.style) {
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, 0xFFF4);
    } else {
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, ixfeP << 4);
    }
    var f = 0;
    if (data.numFmtId > 0 && b5) f |= 0x0400;
    o.write_shift(4, f);
    o.write_shift(4, 0);
    if (!b5) o.write_shift(4, 0);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.134 */ function parse_Guts(blob) {
    blob.l += 4;
    var out = [
        blob.read_shift(2),
        blob.read_shift(2)
    ];
    if (out[0] !== 0) out[0]--;
    if (out[1] !== 0) out[1]--;
    if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
    return out;
}
function write_Guts(guts /*:Array<number>*/ ) {
    var o = new_buf(8);
    o.write_shift(4, 0);
    o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
    o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
    return o;
}
/* [MS-XLS] 2.4.24 */ function parse_BoolErr(blob, length, opts) {
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2 || length == 9) ++blob.l;
    var val = parse_Bes(blob, 2);
    cell.val = val;
    cell.t = val === true || val === false ? "b" : "e";
    return cell;
}
function write_BoolErr(R /*:number*/ , C /*:number*/ , v, os /*:number*/ , opts, t /*:string*/ ) {
    var o = new_buf(8);
    write_XLSCell(R, C, os, o);
    write_Bes(v, t, o);
    return o;
}
/* [MS-XLS] 2.4.180 Number */ function parse_Number(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2) opts.biff = 5;
    var cell = parse_XLSCell(blob, 6);
    var xnum = parse_Xnum(blob, 8);
    cell.val = xnum;
    return cell;
}
function write_Number(R /*:number*/ , C /*:number*/ , v, os /*:: :number, opts*/ ) {
    var o = new_buf(14);
    write_XLSCell(R, C, os, o);
    write_Xnum(v, o);
    return o;
}
var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136
/* [MS-XLS] 2.4.271 */ function parse_SupBook(blob, length, opts) {
    var end = blob.l + length;
    var ctab = blob.read_shift(2);
    var cch = blob.read_shift(2);
    opts.sbcch = cch;
    if (cch == 0x0401 || cch == 0x3A01) return [
        cch,
        ctab
    ];
    if (cch < 0x01 || cch > 0xff) throw new Error("Unexpected SupBook type: " + cch);
    var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    /* TODO: 2.5.277 Virtual Path */ var rgst = [];
    while(end > blob.l)rgst.push(parse_XLUnicodeString(blob));
    return [
        cch,
        ctab,
        virtPath,
        rgst
    ];
}
/* [MS-XLS] 2.4.105 TODO */ function parse_ExternName(blob, length, opts) {
    var flags = blob.read_shift(2);
    var body;
    var o = {
        fBuiltIn: flags & 0x01,
        fWantAdvise: flags >>> 1 & 0x01,
        fWantPict: flags >>> 2 & 0x01,
        fOle: flags >>> 3 & 0x01,
        fOleLink: flags >>> 4 & 0x01,
        cf: flags >>> 5 & 0x3FF,
        fIcon: flags >>> 15 & 0x01
    } /*:any*/ ;
    if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2, opts);
    //else throw new Error("unsupported SupBook cch: " + opts.sbcch);
    o.body = body || blob.read_shift(length - 2);
    if (typeof body === "string") o.Name = body;
    return o;
}
/* [MS-XLS] 2.4.150 TODO */ var XLSLblBuiltIn = [
    "_xlnm.Consolidate_Area",
    "_xlnm.Auto_Open",
    "_xlnm.Auto_Close",
    "_xlnm.Extract",
    "_xlnm.Database",
    "_xlnm.Criteria",
    "_xlnm.Print_Area",
    "_xlnm.Print_Titles",
    "_xlnm.Recorder",
    "_xlnm.Data_Form",
    "_xlnm.Auto_Activate",
    "_xlnm.Auto_Deactivate",
    "_xlnm.Sheet_Title",
    "_xlnm._FilterDatabase"
];
function parse_Lbl(blob, length, opts) {
    var target = blob.l + length;
    var flags = blob.read_shift(2);
    var chKey = blob.read_shift(1);
    var cch = blob.read_shift(1);
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var itab = 0;
    if (!opts || opts.biff >= 5) {
        if (opts.biff != 5) blob.l += 2;
        itab = blob.read_shift(2);
        if (opts.biff == 5) blob.l += 2;
        blob.l += 4;
    }
    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    if (flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
    var npflen = target - blob.l;
    if (opts && opts.biff == 2) --npflen;
    /*jshint -W018 */ var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    /*jshint +W018 */ return {
        chKey: chKey,
        Name: name,
        itab: itab,
        rgce: rgce
    };
}
/* [MS-XLS] 2.4.106 TODO: verify filename encoding */ function parse_ExternSheet(blob, length, opts) {
    if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
    var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
    while(len-- !== 0)o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
    // [iSupBook, itabFirst, itabLast];
    if (blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    return o;
}
function parse_BIFF5ExternSheet(blob, length, opts) {
    if (blob[blob.l + 1] == 0x03) blob[blob.l]++;
    var o = parse_ShortXLUnicodeString(blob, length, opts);
    return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
}
/* [MS-XLS] 2.4.176 TODO: check older biff */ function parse_NameCmt(blob, length, opts) {
    if (opts.biff < 8) {
        blob.l += length;
        return;
    }
    var cchName = blob.read_shift(2);
    var cchComment = blob.read_shift(2);
    var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    return [
        name,
        comment
    ];
}
/* [MS-XLS] 2.4.260 */ function parse_ShrFmla(blob, length, opts) {
    var ref = parse_RefU(blob, 6);
    blob.l++;
    var cUse = blob.read_shift(1);
    length -= 8;
    return [
        parse_SharedParsedFormula(blob, length, opts),
        cUse,
        ref
    ];
}
/* [MS-XLS] 2.4.4 TODO */ function parse_Array(blob, length, opts) {
    var ref = parse_Ref(blob, 6);
    /* TODO: fAlwaysCalc */ switch(opts.biff){
        case 2:
            blob.l++;
            length -= 7;
            break;
        case 3:
        case 4:
            blob.l += 2;
            length -= 8;
            break;
        default:
            blob.l += 6;
            length -= 12;
    }
    return [
        ref,
        parse_ArrayParsedFormula(blob, length, opts, ref)
    ];
}
/* [MS-XLS] 2.4.173 */ function parse_MTRSettings(blob) {
    var fMTREnabled = blob.read_shift(4) !== 0x00;
    var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
    var cUserThreadCount = blob.read_shift(4);
    return [
        fMTREnabled,
        fUserSetThreadCount,
        cUserThreadCount
    ];
}
/* [MS-XLS] 2.5.186 TODO: BIFF5 */ function parse_NoteSh(blob, length, opts) {
    if (opts.biff < 8) return;
    var row = blob.read_shift(2), col = blob.read_shift(2);
    var flags = blob.read_shift(2), idObj = blob.read_shift(2);
    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    if (opts.biff < 8) blob.read_shift(1);
    return [
        {
            r: row,
            c: col
        },
        stAuthor,
        idObj,
        flags
    ];
}
/* [MS-XLS] 2.4.179 */ function parse_Note(blob, length, opts) {
    /* TODO: Support revisions */ return parse_NoteSh(blob, length, opts);
}
/* [MS-XLS] 2.4.168 */ function parse_MergeCells(blob, length) /*:Array<Range>*/ {
    var merges /*:Array<Range>*/  = [];
    var cmcs = blob.read_shift(2);
    while(cmcs--)merges.push(parse_Ref8U(blob, length));
    return merges;
}
function write_MergeCells(merges /*:Array<Range>*/ ) {
    var o = new_buf(2 + merges.length * 8);
    o.write_shift(2, merges.length);
    for(var i = 0; i < merges.length; ++i)write_Ref8U(merges[i], o);
    return o;
}
/* [MS-XLS] 2.4.181 TODO: parse all the things! */ function parse_Obj(blob, length, opts) {
    if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
    var cmo = parse_FtCmo(blob, 22); // id, ot, flags
    var fts = parse_FtArray(blob, length - 22, cmo[1]);
    return {
        cmo: cmo,
        ft: fts
    };
}
/* from older spec */ var parse_BIFF5OT = {
    0x08: function(blob, length) {
        var tgt = blob.l + length;
        blob.l += 10; // todo
        var cf = blob.read_shift(2);
        blob.l += 4;
        blob.l += 2; //var cbPictFmla = blob.read_shift(2);
        blob.l += 2;
        blob.l += 2; //var grbit = blob.read_shift(2);
        blob.l += 4;
        var cchName = blob.read_shift(1);
        blob.l += cchName; // TODO: stName
        blob.l = tgt; // TODO: fmla
        return {
            fmt: cf
        };
    }
};
function parse_BIFF5Obj(blob, length, opts) {
    blob.l += 4; //var cnt = blob.read_shift(4);
    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var grbit = blob.read_shift(2);
    blob.l += 2; //var colL = blob.read_shift(2);
    blob.l += 2; //var dxL = blob.read_shift(2);
    blob.l += 2; //var rwT = blob.read_shift(2);
    blob.l += 2; //var dyT = blob.read_shift(2);
    blob.l += 2; //var colR = blob.read_shift(2);
    blob.l += 2; //var dxR = blob.read_shift(2);
    blob.l += 2; //var rwB = blob.read_shift(2);
    blob.l += 2; //var dyB = blob.read_shift(2);
    blob.l += 2; //var cbMacro = blob.read_shift(2);
    blob.l += 6;
    length -= 36;
    var fts = [];
    fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
    return {
        cmo: [
            id,
            ot,
            grbit
        ],
        ft: fts
    };
}
/* [MS-XLS] 2.4.329 TODO: parse properly */ function parse_TxO(blob, length, opts) {
    var s = blob.l;
    var texts = "";
    try {
        blob.l += 4;
        var ot = (opts.lastobj || {
            cmo: [
                0,
                0
            ]
        }).cmo[1];
        var controlInfo; // eslint-disable-line no-unused-vars
        if ([
            0,
            5,
            7,
            11,
            12,
            14
        ].indexOf(ot) == -1) blob.l += 6;
        else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars
        var cchText = blob.read_shift(2);
        /*var cbRuns = */ blob.read_shift(2);
        /*var ifntEmpty = */ parseuint16(blob, 2);
        var len = blob.read_shift(2);
        blob.l += len;
        //var fmla = parse_ObjFmla(blob, s + length - blob.l);
        for(var i = 1; i < blob.lens.length - 1; ++i){
            if (blob.l - s != blob.lens[i]) throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
            texts += t;
            if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
        }
        if (texts.length !== cchText && texts.length !== cchText * 2) throw new Error("cchText: " + cchText + " != " + texts.length);
        blob.l = s + length;
        /* [MS-XLS] 2.5.272 TxORuns */ //	var rgTxoRuns = [];
        //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
        //	var cchText2 = blob.read_shift(2);
        //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
        //	blob.l += 6;
        //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
        return {
            t: texts
        };
    } catch (e) {
        blob.l = s + length;
        return {
            t: texts
        };
    }
}
/* [MS-XLS] 2.4.140 */ function parse_HLink(blob, length) {
    var ref = parse_Ref8U(blob, 8);
    blob.l += 16; /* CLSID */ 
    var hlink = parse_Hyperlink(blob, length - 24);
    return [
        ref,
        hlink
    ];
}
function write_HLink(hl) {
    var O = new_buf(24);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);
    var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
    for(var i = 0; i < 16; ++i)O.write_shift(1, parseInt(clsid[i], 16));
    return bconcat([
        O,
        write_Hyperlink(hl[1])
    ]);
}
/* [MS-XLS] 2.4.141 */ function parse_HLinkTooltip(blob, length) {
    blob.read_shift(2);
    var ref = parse_Ref8U(blob, 8);
    var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
    wzTooltip = wzTooltip.replace(chr0, "");
    return [
        ref,
        wzTooltip
    ];
}
function write_HLinkTooltip(hl) {
    var TT = hl[1].Tooltip;
    var O = new_buf(10 + 2 * (TT.length + 1));
    O.write_shift(2, 0x0800);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);
    for(var i = 0; i < TT.length; ++i)O.write_shift(2, TT.charCodeAt(i));
    O.write_shift(2, 0);
    return O;
}
/* [MS-XLS] 2.4.63 */ function parse_Country(blob) /*:[string|number, string|number]*/ {
    var o = [
        0,
        0
    ], d;
    d = blob.read_shift(2);
    o[0] = CountryEnum[d] || d;
    d = blob.read_shift(2);
    o[1] = CountryEnum[d] || d;
    return o;
}
function write_Country(o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, 0x01);
    o.write_shift(2, 0x01);
    return o;
}
/* [MS-XLS] 2.4.50 ClrtClient */ function parse_ClrtClient(blob) {
    var ccv = blob.read_shift(2);
    var o = [];
    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));
    return o;
}
/* [MS-XLS] 2.4.188 */ function parse_Palette(blob) {
    var ccv = blob.read_shift(2);
    var o = [];
    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));
    return o;
}
/* [MS-XLS] 2.4.354 */ function parse_XFCRC(blob) {
    blob.l += 2;
    var o = {
        cxfs: 0,
        crc: 0
    };
    o.cxfs = blob.read_shift(2);
    o.crc = blob.read_shift(4);
    return o;
}
/* [MS-XLS] 2.4.53 TODO: parse flags */ /* [MS-XLSB] 2.4.323 TODO: parse flags */ function parse_ColInfo(blob, length, opts) {
    if (!opts.cellStyles) return parsenoop(blob, length);
    var w = opts && opts.biff >= 12 ? 4 : 2;
    var colFirst = blob.read_shift(w);
    var colLast = blob.read_shift(w);
    var coldx = blob.read_shift(w);
    var ixfe = blob.read_shift(w);
    var flags = blob.read_shift(2);
    if (w == 2) blob.l += 2;
    var o = {
        s: colFirst,
        e: colLast,
        w: coldx,
        ixfe: ixfe,
        flags: flags
    } /*:any*/ ;
    if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 0x7;
    return o;
}
function write_ColInfo(col, idx) {
    var o = new_buf(12);
    o.write_shift(2, idx);
    o.write_shift(2, idx);
    o.write_shift(2, col.width * 256);
    o.write_shift(2, 0);
    var f = 0;
    if (col.hidden) f |= 1;
    o.write_shift(1, f);
    f = col.level || 0;
    o.write_shift(1, f);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.257 */ function parse_Setup(blob, length) {
    var o = {};
    if (length < 32) return o;
    blob.l += 16;
    o.header = parse_Xnum(blob, 8);
    o.footer = parse_Xnum(blob, 8);
    blob.l += 2;
    return o;
}
/* [MS-XLS] 2.4.261 */ function parse_ShtProps(blob, length, opts) {
    var def = {
        area: false
    };
    if (opts.biff != 5) {
        blob.l += length;
        return def;
    }
    var d = blob.read_shift(1);
    blob.l += 3;
    if (d & 0x10) def.area = true;
    return def;
}
/* [MS-XLS] 2.4.241 */ function write_RRTabId(n /*:number*/ ) {
    var out = new_buf(2 * n);
    for(var i = 0; i < n; ++i)out.write_shift(2, i + 1);
    return out;
}
var parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */ 
var parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */ 
var parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */ 
/* --- Specific to versions before BIFF8 --- */ function parse_ImData(blob) {
    var cf = blob.read_shift(2);
    var env = blob.read_shift(2);
    var lcb = blob.read_shift(4);
    var o = {
        fmt: cf,
        env: env,
        len: lcb,
        data: blob.slice(blob.l, blob.l + lcb)
    };
    blob.l += lcb;
    return o;
}
/* BIFF2_??? where ??? is the name from [XLS] */ function parse_BIFF2STR(blob, length, opts) {
    if (opts.biffguess && opts.biff == 5) opts.biff = 2;
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var str = parse_XLUnicodeString2(blob, length - 7, opts);
    cell.t = "str";
    cell.val = str;
    return cell;
}
function parse_BIFF2NUM(blob /*::, length*/ ) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = parse_Xnum(blob, 8);
    cell.t = "n";
    cell.val = num;
    return cell;
}
function write_BIFF2NUM(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {
    var out = new_buf(15);
    write_BIFF2Cell(out, r, c);
    out.write_shift(8, val, "f");
    return out;
}
function parse_BIFF2INT(blob) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = blob.read_shift(2);
    cell.t = "n";
    cell.val = num;
    return cell;
}
function write_BIFF2INT(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);
    out.write_shift(2, val);
    return out;
}
function parse_BIFF2STRING(blob) {
    var cch = blob.read_shift(1);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return blob.read_shift(cch, "sbcs-cont");
}
/* TODO: convert to BIFF8 font struct */ function parse_BIFF2FONTXTRA(blob, length) {
    blob.l += 6; // unknown
    blob.l += 2; // font weight "bls"
    blob.l += 1; // charset
    blob.l += 3; // unknown
    blob.l += 1; // font family
    blob.l += length - 13;
}
/* TODO: parse rich text runs */ function parse_RString(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    var cch = blob.read_shift(2);
    var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    blob.l = end;
    cell.t = "str";
    cell.val = str;
    return cell;
}
/* from js-harb (C) 2014-present  SheetJS */ var DBF_SUPPORTED_VERSIONS = [
    0x02,
    0x03,
    0x30,
    0x31,
    0x83,
    0x8B,
    0x8C,
    0xF5
];
var DBF = /*#__PURE__*/ function() {
    var dbf_codepage_map = {
        /* Code Pages Supported by Visual FoxPro */ /*::[*/ 0x01: 437,
        /*::[*/ 0x02: 850,
        /*::[*/ 0x03: 1252,
        /*::[*/ 0x04: 10000,
        /*::[*/ 0x64: 852,
        /*::[*/ 0x65: 866,
        /*::[*/ 0x66: 865,
        /*::[*/ 0x67: 861,
        /*::[*/ 0x68: 895,
        /*::[*/ 0x69: 620,
        /*::[*/ 0x6A: 737,
        /*::[*/ 0x6B: 857,
        /*::[*/ 0x78: 950,
        /*::[*/ 0x79: 949,
        /*::[*/ 0x7A: 936,
        /*::[*/ 0x7B: 932,
        /*::[*/ 0x7C: 874,
        /*::[*/ 0x7D: 1255,
        /*::[*/ 0x7E: 1256,
        /*::[*/ 0x96: 10007,
        /*::[*/ 0x97: 10029,
        /*::[*/ 0x98: 10006,
        /*::[*/ 0xC8: 1250,
        /*::[*/ 0xC9: 1251,
        /*::[*/ 0xCA: 1254,
        /*::[*/ 0xCB: 1253,
        /* shapefile DBF extension */ /*::[*/ 0x00: 20127,
        /*::[*/ 0x08: 865,
        /*::[*/ 0x09: 437,
        /*::[*/ 0x0A: 850,
        /*::[*/ 0x0B: 437,
        /*::[*/ 0x0D: 437,
        /*::[*/ 0x0E: 850,
        /*::[*/ 0x0F: 437,
        /*::[*/ 0x10: 850,
        /*::[*/ 0x11: 437,
        /*::[*/ 0x12: 850,
        /*::[*/ 0x13: 932,
        /*::[*/ 0x14: 850,
        /*::[*/ 0x15: 437,
        /*::[*/ 0x16: 850,
        /*::[*/ 0x17: 865,
        /*::[*/ 0x18: 437,
        /*::[*/ 0x19: 437,
        /*::[*/ 0x1A: 850,
        /*::[*/ 0x1B: 437,
        /*::[*/ 0x1C: 863,
        /*::[*/ 0x1D: 850,
        /*::[*/ 0x1F: 852,
        /*::[*/ 0x22: 852,
        /*::[*/ 0x23: 852,
        /*::[*/ 0x24: 860,
        /*::[*/ 0x25: 850,
        /*::[*/ 0x26: 866,
        /*::[*/ 0x37: 850,
        /*::[*/ 0x40: 852,
        /*::[*/ 0x4D: 936,
        /*::[*/ 0x4E: 949,
        /*::[*/ 0x4F: 950,
        /*::[*/ 0x50: 874,
        /*::[*/ 0x57: 1252,
        /*::[*/ 0x58: 1252,
        /*::[*/ 0x59: 1252,
        /*::[*/ 0x6C: 863,
        /*::[*/ 0x86: 737,
        /*::[*/ 0x87: 852,
        /*::[*/ 0x88: 857,
        /*::[*/ 0xCC: 1257,
        /*::[*/ 0xFF: 16969
    };
    var dbf_reverse_map = evert({
        /*::[*/ 0x01: 437,
        /*::[*/ 0x02: 850,
        /*::[*/ 0x03: 1252,
        /*::[*/ 0x04: 10000,
        /*::[*/ 0x64: 852,
        /*::[*/ 0x65: 866,
        /*::[*/ 0x66: 865,
        /*::[*/ 0x67: 861,
        /*::[*/ 0x68: 895,
        /*::[*/ 0x69: 620,
        /*::[*/ 0x6A: 737,
        /*::[*/ 0x6B: 857,
        /*::[*/ 0x78: 950,
        /*::[*/ 0x79: 949,
        /*::[*/ 0x7A: 936,
        /*::[*/ 0x7B: 932,
        /*::[*/ 0x7C: 874,
        /*::[*/ 0x7D: 1255,
        /*::[*/ 0x7E: 1256,
        /*::[*/ 0x96: 10007,
        /*::[*/ 0x97: 10029,
        /*::[*/ 0x98: 10006,
        /*::[*/ 0xC8: 1250,
        /*::[*/ 0xC9: 1251,
        /*::[*/ 0xCA: 1254,
        /*::[*/ 0xCB: 1253,
        /*::[*/ 0x00: 20127
    });
    /* TODO: find an actual specification */ function dbf_to_aoa(buf, opts) /*:AOA*/ {
        var out /*:AOA*/  = [];
        var d /*:Block*/  = new_raw_buf(1);
        switch(opts.type){
            case "base64":
                d = s2a(Base64_decode(buf));
                break;
            case "binary":
                d = s2a(buf);
                break;
            case "buffer":
            case "array":
                d = buf;
                break;
        }
        prep_blob(d, 0);
        /* header */ var ft = d.read_shift(1);
        var memo = !!(ft & 0x88);
        var vfp = false, l7 = false;
        switch(ft){
            case 0x02:
                break; // dBASE II
            case 0x03:
                break; // dBASE III
            case 0x30:
                vfp = true;
                memo = true;
                break; // VFP
            case 0x31:
                vfp = true;
                memo = true;
                break; // VFP with autoincrement
            // 0x43 dBASE IV SQL table files
            // 0x63 dBASE IV SQL system files
            case 0x83:
                break; // dBASE III with memo
            case 0x8B:
                break; // dBASE IV with memo
            case 0x8C:
                l7 = true;
                break; // dBASE Level 7 with memo
            // case 0xCB dBASE IV SQL table files with memo
            case 0xF5:
                break; // FoxPro 2.x with memo
            // case 0xFB FoxBASE
            default:
                throw new Error("DBF Unsupported Version: " + ft.toString(16));
        }
        var nrow = 0, fpos = 0x0209;
        if (ft == 0x02) nrow = d.read_shift(2);
        d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD
        if (ft != 0x02) nrow = d.read_shift(4);
        if (nrow > 1048576) nrow = 1e6;
        if (ft != 0x02) fpos = d.read_shift(2); // header length
        var rlen = d.read_shift(2); // record length
        var /*flags = 0,*/ current_cp = opts.codepage || 1252;
        if (ft != 0x02) {
            d.l += 16;
            /*flags = */ d.read_shift(1);
            //if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));
            /* codepage present in FoxPro and dBASE Level 7 */ if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
            d.l += 1;
            d.l += 2;
        }
        if (l7) d.l += 36; // Level 7: 32 byte "Language driver name", 4 byte reserved
        /*:: type DBFField = { name:string; len:number; type:string; } */ var fields /*:Array<DBFField>*/  = [], field /*:DBFField*/  = {} /*:any*/ ;
        var hend = Math.min(d.length, ft == 0x02 ? 0x209 : fpos - 10 - (vfp ? 264 : 0));
        var ww = l7 ? 32 : 11;
        while(d.l < hend && d[d.l] != 0x0d){
            field = {} /*:any*/ ;
            field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
            d.l += ww;
            field.type = String.fromCharCode(d.read_shift(1));
            if (ft != 0x02 && !l7) field.offset = d.read_shift(4);
            field.len = d.read_shift(1);
            if (ft == 0x02) field.offset = d.read_shift(2);
            field.dec = d.read_shift(1);
            if (field.name.length) fields.push(field);
            if (ft != 0x02) d.l += l7 ? 13 : 14;
            switch(field.type){
                case "B":
                    if ((!vfp || field.len != 8) && opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                    break;
                case "G":
                case "P":
                    if (opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                    break;
                case "+":
                case "0":
                case "@":
                case "C":
                case "D":
                case "F":
                case "I":
                case "L":
                case "M":
                case "N":
                case "O":
                case "T":
                case "Y":
                    break;
                default:
                    throw new Error("Unknown Field Type: " + field.type);
            }
        }
        if (d[d.l] !== 0x0D) d.l = fpos - 1;
        if (d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
        d.l = fpos;
        /* data */ var R = 0, C = 0;
        out[0] = [];
        for(C = 0; C != fields.length; ++C)out[0][C] = fields[C].name;
        while(nrow-- > 0){
            if (d[d.l] === 0x2A) {
                // TODO: record marked as deleted -- create a hidden row?
                d.l += rlen;
                continue;
            }
            ++d.l;
            out[++R] = [];
            C = 0;
            for(C = 0; C != fields.length; ++C){
                var dd = d.slice(d.l, d.l + fields[C].len);
                d.l += fields[C].len;
                prep_blob(dd, 0);
                var s = $cptable.utils.decode(current_cp, dd);
                switch(fields[C].type){
                    case "C":
                        // NOTE: it is conventional to write '  /  /  ' for empty dates
                        if (s.trim().length) out[R][C] = s.replace(/\s+$/, "");
                        break;
                    case "D":
                        if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));
                        else out[R][C] = s;
                        break;
                    case "F":
                        out[R][C] = parseFloat(s.trim());
                        break;
                    case "+":
                    case "I":
                        out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 0x80000000 : dd.read_shift(4, "i");
                        break;
                    case "L":
                        switch(s.trim().toUpperCase()){
                            case "Y":
                            case "T":
                                out[R][C] = true;
                                break;
                            case "N":
                            case "F":
                                out[R][C] = false;
                                break;
                            case "":
                            case "?":
                                break;
                            default:
                                throw new Error("DBF Unrecognized L:|" + s + "|");
                        }
                        break;
                    case "M":
                        /* TODO: handle memo files */ if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                        out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
                        break;
                    case "N":
                        s = s.replace(/\u0000/g, "").trim();
                        // NOTE: dBASE II interprets "  .  " as 0
                        if (s && s != ".") out[R][C] = +s || 0;
                        break;
                    case "@":
                        // NOTE: dBASE specs appear to be incorrect
                        out[R][C] = new Date(dd.read_shift(-8, "f") - 0x388317533400);
                        break;
                    case "T":
                        out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4));
                        break;
                    case "Y":
                        out[R][C] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
                        break;
                    case "O":
                        out[R][C] = -dd.read_shift(-8, "f");
                        break;
                    case "B":
                        if (vfp && fields[C].len == 8) {
                            out[R][C] = dd.read_shift(8, "f");
                            break;
                        }
                    /* falls through */ case "G":
                    case "P":
                        dd.l += fields[C].len;
                        break;
                    case "0":
                        if (fields[C].name === "_NullFlags") break;
                    /* falls through */ default:
                        throw new Error("DBF Unsupported data type " + fields[C].type);
                }
            }
        }
        if (ft != 0x02) {
            if (d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
        }
        if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
        opts.DBF = fields;
        return out;
    }
    function dbf_to_sheet(buf, opts) /*:Worksheet*/ {
        var o = opts || {};
        if (!o.dateNF) o.dateNF = "yyyymmdd";
        var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
        ws["!cols"] = o.DBF.map(function(field) {
            return {
                wch: field.len,
                DBF: field
            };
        });
        delete o.DBF;
        return ws;
    }
    function dbf_to_workbook(buf, opts) /*:Workbook*/ {
        try {
            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
        } catch (e) {
            if (opts && opts.WTF) throw e;
        }
        return {
            SheetNames: [],
            Sheets: {}
        };
    }
    var _RLEN = {
        "B": 8,
        "C": 250,
        "L": 1,
        "D": 8,
        "?": 0,
        "": 0
    };
    function sheet_to_dbf(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write DBF to JS string");
        var ba = buf_array();
        var aoa /*:AOA*/  = sheet_to_json(ws, {
            header: 1,
            raw: true,
            cellDates: true
        });
        var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
        var i = 0, j = 0, hcnt = 0, rlen = 1;
        for(i = 0; i < headers.length; ++i){
            if (((cols[i] || {}).DBF || {}).name) {
                headers[i] = cols[i].DBF.name;
                ++hcnt;
                continue;
            }
            if (headers[i] == null) continue;
            ++hcnt;
            if (typeof headers[i] === "number") headers[i] = headers[i].toString(10);
            if (typeof headers[i] !== "string") throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
            if (headers.indexOf(headers[i]) !== i) {
                for(j = 0; j < 1024; ++j)if (headers.indexOf(headers[i] + "_" + j) == -1) {
                    headers[i] += "_" + j;
                    break;
                }
            }
        }
        var range = safe_decode_range(ws["!ref"]);
        var coltypes /*:Array<string>*/  = [];
        var colwidths /*:Array<number>*/  = [];
        var coldecimals /*:Array<number>*/  = [];
        for(i = 0; i <= range.e.c - range.s.c; ++i){
            var guess = "", _guess = "", maxlen = 0;
            var col /*:Array<any>*/  = [];
            for(j = 0; j < data.length; ++j)if (data[j][i] != null) col.push(data[j][i]);
            if (col.length == 0 || headers[i] == null) {
                coltypes[i] = "?";
                continue;
            }
            for(j = 0; j < col.length; ++j){
                switch(typeof col[j]){
                    /* TODO: check if L2 compat is desired */ case "number":
                        _guess = "B";
                        break;
                    case "string":
                        _guess = "C";
                        break;
                    case "boolean":
                        _guess = "L";
                        break;
                    case "object":
                        _guess = col[j] instanceof Date ? "D" : "C";
                        break;
                    default:
                        _guess = "C";
                }
                maxlen = Math.max(maxlen, String(col[j]).length);
                guess = guess && guess != _guess ? "C" : _guess;
            //if(guess == 'C') break;
            }
            if (maxlen > 250) maxlen = 250;
            _guess = ((cols[i] || {}).DBF || {}).type;
            /* TODO: more fine grained control over DBF type resolution */ if (_guess == "C") {
                if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
            }
            if (guess == "B" && _guess == "N") {
                guess = "N";
                coldecimals[i] = cols[i].DBF.dec;
                maxlen = cols[i].DBF.len;
            }
            colwidths[i] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
            rlen += colwidths[i];
            coltypes[i] = guess;
        }
        var h = ba.next(32);
        h.write_shift(4, 0x13021130);
        h.write_shift(4, data.length);
        h.write_shift(2, 296 + 32 * hcnt);
        h.write_shift(2, rlen);
        for(i = 0; i < 4; ++i)h.write_shift(4, 0);
        h.write_shift(4, 0x00000000 | (+dbf_reverse_map[/*::String(*/ current_ansi /*::)*/ ] || 0x03) << 8);
        for(i = 0, j = 0; i < headers.length; ++i){
            if (headers[i] == null) continue;
            var hf = ba.next(32);
            var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i] == "?" ? "C" : coltypes[i], "sbcs");
            hf.write_shift(4, j);
            hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
            hf.write_shift(1, coldecimals[i] || 0);
            hf.write_shift(1, 0x02);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j += colwidths[i] || _RLEN[coltypes[i]] || 0;
        }
        var hb = ba.next(264);
        hb.write_shift(4, 0x0000000D);
        for(i = 0; i < 65; ++i)hb.write_shift(4, 0x00000000);
        for(i = 0; i < data.length; ++i){
            var rout = ba.next(rlen);
            rout.write_shift(1, 0);
            for(j = 0; j < headers.length; ++j){
                if (headers[j] == null) continue;
                switch(coltypes[j]){
                    case "L":
                        rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46);
                        break;
                    case "B":
                        rout.write_shift(8, data[i][j] || 0, "f");
                        break;
                    case "N":
                        var _n = "0";
                        if (typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j] || 0);
                        for(hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt)rout.write_shift(1, 0x20);
                        rout.write_shift(1, _n, "sbcs");
                        break;
                    case "D":
                        if (!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
                        else {
                            rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
                            rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
                            rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
                        }
                        break;
                    case "C":
                        var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
                        rout.write_shift(1, _s, "sbcs");
                        for(hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt)rout.write_shift(1, 0x20);
                        break;
                }
            }
        // data
        }
        ba.next(1).write_shift(1, 0x1A);
        return ba.end();
    }
    return {
        to_workbook: dbf_to_workbook,
        to_sheet: dbf_to_sheet,
        from_sheet: sheet_to_dbf
    };
}();
var SYLK = /*#__PURE__*/ function() {
    /* TODO: stress test sequences */ var sylk_escapes = {
        AA: "\xc0",
        BA: "\xc1",
        CA: "\xc2",
        DA: 195,
        HA: "\xc4",
        JA: 197,
        AE: "\xc8",
        BE: "\xc9",
        CE: "\xca",
        HE: "\xcb",
        AI: "\xcc",
        BI: "\xcd",
        CI: "\xce",
        HI: "\xcf",
        AO: "\xd2",
        BO: "\xd3",
        CO: "\xd4",
        DO: 213,
        HO: "\xd6",
        AU: "\xd9",
        BU: "\xda",
        CU: "\xdb",
        HU: "\xdc",
        Aa: "\xe0",
        Ba: "\xe1",
        Ca: "\xe2",
        Da: 227,
        Ha: "\xe4",
        Ja: 229,
        Ae: "\xe8",
        Be: "\xe9",
        Ce: "\xea",
        He: "\xeb",
        Ai: "\xec",
        Bi: "\xed",
        Ci: "\xee",
        Hi: "\xef",
        Ao: "\xf2",
        Bo: "\xf3",
        Co: "\xf4",
        Do: 245,
        Ho: "\xf6",
        Au: "\xf9",
        Bu: "\xfa",
        Cu: "\xfb",
        Hu: "\xfc",
        KC: "\xc7",
        Kc: "\xe7",
        q: "\xe6",
        z: "œ",
        a: "\xc6",
        j: "Œ",
        DN: 209,
        Dn: 241,
        Hy: 255,
        S: 169,
        c: 170,
        R: 174,
        "B ": 180,
        /*::[*/ 0: 176,
        /*::[*/ 1: 177,
        /*::[*/ 2: 178,
        /*::[*/ 3: 179,
        /*::[*/ 5: 181,
        /*::[*/ 6: 182,
        /*::[*/ 7: 183,
        Q: 185,
        k: 186,
        b: 208,
        i: 216,
        l: 222,
        s: 240,
        y: 248,
        "!": 161,
        '"': 162,
        "#": 163,
        "(": 164,
        "%": 165,
        "'": 167,
        "H ": 168,
        "+": 171,
        ";": 187,
        "<": 188,
        "=": 189,
        ">": 190,
        "?": 191,
        "{": 223
    } /*:any*/ ;
    var sylk_char_regex = new RegExp("\x1bN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
    var sylk_char_fn = function(_, $1) {
        var o = sylk_escapes[$1];
        return typeof o == "number" ? _getansi(o) : o;
    };
    var decode_sylk_char = function($$, $1, $2) {
        var newcc = $1.charCodeAt(0) - 0x20 << 4 | $2.charCodeAt(0) - 0x30;
        return newcc == 59 ? $$ : _getansi(newcc);
    };
    sylk_escapes["|"] = 254;
    /* TODO: find an actual specification */ function sylk_to_aoa(d /*:RawData*/ , opts) /*:[AOA, Worksheet]*/ {
        switch(opts.type){
            case "base64":
                return sylk_to_aoa_str(Base64_decode(d), opts);
            case "binary":
                return sylk_to_aoa_str(d, opts);
            case "buffer":
                return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return sylk_to_aoa_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    function sylk_to_aoa_str(str /*:string*/ , opts) /*:[AOA, Worksheet]*/ {
        var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr /*:AOA*/  = [];
        var formats /*:Array<string>*/  = [];
        var next_cell_format /*:string|null*/  = null;
        var sht = {}, rowinfo /*:Array<RowInfo>*/  = [], colinfo /*:Array<ColInfo>*/  = [], cw /*:Array<string>*/  = [];
        var Mval = 0, j;
        if (+opts.codepage >= 0) set_cp(+opts.codepage);
        for(; ri !== records.length; ++ri){
            Mval = 0;
            var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
            var record = rstr.replace(/;;/g, "\x00").split(";").map(function(x) {
                return x.replace(/\u0000/g, ";");
            });
            var RT = record[0], val;
            if (rstr.length > 0) switch(RT){
                case "ID":
                    break; /* header */ 
                case "E":
                    break; /* EOF */ 
                case "B":
                    break; /* dimensions */ 
                case "O":
                    break; /* options? */ 
                case "W":
                    break; /* window? */ 
                case "P":
                    if (record[1].charAt(0) == "P") formats.push(rstr.slice(3).replace(/;;/g, ";"));
                    break;
                case "C":
                    var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){
                        case "A":
                            break; // TODO: comment
                        case "X":
                            C = parseInt(record[rj].slice(1)) - 1;
                            C_seen_X = true;
                            break;
                        case "Y":
                            R = parseInt(record[rj].slice(1)) - 1;
                            if (!C_seen_X) C = 0;
                            for(j = arr.length; j <= R; ++j)arr[j] = [];
                            break;
                        case "K":
                            val = record[rj].slice(1);
                            if (val.charAt(0) === '"') val = val.slice(1, val.length - 1);
                            else if (val === "TRUE") val = true;
                            else if (val === "FALSE") val = false;
                            else if (!isNaN(fuzzynum(val))) {
                                val = fuzzynum(val);
                                if (next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
                            } else if (!isNaN(fuzzydate(val).getDate())) val = parseDate(val);
                            if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);
                            C_seen_K = true;
                            break;
                        case "E":
                            C_seen_E = true;
                            var formula = rc_to_a1(record[rj].slice(1), {
                                r: R,
                                c: C
                            });
                            arr[R][C] = [
                                arr[R][C],
                                formula
                            ];
                            break;
                        case "S":
                            C_seen_S = true;
                            arr[R][C] = [
                                arr[R][C],
                                "S5S"
                            ];
                            break;
                        case "G":
                            break; // unknown
                        case "R":
                            _R = parseInt(record[rj].slice(1)) - 1;
                            break;
                        case "C":
                            _C = parseInt(record[rj].slice(1)) - 1;
                            break;
                        default:
                            if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                    }
                    if (C_seen_K) {
                        if (arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
                        else arr[R][C] = val;
                        next_cell_format = null;
                    }
                    if (C_seen_S) {
                        if (C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
                        var shrbase = _R > -1 && arr[_R][_C];
                        if (!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
                        arr[R][C][1] = shift_formula_str(shrbase[1], {
                            r: R - _R,
                            c: C - _C
                        });
                    }
                    break;
                case "F":
                    var F_seen = 0;
                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){
                        case "X":
                            C = parseInt(record[rj].slice(1)) - 1;
                            ++F_seen;
                            break;
                        case "Y":
                            R = parseInt(record[rj].slice(1)) - 1; /*C = 0;*/ 
                            for(j = arr.length; j <= R; ++j)arr[j] = [];
                            break;
                        case "M":
                            Mval = parseInt(record[rj].slice(1)) / 20;
                            break;
                        case "F":
                            break; /* ??? */ 
                        case "G":
                            break; /* hide grid */ 
                        case "P":
                            next_cell_format = formats[parseInt(record[rj].slice(1))];
                            break;
                        case "S":
                            break; /* cell style */ 
                        case "D":
                            break; /* column */ 
                        case "N":
                            break; /* font */ 
                        case "W":
                            cw = record[rj].slice(1).split(" ");
                            for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j){
                                Mval = parseInt(cw[2], 10);
                                colinfo[j - 1] = Mval === 0 ? {
                                    hidden: true
                                } : {
                                    wch: Mval
                                };
                                process_col(colinfo[j - 1]);
                            }
                            break;
                        case "C":
                            /* default column format */ C = parseInt(record[rj].slice(1)) - 1;
                            if (!colinfo[C]) colinfo[C] = {};
                            break;
                        case "R":
                            /* row properties */ R = parseInt(record[rj].slice(1)) - 1;
                            if (!rowinfo[R]) rowinfo[R] = {};
                            if (Mval > 0) {
                                rowinfo[R].hpt = Mval;
                                rowinfo[R].hpx = pt2px(Mval);
                            } else if (Mval === 0) rowinfo[R].hidden = true;
                            break;
                        default:
                            if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                    }
                    if (F_seen < 1) next_cell_format = null;
                    break;
                default:
                    if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
            }
        }
        if (rowinfo.length > 0) sht["!rows"] = rowinfo;
        if (colinfo.length > 0) sht["!cols"] = colinfo;
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return [
            arr,
            sht
        ];
    }
    function sylk_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        var aoasht = sylk_to_aoa(d, opts);
        var aoa = aoasht[0], ws = aoasht[1];
        var o = aoa_to_sheet(aoa, opts);
        keys(ws).forEach(function(k) {
            o[k] = ws[k];
        });
        return o;
    }
    function sylk_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
    }
    function write_ws_cell_sylk(cell /*:Cell*/ , ws /*:Worksheet*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) /*:string*/ {
        var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
        switch(cell.t){
            case "n":
                o += cell.v || 0;
                if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {
                    r: R,
                    c: C
                });
                break;
            case "b":
                o += cell.v ? "TRUE" : "FALSE";
                break;
            case "e":
                o += cell.w || cell.v;
                break;
            case "d":
                o += '"' + (cell.w || cell.v) + '"';
                break;
            case "s":
                o += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
                break;
        }
        return o;
    }
    function write_ws_cols_sylk(out, cols) {
        cols.forEach(function(col, i) {
            var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
            if (col.hidden) rec += "0";
            else {
                if (typeof col.width == "number" && !col.wpx) col.wpx = width2px(col.width);
                if (typeof col.wpx == "number" && !col.wch) col.wch = px2char(col.wpx);
                if (typeof col.wch == "number") rec += Math.round(col.wch);
            }
            if (rec.charAt(rec.length - 1) != " ") out.push(rec);
        });
    }
    function write_ws_rows_sylk(out /*:Array<string>*/ , rows /*:Array<RowInfo>*/ ) {
        rows.forEach(function(row, i) {
            var rec = "F;";
            if (row.hidden) rec += "M0;";
            else if (row.hpt) rec += "M" + 20 * row.hpt + ";";
            else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
            if (rec.length > 2) out.push(rec + "R" + (i + 1));
        });
    }
    function sheet_to_sylk(ws /*:Worksheet*/ , opts /*:?any*/ ) /*:string*/ {
        var preamble /*:Array<string>*/  = [
            "ID;PWXL;N;E"
        ], o /*:Array<string>*/  = [];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        var RS = "\r\n";
        preamble.push("P;PGeneral");
        preamble.push("F;P0;DG0G8;M255");
        if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]);
        if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]);
        preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [
            r.s.c,
            r.s.r,
            r.e.c,
            r.e.r
        ].join(" "));
        for(var R = r.s.r; R <= r.e.r; ++R)for(var C = r.s.c; C <= r.e.c; ++C){
            var coord = encode_cell({
                r: R,
                c: C
            });
            cell = dense ? (ws[R] || [])[C] : ws[coord];
            if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
            o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
        }
        return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
    }
    return {
        to_workbook: sylk_to_workbook,
        to_sheet: sylk_to_sheet,
        from_sheet: sheet_to_sylk
    };
}();
var DIF = /*#__PURE__*/ function() {
    function dif_to_aoa(d /*:RawData*/ , opts) /*:AOA*/ {
        switch(opts.type){
            case "base64":
                return dif_to_aoa_str(Base64_decode(d), opts);
            case "binary":
                return dif_to_aoa_str(d, opts);
            case "buffer":
                return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return dif_to_aoa_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    function dif_to_aoa_str(str /*:string*/ , opts) /*:AOA*/ {
        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];
        for(; ri !== records.length; ++ri){
            if (records[ri].trim() === "BOT") {
                arr[++R] = [];
                C = 0;
                continue;
            }
            if (R < 0) continue;
            var metadata = records[ri].trim().split(",");
            var type = metadata[0], value = metadata[1];
            ++ri;
            var data = records[ri] || "";
            while((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)data += "\n" + records[++ri];
            data = data.trim();
            switch(+type){
                case -1:
                    if (data === "BOT") {
                        arr[++R] = [];
                        C = 0;
                        continue;
                    } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data);
                    break;
                case 0:
                    if (data === "TRUE") arr[R][C] = true;
                    else if (data === "FALSE") arr[R][C] = false;
                    else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
                    else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
                    else arr[R][C] = value;
                    ++C;
                    break;
                case 1:
                    data = data.slice(1, data.length - 1);
                    data = data.replace(/""/g, '"');
                    if (DIF_XL && data && data.match(/^=".*"$/)) data = data.slice(2, -1);
                    arr[R][C++] = data !== "" ? data : null;
                    break;
            }
            if (data === "EOD") break;
        }
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return arr;
    }
    function dif_to_sheet(str /*:string*/ , opts) /*:Worksheet*/ {
        return aoa_to_sheet(dif_to_aoa(str, opts), opts);
    }
    function dif_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(dif_to_sheet(str, opts), opts);
    }
    var sheet_to_dif = /*#__PURE__*/ function() {
        var push_field = function pf(o /*:Array<string>*/ , topic /*:string*/ , v /*:number*/ , n /*:number*/ , s /*:string*/ ) {
            o.push(topic);
            o.push(v + "," + n);
            o.push('"' + s.replace(/"/g, '""') + '"');
        };
        var push_value = function po(o /*:Array<string>*/ , type /*:number*/ , v /*:any*/ , s /*:string*/ ) {
            o.push(type + "," + v);
            o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
        };
        return function sheet_to_dif(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
            var o /*:Array<string>*/  = [];
            var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
            var dense = Array.isArray(ws);
            push_field(o, "TABLE", 0, 1, "sheetjs");
            push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
            push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
            push_field(o, "DATA", 0, 0, "");
            for(var R = r.s.r; R <= r.e.r; ++R){
                push_value(o, -1, 0, "BOT");
                for(var C = r.s.c; C <= r.e.c; ++C){
                    var coord = encode_cell({
                        r: R,
                        c: C
                    });
                    cell = dense ? (ws[R] || [])[C] : ws[coord];
                    if (!cell) {
                        push_value(o, 1, 0, "");
                        continue;
                    }
                    switch(cell.t){
                        case "n":
                            var val = DIF_XL ? cell.w : cell.v;
                            if (!val && cell.v != null) val = cell.v;
                            if (val == null) {
                                if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
                                else push_value(o, 1, 0, "");
                            } else push_value(o, 0, val, "V");
                            break;
                        case "b":
                            push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                            break;
                        case "s":
                            push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                            break;
                        case "d":
                            if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                            if (DIF_XL) push_value(o, 0, cell.w, "V");
                            else push_value(o, 1, 0, cell.w);
                            break;
                        default:
                            push_value(o, 1, 0, "");
                    }
                }
            }
            push_value(o, -1, 0, "EOD");
            var RS = "\r\n";
            var oo = o.join(RS);
            //while((oo.length & 0x7F) != 0) oo += "\0";
            return oo;
        };
    }();
    return {
        to_workbook: dif_to_workbook,
        to_sheet: dif_to_sheet,
        from_sheet: sheet_to_dif
    };
}();
var ETH = /*#__PURE__*/ function() {
    function decode(s /*:string*/ ) /*:string*/ {
        return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
    }
    function encode(s /*:string*/ ) /*:string*/ {
        return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
    }
    function eth_to_aoa(str /*:string*/ , opts) /*:AOA*/ {
        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];
        for(; ri !== records.length; ++ri){
            var record = records[ri].trim().split(":");
            if (record[0] !== "cell") continue;
            var addr = decode_cell(record[1]);
            if (arr.length <= addr.r) {
                for(R = arr.length; R <= addr.r; ++R)if (!arr[R]) arr[R] = [];
            }
            R = addr.r;
            C = addr.c;
            switch(record[2]){
                case "t":
                    arr[R][C] = decode(record[3]);
                    break;
                case "v":
                    arr[R][C] = +record[3];
                    break;
                case "vtf":
                    var _f = record[record.length - 1];
                /* falls through */ case "vtc":
                    switch(record[3]){
                        case "nl":
                            arr[R][C] = +record[4] ? true : false;
                            break;
                        default:
                            arr[R][C] = +record[4];
                            break;
                    }
                    if (record[2] == "vtf") arr[R][C] = [
                        arr[R][C],
                        _f
                    ];
            }
        }
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return arr;
    }
    function eth_to_sheet(d /*:string*/ , opts) /*:Worksheet*/ {
        return aoa_to_sheet(eth_to_aoa(d, opts), opts);
    }
    function eth_to_workbook(d /*:string*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(eth_to_sheet(d, opts), opts);
    }
    var header = [
        "socialcalc:version:1.5",
        "MIME-Version: 1.0",
        "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
    ].join("\n");
    var sep = [
        "--SocialCalcSpreadsheetControlSave",
        "Content-type: text/plain; charset=UTF-8"
    ].join("\n") + "\n";
    /* TODO: the other parts */ var meta = [
        "# SocialCalc Spreadsheet Control Save",
        "part:sheet"
    ].join("\n");
    var end = "--SocialCalcSpreadsheetControlSave--";
    function sheet_to_eth_data(ws /*:Worksheet*/ ) /*:string*/ {
        if (!ws || !ws["!ref"]) return "";
        var o /*:Array<string>*/  = [], oo /*:Array<string>*/  = [], cell, coord = "";
        var r = decode_range(ws["!ref"]);
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R)for(var C = r.s.c; C <= r.e.c; ++C){
            coord = encode_cell({
                r: R,
                c: C
            });
            cell = dense ? (ws[R] || [])[C] : ws[coord];
            if (!cell || cell.v == null || cell.t === "z") continue;
            oo = [
                "cell",
                coord,
                "t"
            ];
            switch(cell.t){
                case "s":
                case "str":
                    oo.push(encode(cell.v));
                    break;
                case "n":
                    if (!cell.f) {
                        oo[2] = "v";
                        oo[3] = cell.v;
                    } else {
                        oo[2] = "vtf";
                        oo[3] = "n";
                        oo[4] = cell.v;
                        oo[5] = encode(cell.f);
                    }
                    break;
                case "b":
                    oo[2] = "vt" + (cell.f ? "f" : "c");
                    oo[3] = "nl";
                    oo[4] = cell.v ? "1" : "0";
                    oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                    break;
                case "d":
                    var t = datenum(parseDate(cell.v));
                    oo[2] = "vtc";
                    oo[3] = "nd";
                    oo[4] = "" + t;
                    oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
                    break;
                case "e":
                    continue;
            }
            o.push(oo.join(":"));
        }
        o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
        o.push("valueformat:1:text-wiki");
        //o.push("copiedfrom:" + ws['!ref']); // clipboard only
        return o.join("\n");
    }
    function sheet_to_eth(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
        return [
            header,
            sep,
            meta,
            sep,
            sheet_to_eth_data(ws),
            end
        ].join("\n");
    // return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
    }
    return {
        to_workbook: eth_to_workbook,
        to_sheet: eth_to_sheet,
        from_sheet: sheet_to_eth
    };
}();
var PRN = /*#__PURE__*/ function() {
    function set_text_arr(data /*:string*/ , arr /*:AOA*/ , R /*:number*/ , C /*:number*/ , o /*:any*/ ) {
        if (o.raw) arr[R][C] = data;
        else if (data === "") ;
        else if (data === "TRUE") arr[R][C] = true;
        else if (data === "FALSE") arr[R][C] = false;
        else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
        else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
        else arr[R][C] = data;
    }
    function prn_to_aoa_str(f /*:string*/ , opts) /*:AOA*/ {
        var o = opts || {};
        var arr /*:AOA*/  = [];
        if (!f || f.length === 0) return arr;
        var lines = f.split(/[\r\n]/);
        var L = lines.length - 1;
        while(L >= 0 && lines[L].length === 0)--L;
        var start = 10, idx = 0;
        var R = 0;
        for(; R <= L; ++R){
            idx = lines[R].indexOf(" ");
            if (idx == -1) idx = lines[R].length;
            else idx++;
            start = Math.max(start, idx);
        }
        for(R = 0; R <= L; ++R){
            arr[R] = [];
            /* TODO: confirm that widths are always 10 */ var C = 0;
            set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
            for(C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
        }
        if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
        return arr;
    }
    // List of accepted CSV separators
    var guess_seps = {
        /*::[*/ 0x2C: ",",
        /*::[*/ 0x09: "	",
        /*::[*/ 0x3B: ";",
        /*::[*/ 0x7C: "|"
    };
    // CSV separator weights to be used in case of equal numbers
    var guess_sep_weights = {
        /*::[*/ 0x2C: 3,
        /*::[*/ 0x09: 2,
        /*::[*/ 0x3B: 1,
        /*::[*/ 0x7C: 0
    };
    function guess_sep(str) {
        var cnt = {}, instr = false, end = 0, cc = 0;
        for(; end < str.length; ++end){
            if ((cc = str.charCodeAt(end)) == 0x22) instr = !instr;
            else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
        }
        cc = [];
        for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) cc.push([
            cnt[end],
            end
        ]);
        if (!cc.length) {
            cnt = guess_sep_weights;
            for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) cc.push([
                cnt[end],
                end
            ]);
        }
        cc.sort(function(a, b) {
            return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
        });
        return guess_seps[cc.pop()[1]] || 0x2C;
    }
    function dsv_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        var o = opts || {};
        var sep = "";
        if (DENSE != null && o.dense == null) o.dense = DENSE;
        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;
        var range /*:Range*/  = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: 0
            }
        } /*:any*/ ;
        if (str.slice(0, 4) == "sep=") {
            // If the line ends in \r\n
            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
                sep = str.charAt(4);
                str = str.slice(7);
            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
                sep = str.charAt(4);
                str = str.slice(6);
            } else sep = guess_sep(str.slice(0, 1024));
        } else if (o && o.FS) sep = o.FS;
        else sep = guess_sep(str.slice(0, 1024));
        var R = 0, C = 0, v = 0;
        var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
        str = str.replace(/\r\n/mg, "\n");
        var _re /*:?RegExp*/  = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
        function finish_cell() {
            var s = str.slice(start, end);
            var cell = {} /*:any*/ ;
            if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1, -1).replace(/""/g, '"');
            if (s.length === 0) cell.t = "z";
            else if (o.raw) {
                cell.t = "s";
                cell.v = s;
            } else if (s.trim().length === 0) {
                cell.t = "s";
                cell.v = s;
            } else if (s.charCodeAt(0) == 0x3D) {
                if (s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) {
                    cell.t = "s";
                    cell.v = s.slice(2, -1).replace(/""/g, '"');
                } else if (fuzzyfmla(s)) {
                    cell.t = "n";
                    cell.f = s.slice(1);
                } else {
                    cell.t = "s";
                    cell.v = s;
                }
            } else if (s == "TRUE") {
                cell.t = "b";
                cell.v = true;
            } else if (s == "FALSE") {
                cell.t = "b";
                cell.v = false;
            } else if (!isNaN(v = fuzzynum(s))) {
                cell.t = "n";
                if (o.cellText !== false) cell.w = s;
                cell.v = v;
            } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
                cell.z = o.dateNF || table_fmt[14];
                var k = 0;
                if (_re && s.match(_re)) {
                    s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
                    k = 1;
                }
                if (o.cellDates) {
                    cell.t = "d";
                    cell.v = parseDate(s, k);
                } else {
                    cell.t = "n";
                    cell.v = datenum(parseDate(s, k));
                }
                if (o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
                if (!o.cellNF) delete cell.z;
            } else {
                cell.t = "s";
                cell.v = s;
            }
            if (cell.t == "z") ;
            else if (o.dense) {
                if (!ws[R]) ws[R] = [];
                ws[R][C] = cell;
            } else ws[encode_cell({
                c: C,
                r: R
            })] = cell;
            start = end + 1;
            startcc = str.charCodeAt(start);
            if (range.e.c < C) range.e.c = C;
            if (range.e.r < R) range.e.r = R;
            if (cc == sepcc) ++C;
            else {
                C = 0;
                ++R;
                if (o.sheetRows && o.sheetRows <= R) return true;
            }
        }
        outer: for(; end < str.length; ++end)switch(cc = str.charCodeAt(end)){
            case 0x22:
                if (startcc === 0x22) instr = !instr;
                break;
            case sepcc:
            case 0x0a:
            case 0x0d:
                if (!instr && finish_cell()) break outer;
                break;
            default:
                break;
        }
        if (end - start > 0) finish_cell();
        ws["!ref"] = encode_range(range);
        return ws;
    }
    function prn_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
        if (opts.FS) return dsv_to_sheet_str(str, opts);
        if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
        if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
        return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    }
    function prn_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        var str = "", bytes = opts.type == "string" ? [
            0,
            0,
            0,
            0
        ] : firstbyte(d, opts);
        switch(opts.type){
            case "base64":
                str = Base64_decode(d);
                break;
            case "binary":
                str = d;
                break;
            case "buffer":
                if (opts.codepage == 65001) str = d.toString("utf8"); // TODO: test if buf
                else if (opts.codepage && typeof $cptable !== "undefined") str = $cptable.utils.decode(opts.codepage, d);
                else str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
                break;
            case "array":
                str = cc2str(d);
                break;
            case "string":
                str = d;
                break;
            default:
                throw new Error("Unrecognized type " + opts.type);
        }
        if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
        else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001) str = utf8read(str);
        else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
        if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
        return prn_to_sheet_str(str, opts);
    }
    function prn_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(prn_to_sheet(d, opts), opts);
    }
    function sheet_to_prn(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
        var o /*:Array<string>*/  = [];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R){
            var oo /*:Array<string>*/  = [];
            for(var C = r.s.c; C <= r.e.c; ++C){
                var coord = encode_cell({
                    r: R,
                    c: C
                });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell || cell.v == null) {
                    oo.push("          ");
                    continue;
                }
                var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
                while(w.length < 10)w += " ";
                oo.push(w + (C === 0 ? " " : ""));
            }
            o.push(oo.join(""));
        }
        return o.join("\n");
    }
    return {
        to_workbook: prn_to_workbook,
        to_sheet: prn_to_sheet,
        from_sheet: sheet_to_prn
    };
}();
/* Excel defaults to SYLK but warns if data is not valid */ function read_wb_ID(d, opts) {
    var o = opts || {}, OLD_WTF = !!o.WTF;
    o.WTF = true;
    try {
        var out = SYLK.to_workbook(d, o);
        o.WTF = OLD_WTF;
        return out;
    } catch (e) {
        o.WTF = OLD_WTF;
        if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
        return PRN.to_workbook(d, opts);
    }
}
var WK_ = /*#__PURE__*/ function() {
    function lotushopper(data, cb /*:RecordHopperCB*/ , opts /*:any*/ ) {
        if (!data) return;
        prep_blob(data, data.l || 0);
        var Enum = opts.Enum || WK1Enum;
        while(data.l < data.length){
            var RT = data.read_shift(2);
            var R = Enum[RT] || Enum[0xFFFF];
            var length = data.read_shift(2);
            var tgt = data.l + length;
            var d = R.f && R.f(data, length, opts);
            data.l = tgt;
            if (cb(d, R, RT)) return;
        }
    }
    function lotus_to_workbook(d /*:RawData*/ , opts) {
        switch(opts.type){
            case "base64":
                return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
            case "binary":
                return lotus_to_workbook_buf(s2a(d), opts);
            case "buffer":
            case "array":
                return lotus_to_workbook_buf(d, opts);
        }
        throw "Unsupported type " + opts.type;
    }
    function lotus_to_workbook_buf(d, opts) /*:Workbook*/ {
        if (!d) return d;
        var o = opts || {};
        if (DENSE != null && o.dense == null) o.dense = DENSE;
        var s /*:Worksheet*/  = o.dense ? [] : {}, n = "Sheet1", next_n = "", sidx = 0;
        var sheets = {}, snames = [], realnames = [];
        var refguess = {
            s: {
                r: 0,
                c: 0
            },
            e: {
                r: 0,
                c: 0
            }
        };
        var sheetRows = o.sheetRows || 0;
        if (d[2] == 0x00) {
            if (d[3] == 0x08 || d[3] == 0x09) {
                if (d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error("Unsupported Works 3 for Mac file");
            }
        }
        if (d[2] == 0x02) {
            o.Enum = WK1Enum;
            lotushopper(d, function(val, R, RT) {
                switch(RT){
                    case 0x00:
                        /* BOF */ o.vers = val;
                        if (val >= 0x1000) o.qpro = true;
                        break;
                    case 0x06:
                        refguess = val;
                        break; /* RANGE */ 
                    case 0xCC:
                        if (val) next_n = val;
                        break; /* SHEETNAMECS */ 
                    case 0xDE:
                        next_n = val;
                        break; /* SHEETNAMELP */ 
                    case 0x0F:
                    /* LABEL */ case 0x33:
                        /* STRING */ if (!o.qpro) val[1].v = val[1].v.slice(1);
                    /* falls through */ case 0x0D:
                    /* INTEGER */ case 0x0E:
                    /* NUMBER */ case 0x10:
                        /* FORMULA */ /* TODO: actual translation of the format code */ if (RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
                            val[1].z = o.dateNF || table_fmt[14];
                            if (o.cellDates) {
                                val[1].t = "d";
                                val[1].v = numdate(val[1].v);
                            }
                        }
                        if (o.qpro) {
                            if (val[3] > sidx) {
                                s["!ref"] = encode_range(refguess);
                                sheets[n] = s;
                                snames.push(n);
                                s = o.dense ? [] : {};
                                refguess = {
                                    s: {
                                        r: 0,
                                        c: 0
                                    },
                                    e: {
                                        r: 0,
                                        c: 0
                                    }
                                };
                                sidx = val[3];
                                n = next_n || "Sheet" + (sidx + 1);
                                next_n = "";
                            }
                        }
                        var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];
                        if (tmpcell) {
                            tmpcell.t = val[1].t;
                            tmpcell.v = val[1].v;
                            if (val[1].z != null) tmpcell.z = val[1].z;
                            if (val[1].f != null) tmpcell.f = val[1].f;
                            break;
                        }
                        if (o.dense) {
                            if (!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        break;
                    default:
                }
            }, o);
        } else if (d[2] == 0x1A || d[2] == 0x0E) {
            o.Enum = WK3Enum;
            if (d[2] == 0x0E) {
                o.qpro = true;
                d.l = 0;
            }
            lotushopper(d, function(val, R, RT) {
                switch(RT){
                    case 0xCC:
                        n = val;
                        break; /* SHEETNAMECS */ 
                    case 0x16:
                        /* LABEL16 */ val[1].v = val[1].v.slice(1);
                    /* falls through */ case 0x17:
                    /* NUMBER17 */ case 0x18:
                    /* NUMBER18 */ case 0x19:
                    /* FORMULA19 */ case 0x25:
                    /* NUMBER25 */ case 0x27:
                    /* NUMBER27 */ case 0x28:
                        /* FORMULA28 */ if (val[3] > sidx) {
                            s["!ref"] = encode_range(refguess);
                            sheets[n] = s;
                            snames.push(n);
                            s = o.dense ? [] : {};
                            refguess = {
                                s: {
                                    r: 0,
                                    c: 0
                                },
                                e: {
                                    r: 0,
                                    c: 0
                                }
                            };
                            sidx = val[3];
                            n = "Sheet" + (sidx + 1);
                        }
                        if (sheetRows > 0 && val[0].r >= sheetRows) break;
                        if (o.dense) {
                            if (!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
                        if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
                        break;
                    case 0x1B:
                        /* XFORMAT */ if (val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];
                        break;
                    case 0x0601:
                        /* SHEETINFOQP */ realnames[val[0]] = val[1];
                        if (val[0] == sidx) n = val[1];
                        break;
                    default:
                        break;
                }
            }, o);
        } else throw new Error("Unrecognized LOTUS BOF " + d[2]);
        s["!ref"] = encode_range(refguess);
        sheets[next_n || n] = s;
        snames.push(next_n || n);
        if (!realnames.length) return {
            SheetNames: snames,
            Sheets: sheets
        };
        var osheets = {}, rnames = [];
        /* TODO: verify no collisions */ for(var i = 0; i < realnames.length; ++i)if (sheets[snames[i]]) {
            rnames.push(realnames[i] || snames[i]);
            osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
        } else {
            rnames.push(realnames[i]);
            osheets[realnames[i]] = {
                "!ref": "A1"
            };
        }
        return {
            SheetNames: rnames,
            Sheets: osheets
        };
    }
    function sheet_to_wk1(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write WK1 to JS string");
        var ba = buf_array();
        var range = safe_decode_range(ws["!ref"]);
        var dense = Array.isArray(ws);
        var cols = [];
        write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));
        write_biff_rec(ba, 0x06, write_RANGE(range));
        var max_R = Math.min(range.e.r, 8191);
        for(var R = range.s.r; R <= max_R; ++R){
            var rr = encode_row(R);
            for(var C = range.s.c; C <= range.e.c; ++C){
                if (R === range.s.r) cols[C] = encode_col(C);
                var ref = cols[C] + rr;
                var cell = dense ? (ws[R] || [])[C] : ws[ref];
                if (!cell || cell.t == "z") continue;
                /* TODO: formula records */ if (cell.t == "n") {
                    if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));
                    else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));
                } else {
                    var str = format_cell(cell);
                    write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));
                }
            }
        }
        write_biff_rec(ba, 0x01);
        return ba.end();
    }
    function book_to_wk3(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write WK3 to JS string");
        var ba = buf_array();
        write_biff_rec(ba, 0x00, write_BOF_WK3(wb));
        for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i)if ((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));
        var wsidx = 0;
        for(i = 0; i < wb.SheetNames.length; ++i){
            var ws = wb.Sheets[wb.SheetNames[i]];
            if (!ws || !ws["!ref"]) continue;
            var range = safe_decode_range(ws["!ref"]);
            var dense = Array.isArray(ws);
            var cols = [];
            var max_R = Math.min(range.e.r, 8191);
            for(var R = range.s.r; R <= max_R; ++R){
                var rr = encode_row(R);
                for(var C = range.s.c; C <= range.e.c; ++C){
                    if (R === range.s.r) cols[C] = encode_col(C);
                    var ref = cols[C] + rr;
                    var cell = dense ? (ws[R] || [])[C] : ws[ref];
                    if (!cell || cell.t == "z") continue;
                    /* TODO: FORMULA19 NUMBER18 records */ if (cell.t == "n") write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));
                    else {
                        var str = format_cell(cell);
                        /* TODO: max len? */ write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
                    }
                }
            }
            ++wsidx;
        }
        write_biff_rec(ba, 0x01);
        return ba.end();
    }
    function write_BOF_WK1(v /*:number*/ ) {
        var out = new_buf(2);
        out.write_shift(2, v);
        return out;
    }
    function write_BOF_WK3(wb /*:Workbook*/ ) {
        var out = new_buf(26);
        out.write_shift(2, 0x1000);
        out.write_shift(2, 0x0004);
        out.write_shift(4, 0x0000);
        var rows = 0, cols = 0, wscnt = 0;
        for(var i = 0; i < wb.SheetNames.length; ++i){
            var name = wb.SheetNames[i];
            var ws = wb.Sheets[name];
            if (!ws || !ws["!ref"]) continue;
            ++wscnt;
            var range = decode_range(ws["!ref"]);
            if (rows < range.e.r) rows = range.e.r;
            if (cols < range.e.c) cols = range.e.c;
        }
        if (rows > 8191) rows = 8191;
        out.write_shift(2, rows);
        out.write_shift(1, wscnt);
        out.write_shift(1, cols);
        out.write_shift(2, 0x00);
        out.write_shift(2, 0x00);
        out.write_shift(1, 0x01);
        out.write_shift(1, 0x02);
        out.write_shift(4, 0);
        out.write_shift(4, 0);
        return out;
    }
    function parse_RANGE(blob, length, opts) {
        var o = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: 0
            }
        };
        if (length == 8 && opts.qpro) {
            o.s.c = blob.read_shift(1);
            blob.l++;
            o.s.r = blob.read_shift(2);
            o.e.c = blob.read_shift(1);
            blob.l++;
            o.e.r = blob.read_shift(2);
            return o;
        }
        o.s.c = blob.read_shift(2);
        o.s.r = blob.read_shift(2);
        if (length == 12 && opts.qpro) blob.l += 2;
        o.e.c = blob.read_shift(2);
        o.e.r = blob.read_shift(2);
        if (length == 12 && opts.qpro) blob.l += 2;
        if (o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
        return o;
    }
    function write_RANGE(range) {
        var out = new_buf(8);
        out.write_shift(2, range.s.c);
        out.write_shift(2, range.s.r);
        out.write_shift(2, range.e.c);
        out.write_shift(2, range.e.r);
        return out;
    }
    function parse_cell(blob, length, opts) {
        var o = [
            {
                c: 0,
                r: 0
            },
            {
                t: "n",
                v: 0
            },
            0,
            0
        ];
        if (opts.qpro && opts.vers != 0x5120) {
            o[0].c = blob.read_shift(1);
            o[3] = blob.read_shift(1);
            o[0].r = blob.read_shift(2);
            blob.l += 2;
        } else {
            o[2] = blob.read_shift(1);
            o[0].c = blob.read_shift(2);
            o[0].r = blob.read_shift(2);
        }
        return o;
    }
    function parse_LABEL(blob, length, opts) {
        var tgt = blob.l + length;
        var o = parse_cell(blob, length, opts);
        o[1].t = "s";
        if (opts.vers == 0x5120) {
            blob.l++;
            var len = blob.read_shift(1);
            o[1].v = blob.read_shift(len, "utf8");
            return o;
        }
        if (opts.qpro) blob.l++;
        o[1].v = blob.read_shift(tgt - blob.l, "cstr");
        return o;
    }
    function write_LABEL(R, C, s) {
        /* TODO: encoding */ var o = new_buf(7 + s.length);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(1, 0x27); // ??
        for(var i = 0; i < o.length; ++i){
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
        }
        o.write_shift(1, 0);
        return o;
    }
    function parse_INTEGER(blob, length, opts) {
        var o = parse_cell(blob, length, opts);
        o[1].v = blob.read_shift(2, "i");
        return o;
    }
    function write_INTEGER(R, C, v) {
        var o = new_buf(7);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(2, v, "i");
        return o;
    }
    function parse_NUMBER(blob, length, opts) {
        var o = parse_cell(blob, length, opts);
        o[1].v = blob.read_shift(8, "f");
        return o;
    }
    function write_NUMBER(R, C, v) {
        var o = new_buf(13);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(8, v, "f");
        return o;
    }
    function parse_FORMULA(blob, length, opts) {
        var tgt = blob.l + length;
        var o = parse_cell(blob, length, opts);
        /* TODO: formula */ o[1].v = blob.read_shift(8, "f");
        if (opts.qpro) blob.l = tgt;
        else {
            var flen = blob.read_shift(2);
            wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
            blob.l += flen;
        }
        return o;
    }
    function wk1_parse_rc(B, V, col) {
        var rel = V & 0x8000;
        V &= -32769;
        V = (rel ? B : 0) + (V >= 0x2000 ? V - 0x4000 : V);
        return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
    }
    /* var oprec = [
		8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,
		3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8
	]; */ /* TODO: flesh out */ var FuncTab = {
        0x33: [
            "FALSE",
            0
        ],
        0x34: [
            "TRUE",
            0
        ],
        0x46: [
            "LEN",
            1
        ],
        0x50: [
            "SUM",
            69
        ],
        0x51: [
            "AVERAGEA",
            69
        ],
        0x52: [
            "COUNTA",
            69
        ],
        0x53: [
            "MINA",
            69
        ],
        0x54: [
            "MAXA",
            69
        ],
        0x6F: [
            "T",
            1
        ]
    };
    var BinOpTab = [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "+",
        "-",
        "*",
        "/",
        "^",
        "=",
        "<>",
        "<=",
        ">=",
        "<",
        ">",
        "",
        "",
        "",
        "",
        "&",
        "",
        "",
        "",
        "",
        "",
        "",
        "" // eslint-disable-line no-mixed-spaces-and-tabs
    ];
    function wk1_fmla_to_csf(blob, o) {
        prep_blob(blob, 0);
        var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
        while(blob.l < blob.length){
            var cc = blob[blob.l++];
            switch(cc){
                case 0x00:
                    out.push(blob.read_shift(8, "f"));
                    break;
                case 0x01:
                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    out.push(C + R);
                    break;
                case 0x02:
                    var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    out.push(c + r + ":" + C + R);
                    break;
                case 0x03:
                    if (blob.l < blob.length) {
                        console.error("WK1 premature formula end");
                        return;
                    }
                    break;
                case 0x04:
                    out.push("(" + out.pop() + ")");
                    break;
                case 0x05:
                    out.push(blob.read_shift(2));
                    break;
                case 0x06:
                    /* TODO: text encoding */ var Z = "";
                    while(cc = blob[blob.l++])Z += String.fromCharCode(cc);
                    out.push('"' + Z.replace(/"/g, '""') + '"');
                    break;
                case 0x08:
                    out.push("-" + out.pop());
                    break;
                case 0x17:
                    out.push("+" + out.pop());
                    break;
                case 0x16:
                    out.push("NOT(" + out.pop() + ")");
                    break;
                case 0x14:
                case 0x15:
                    argR = out.pop();
                    argL = out.pop();
                    out.push([
                        "AND",
                        "OR"
                    ][cc - 0x14] + "(" + argL + "," + argR + ")");
                    break;
                default:
                    if (cc < 0x20 && BinOpTab[cc]) {
                        argR = out.pop();
                        argL = out.pop();
                        out.push(argL + BinOpTab[cc] + argR);
                    } else if (FuncTab[cc]) {
                        argc = FuncTab[cc][1];
                        if (argc == 69) argc = blob[blob.l++];
                        if (argc > out.length) {
                            console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
                            return;
                        }
                        var args = out.slice(-argc);
                        out.length -= argc;
                        out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
                    } else if (cc <= 0x07) return console.error("WK1 invalid opcode " + cc.toString(16));
                    else if (cc <= 0x18) return console.error("WK1 unsupported op " + cc.toString(16));
                    else if (cc <= 0x1E) return console.error("WK1 invalid opcode " + cc.toString(16));
                    else if (cc <= 0x73) return console.error("WK1 unsupported function opcode " + cc.toString(16));
                    else return console.error("WK1 unrecognized opcode " + cc.toString(16));
            }
        }
        if (out.length == 1) o[1].f = "" + out[0];
        else console.error("WK1 bad formula parse |" + out.join("|") + "|");
    }
    function parse_cell_3(blob /*::, length*/ ) {
        var o = [
            {
                c: 0,
                r: 0
            },
            {
                t: "n",
                v: 0
            },
            0
        ];
        o[0].r = blob.read_shift(2);
        o[3] = blob[blob.l++];
        o[0].c = blob[blob.l++];
        return o;
    }
    function parse_LABEL_16(blob, length) {
        var o = parse_cell_3(blob, length);
        o[1].t = "s";
        o[1].v = blob.read_shift(length - 4, "cstr");
        return o;
    }
    function write_LABEL_16(R, C, wsidx, s) {
        /* TODO: encoding */ var o = new_buf(6 + s.length);
        o.write_shift(2, R);
        o.write_shift(1, wsidx);
        o.write_shift(1, C);
        o.write_shift(1, 0x27);
        for(var i = 0; i < s.length; ++i){
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
        }
        o.write_shift(1, 0);
        return o;
    }
    function parse_NUMBER_18(blob, length) {
        var o = parse_cell_3(blob, length);
        o[1].v = blob.read_shift(2);
        var v = o[1].v >> 1;
        if (o[1].v & 0x1) switch(v & 0x07){
            case 0:
                v = (v >> 3) * 5000;
                break;
            case 1:
                v = (v >> 3) * 500;
                break;
            case 2:
                v = (v >> 3) / 20;
                break;
            case 3:
                v = (v >> 3) / 200;
                break;
            case 4:
                v = (v >> 3) / 2000;
                break;
            case 5:
                v = (v >> 3) / 20000;
                break;
            case 6:
                v = (v >> 3) / 16;
                break;
            case 7:
                v = (v >> 3) / 64;
                break;
        }
        o[1].v = v;
        return o;
    }
    function parse_NUMBER_17(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(4);
        var v2 = blob.read_shift(4);
        var e = blob.read_shift(2);
        if (e == 0xFFFF) {
            if (v1 === 0 && v2 === 0xC0000000) {
                o[1].t = "e";
                o[1].v = 0x0F;
            } else if (v1 === 0 && v2 === 0xD0000000) {
                o[1].t = "e";
                o[1].v = 0x2A;
            } else o[1].v = 0;
            return o;
        }
        var s = e & 0x8000;
        e = (e & 0x7FFF) - 16446;
        o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));
        return o;
    }
    function write_NUMBER_17(R, C, wsidx, v) {
        var o = new_buf(14);
        o.write_shift(2, R);
        o.write_shift(1, wsidx);
        o.write_shift(1, C);
        if (v == 0) {
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(2, 0xFFFF);
            return o;
        }
        var s = 0, e = 0, v1 = 0, v2 = 0;
        if (v < 0) {
            s = 1;
            v = -v;
        }
        e = Math.log2(v) | 0;
        v /= Math.pow(2, e - 31);
        v2 = v >>> 0;
        if ((v2 & 0x80000000) == 0) {
            v /= 2;
            ++e;
            v2 = v >>> 0;
        }
        v -= v2;
        v2 |= 0x80000000;
        v2 >>>= 0;
        v *= Math.pow(2, 32);
        v1 = v >>> 0;
        o.write_shift(4, v1);
        o.write_shift(4, v2);
        e += 0x3FFF + (s ? 0x8000 : 0);
        o.write_shift(2, e);
        return o;
    }
    function parse_FORMULA_19(blob, length) {
        var o = parse_NUMBER_17(blob, 14);
        blob.l += length - 14; /* TODO: WK3 formula */ 
        return o;
    }
    function parse_NUMBER_25(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(4);
        o[1].v = v1 >> 6;
        return o;
    }
    function parse_NUMBER_27(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(8, "f");
        o[1].v = v1;
        return o;
    }
    function parse_FORMULA_28(blob, length) {
        var o = parse_NUMBER_27(blob, 14);
        blob.l += length - 10; /* TODO: formula */ 
        return o;
    }
    function parse_SHEETNAMECS(blob, length) {
        return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
    }
    function parse_SHEETNAMELP(blob, length) {
        var len = blob[blob.l++];
        if (len > length - 1) len = length - 1;
        var o = "";
        while(o.length < len)o += String.fromCharCode(blob[blob.l++]);
        return o;
    }
    function parse_SHEETINFOQP(blob, length, opts) {
        if (!opts.qpro || length < 21) return;
        var id = blob.read_shift(1);
        blob.l += 17;
        blob.l += 1; //var len = blob.read_shift(1);
        blob.l += 2;
        var nm = blob.read_shift(length - 21, "cstr");
        return [
            id,
            nm
        ];
    }
    function parse_XFORMAT(blob, length) {
        var o = {}, tgt = blob.l + length;
        while(blob.l < tgt){
            var dt = blob.read_shift(2);
            if (dt == 0x36b0) {
                o[dt] = [
                    0,
                    ""
                ];
                o[dt][0] = blob.read_shift(2);
                while(blob[blob.l]){
                    o[dt][1] += String.fromCharCode(blob[blob.l]);
                    blob.l++;
                }
                blob.l++;
            }
        // TODO: 0x3a99 ??
        }
        return o;
    }
    function write_XFORMAT_SHEETNAME(name, wsidx) {
        var out = new_buf(5 + name.length);
        out.write_shift(2, 0x36b0);
        out.write_shift(2, wsidx);
        for(var i = 0; i < name.length; ++i){
            var cc = name.charCodeAt(i);
            out[out.l++] = cc > 0x7F ? 0x5F : cc;
        }
        out[out.l++] = 0;
        return out;
    }
    var WK1Enum = {
        /*::[*/ 0x0000: {
            n: "BOF",
            f: parseuint16
        },
        /*::[*/ 0x0001: {
            n: "EOF"
        },
        /*::[*/ 0x0002: {
            n: "CALCMODE"
        },
        /*::[*/ 0x0003: {
            n: "CALCORDER"
        },
        /*::[*/ 0x0004: {
            n: "SPLIT"
        },
        /*::[*/ 0x0005: {
            n: "SYNC"
        },
        /*::[*/ 0x0006: {
            n: "RANGE",
            f: parse_RANGE
        },
        /*::[*/ 0x0007: {
            n: "WINDOW1"
        },
        /*::[*/ 0x0008: {
            n: "COLW1"
        },
        /*::[*/ 0x0009: {
            n: "WINTWO"
        },
        /*::[*/ 0x000A: {
            n: "COLW2"
        },
        /*::[*/ 0x000B: {
            n: "NAME"
        },
        /*::[*/ 0x000C: {
            n: "BLANK"
        },
        /*::[*/ 0x000D: {
            n: "INTEGER",
            f: parse_INTEGER
        },
        /*::[*/ 0x000E: {
            n: "NUMBER",
            f: parse_NUMBER
        },
        /*::[*/ 0x000F: {
            n: "LABEL",
            f: parse_LABEL
        },
        /*::[*/ 0x0010: {
            n: "FORMULA",
            f: parse_FORMULA
        },
        /*::[*/ 0x0018: {
            n: "TABLE"
        },
        /*::[*/ 0x0019: {
            n: "ORANGE"
        },
        /*::[*/ 0x001A: {
            n: "PRANGE"
        },
        /*::[*/ 0x001B: {
            n: "SRANGE"
        },
        /*::[*/ 0x001C: {
            n: "FRANGE"
        },
        /*::[*/ 0x001D: {
            n: "KRANGE1"
        },
        /*::[*/ 0x0020: {
            n: "HRANGE"
        },
        /*::[*/ 0x0023: {
            n: "KRANGE2"
        },
        /*::[*/ 0x0024: {
            n: "PROTEC"
        },
        /*::[*/ 0x0025: {
            n: "FOOTER"
        },
        /*::[*/ 0x0026: {
            n: "HEADER"
        },
        /*::[*/ 0x0027: {
            n: "SETUP"
        },
        /*::[*/ 0x0028: {
            n: "MARGINS"
        },
        /*::[*/ 0x0029: {
            n: "LABELFMT"
        },
        /*::[*/ 0x002A: {
            n: "TITLES"
        },
        /*::[*/ 0x002B: {
            n: "SHEETJS"
        },
        /*::[*/ 0x002D: {
            n: "GRAPH"
        },
        /*::[*/ 0x002E: {
            n: "NGRAPH"
        },
        /*::[*/ 0x002F: {
            n: "CALCCOUNT"
        },
        /*::[*/ 0x0030: {
            n: "UNFORMATTED"
        },
        /*::[*/ 0x0031: {
            n: "CURSORW12"
        },
        /*::[*/ 0x0032: {
            n: "WINDOW"
        },
        /*::[*/ 0x0033: {
            n: "STRING",
            f: parse_LABEL
        },
        /*::[*/ 0x0037: {
            n: "PASSWORD"
        },
        /*::[*/ 0x0038: {
            n: "LOCKED"
        },
        /*::[*/ 0x003C: {
            n: "QUERY"
        },
        /*::[*/ 0x003D: {
            n: "QUERYNAME"
        },
        /*::[*/ 0x003E: {
            n: "PRINT"
        },
        /*::[*/ 0x003F: {
            n: "PRINTNAME"
        },
        /*::[*/ 0x0040: {
            n: "GRAPH2"
        },
        /*::[*/ 0x0041: {
            n: "GRAPHNAME"
        },
        /*::[*/ 0x0042: {
            n: "ZOOM"
        },
        /*::[*/ 0x0043: {
            n: "SYMSPLIT"
        },
        /*::[*/ 0x0044: {
            n: "NSROWS"
        },
        /*::[*/ 0x0045: {
            n: "NSCOLS"
        },
        /*::[*/ 0x0046: {
            n: "RULER"
        },
        /*::[*/ 0x0047: {
            n: "NNAME"
        },
        /*::[*/ 0x0048: {
            n: "ACOMM"
        },
        /*::[*/ 0x0049: {
            n: "AMACRO"
        },
        /*::[*/ 0x004A: {
            n: "PARSE"
        },
        /*::[*/ 0x0066: {
            n: "PRANGES??"
        },
        /*::[*/ 0x0067: {
            n: "RRANGES??"
        },
        /*::[*/ 0x0068: {
            n: "FNAME??"
        },
        /*::[*/ 0x0069: {
            n: "MRANGES??"
        },
        /*::[*/ 0x00CC: {
            n: "SHEETNAMECS",
            f: parse_SHEETNAMECS
        },
        /*::[*/ 0x00DE: {
            n: "SHEETNAMELP",
            f: parse_SHEETNAMELP
        },
        /*::[*/ 0xFFFF: {
            n: ""
        }
    };
    var WK3Enum = {
        /*::[*/ 0x0000: {
            n: "BOF"
        },
        /*::[*/ 0x0001: {
            n: "EOF"
        },
        /*::[*/ 0x0002: {
            n: "PASSWORD"
        },
        /*::[*/ 0x0003: {
            n: "CALCSET"
        },
        /*::[*/ 0x0004: {
            n: "WINDOWSET"
        },
        /*::[*/ 0x0005: {
            n: "SHEETCELLPTR"
        },
        /*::[*/ 0x0006: {
            n: "SHEETLAYOUT"
        },
        /*::[*/ 0x0007: {
            n: "COLUMNWIDTH"
        },
        /*::[*/ 0x0008: {
            n: "HIDDENCOLUMN"
        },
        /*::[*/ 0x0009: {
            n: "USERRANGE"
        },
        /*::[*/ 0x000A: {
            n: "SYSTEMRANGE"
        },
        /*::[*/ 0x000B: {
            n: "ZEROFORCE"
        },
        /*::[*/ 0x000C: {
            n: "SORTKEYDIR"
        },
        /*::[*/ 0x000D: {
            n: "FILESEAL"
        },
        /*::[*/ 0x000E: {
            n: "DATAFILLNUMS"
        },
        /*::[*/ 0x000F: {
            n: "PRINTMAIN"
        },
        /*::[*/ 0x0010: {
            n: "PRINTSTRING"
        },
        /*::[*/ 0x0011: {
            n: "GRAPHMAIN"
        },
        /*::[*/ 0x0012: {
            n: "GRAPHSTRING"
        },
        /*::[*/ 0x0013: {
            n: "??"
        },
        /*::[*/ 0x0014: {
            n: "ERRCELL"
        },
        /*::[*/ 0x0015: {
            n: "NACELL"
        },
        /*::[*/ 0x0016: {
            n: "LABEL16",
            f: parse_LABEL_16
        },
        /*::[*/ 0x0017: {
            n: "NUMBER17",
            f: parse_NUMBER_17
        },
        /*::[*/ 0x0018: {
            n: "NUMBER18",
            f: parse_NUMBER_18
        },
        /*::[*/ 0x0019: {
            n: "FORMULA19",
            f: parse_FORMULA_19
        },
        /*::[*/ 0x001A: {
            n: "FORMULA1A"
        },
        /*::[*/ 0x001B: {
            n: "XFORMAT",
            f: parse_XFORMAT
        },
        /*::[*/ 0x001C: {
            n: "DTLABELMISC"
        },
        /*::[*/ 0x001D: {
            n: "DTLABELCELL"
        },
        /*::[*/ 0x001E: {
            n: "GRAPHWINDOW"
        },
        /*::[*/ 0x001F: {
            n: "CPA"
        },
        /*::[*/ 0x0020: {
            n: "LPLAUTO"
        },
        /*::[*/ 0x0021: {
            n: "QUERY"
        },
        /*::[*/ 0x0022: {
            n: "HIDDENSHEET"
        },
        /*::[*/ 0x0023: {
            n: "??"
        },
        /*::[*/ 0x0025: {
            n: "NUMBER25",
            f: parse_NUMBER_25
        },
        /*::[*/ 0x0026: {
            n: "??"
        },
        /*::[*/ 0x0027: {
            n: "NUMBER27",
            f: parse_NUMBER_27
        },
        /*::[*/ 0x0028: {
            n: "FORMULA28",
            f: parse_FORMULA_28
        },
        /*::[*/ 0x008E: {
            n: "??"
        },
        /*::[*/ 0x0093: {
            n: "??"
        },
        /*::[*/ 0x0096: {
            n: "??"
        },
        /*::[*/ 0x0097: {
            n: "??"
        },
        /*::[*/ 0x0098: {
            n: "??"
        },
        /*::[*/ 0x0099: {
            n: "??"
        },
        /*::[*/ 0x009A: {
            n: "??"
        },
        /*::[*/ 0x009B: {
            n: "??"
        },
        /*::[*/ 0x009C: {
            n: "??"
        },
        /*::[*/ 0x00A3: {
            n: "??"
        },
        /*::[*/ 0x00AE: {
            n: "??"
        },
        /*::[*/ 0x00AF: {
            n: "??"
        },
        /*::[*/ 0x00B0: {
            n: "??"
        },
        /*::[*/ 0x00B1: {
            n: "??"
        },
        /*::[*/ 0x00B8: {
            n: "??"
        },
        /*::[*/ 0x00B9: {
            n: "??"
        },
        /*::[*/ 0x00BA: {
            n: "??"
        },
        /*::[*/ 0x00BB: {
            n: "??"
        },
        /*::[*/ 0x00BC: {
            n: "??"
        },
        /*::[*/ 0x00C3: {
            n: "??"
        },
        /*::[*/ 0x00C9: {
            n: "??"
        },
        /*::[*/ 0x00CC: {
            n: "SHEETNAMECS",
            f: parse_SHEETNAMECS
        },
        /*::[*/ 0x00CD: {
            n: "??"
        },
        /*::[*/ 0x00CE: {
            n: "??"
        },
        /*::[*/ 0x00CF: {
            n: "??"
        },
        /*::[*/ 0x00D0: {
            n: "??"
        },
        /*::[*/ 0x0100: {
            n: "??"
        },
        /*::[*/ 0x0103: {
            n: "??"
        },
        /*::[*/ 0x0104: {
            n: "??"
        },
        /*::[*/ 0x0105: {
            n: "??"
        },
        /*::[*/ 0x0106: {
            n: "??"
        },
        /*::[*/ 0x0107: {
            n: "??"
        },
        /*::[*/ 0x0109: {
            n: "??"
        },
        /*::[*/ 0x010A: {
            n: "??"
        },
        /*::[*/ 0x010B: {
            n: "??"
        },
        /*::[*/ 0x010C: {
            n: "??"
        },
        /*::[*/ 0x010E: {
            n: "??"
        },
        /*::[*/ 0x010F: {
            n: "??"
        },
        /*::[*/ 0x0180: {
            n: "??"
        },
        /*::[*/ 0x0185: {
            n: "??"
        },
        /*::[*/ 0x0186: {
            n: "??"
        },
        /*::[*/ 0x0189: {
            n: "??"
        },
        /*::[*/ 0x018C: {
            n: "??"
        },
        /*::[*/ 0x0200: {
            n: "??"
        },
        /*::[*/ 0x0202: {
            n: "??"
        },
        /*::[*/ 0x0201: {
            n: "??"
        },
        /*::[*/ 0x0204: {
            n: "??"
        },
        /*::[*/ 0x0205: {
            n: "??"
        },
        /*::[*/ 0x0280: {
            n: "??"
        },
        /*::[*/ 0x0281: {
            n: "??"
        },
        /*::[*/ 0x0282: {
            n: "??"
        },
        /*::[*/ 0x0283: {
            n: "??"
        },
        /*::[*/ 0x0284: {
            n: "??"
        },
        /*::[*/ 0x0285: {
            n: "??"
        },
        /*::[*/ 0x0286: {
            n: "??"
        },
        /*::[*/ 0x0287: {
            n: "??"
        },
        /*::[*/ 0x0288: {
            n: "??"
        },
        /*::[*/ 0x0292: {
            n: "??"
        },
        /*::[*/ 0x0293: {
            n: "??"
        },
        /*::[*/ 0x0294: {
            n: "??"
        },
        /*::[*/ 0x0295: {
            n: "??"
        },
        /*::[*/ 0x0296: {
            n: "??"
        },
        /*::[*/ 0x0299: {
            n: "??"
        },
        /*::[*/ 0x029A: {
            n: "??"
        },
        /*::[*/ 0x0300: {
            n: "??"
        },
        /*::[*/ 0x0304: {
            n: "??"
        },
        /*::[*/ 0x0601: {
            n: "SHEETINFOQP",
            f: parse_SHEETINFOQP
        },
        /*::[*/ 0x0640: {
            n: "??"
        },
        /*::[*/ 0x0642: {
            n: "??"
        },
        /*::[*/ 0x0701: {
            n: "??"
        },
        /*::[*/ 0x0702: {
            n: "??"
        },
        /*::[*/ 0x0703: {
            n: "??"
        },
        /*::[*/ 0x0704: {
            n: "??"
        },
        /*::[*/ 0x0780: {
            n: "??"
        },
        /*::[*/ 0x0800: {
            n: "??"
        },
        /*::[*/ 0x0801: {
            n: "??"
        },
        /*::[*/ 0x0804: {
            n: "??"
        },
        /*::[*/ 0x0A80: {
            n: "??"
        },
        /*::[*/ 0x2AF6: {
            n: "??"
        },
        /*::[*/ 0x3231: {
            n: "??"
        },
        /*::[*/ 0x6E49: {
            n: "??"
        },
        /*::[*/ 0x6F44: {
            n: "??"
        },
        /*::[*/ 0xFFFF: {
            n: ""
        }
    };
    return {
        sheet_to_wk1: sheet_to_wk1,
        book_to_wk3: book_to_wk3,
        to_workbook: lotus_to_workbook
    };
}();
/* 18.4.7 rPr CT_RPrElt */ function parse_rpr(rpr) {
    var font = {}, m = rpr.match(tagregex), i = 0;
    var pass = false;
    if (m) for(; i != m.length; ++i){
        var y = parsexmltag(m[i]);
        switch(y[0].replace(/\w*:/g, "")){
            /* 18.8.12 condense CT_BooleanProperty */ /* ** not required . */ case "<condense":
                break;
            /* 18.8.17 extend CT_BooleanProperty */ /* ** not required . */ case "<extend":
                break;
            /* 18.8.36 shadow CT_BooleanProperty */ /* ** not required . */ case "<shadow":
                if (!y.val) break;
            /* falls through */ case "<shadow>":
            case "<shadow/>":
                font.shadow = 1;
                break;
            case "</shadow>":
                break;
            /* 18.4.1 charset CT_IntProperty TODO */ case "<charset":
                if (y.val == "1") break;
                font.cp = CS2CP[parseInt(y.val, 10)];
                break;
            /* 18.4.2 outline CT_BooleanProperty TODO */ case "<outline":
                if (!y.val) break;
            /* falls through */ case "<outline>":
            case "<outline/>":
                font.outline = 1;
                break;
            case "</outline>":
                break;
            /* 18.4.5 rFont CT_FontName */ case "<rFont":
                font.name = y.val;
                break;
            /* 18.4.11 sz CT_FontSize */ case "<sz":
                font.sz = y.val;
                break;
            /* 18.4.10 strike CT_BooleanProperty */ case "<strike":
                if (!y.val) break;
            /* falls through */ case "<strike>":
            case "<strike/>":
                font.strike = 1;
                break;
            case "</strike>":
                break;
            /* 18.4.13 u CT_UnderlineProperty */ case "<u":
                if (!y.val) break;
                switch(y.val){
                    case "double":
                        font.uval = "double";
                        break;
                    case "singleAccounting":
                        font.uval = "single-accounting";
                        break;
                    case "doubleAccounting":
                        font.uval = "double-accounting";
                        break;
                }
            /* falls through */ case "<u>":
            case "<u/>":
                font.u = 1;
                break;
            case "</u>":
                break;
            /* 18.8.2 b */ case "<b":
                if (y.val == "0") break;
            /* falls through */ case "<b>":
            case "<b/>":
                font.b = 1;
                break;
            case "</b>":
                break;
            /* 18.8.26 i */ case "<i":
                if (y.val == "0") break;
            /* falls through */ case "<i>":
            case "<i/>":
                font.i = 1;
                break;
            case "</i>":
                break;
            /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */ case "<color":
                if (y.rgb) font.color = y.rgb.slice(2, 8);
                break;
            case "<color>":
            case "<color/>":
            case "</color>":
                break;
            /* 18.8.18 family ST_FontFamily */ case "<family":
                font.family = y.val;
                break;
            case "<family>":
            case "<family/>":
            case "</family>":
                break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */ case "<vertAlign":
                font.valign = y.val;
                break;
            case "<vertAlign>":
            case "<vertAlign/>":
            case "</vertAlign>":
                break;
            /* 18.8.35 scheme CT_FontScheme TODO */ case "<scheme":
                break;
            case "<scheme>":
            case "<scheme/>":
            case "</scheme>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error("Unrecognized rich format " + y[0]);
        }
    }
    return font;
}
var parse_rs = /*#__PURE__*/ function() {
    var tregex = matchtag("t"), rpregex = matchtag("rPr");
    /* 18.4.4 r CT_RElt */ function parse_r(r) {
        /* 18.4.12 t ST_Xstring */ var t = r.match(tregex) /*, cp = 65001*/ ;
        if (!t) return {
            t: "s",
            v: ""
        };
        var o /*:Cell*/  = {
            t: "s",
            v: unescapexml(t[1])
        } /*:any*/ ;
        var rpr = r.match(rpregex);
        if (rpr) o.s = parse_rpr(rpr[1]);
        return o;
    }
    var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
    return function parse_rs(rs) {
        return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r) {
            return r.v;
        });
    };
}();
/* Parse a list of <r> tags */ var rs_to_html = /*#__PURE__*/ function parse_rs_factory() {
    var nlregex = /(\r\n|\n)/g;
    function parse_rpr2(font, intro, outro) {
        var style /*:Array<string>*/  = [];
        if (font.u) style.push("text-decoration: underline;");
        if (font.uval) style.push("text-underline-style:" + font.uval + ";");
        if (font.sz) style.push("font-size:" + font.sz + "pt;");
        if (font.outline) style.push("text-effect: outline;");
        if (font.shadow) style.push("text-shadow: auto;");
        intro.push('<span style="' + style.join("") + '">');
        if (font.b) {
            intro.push("<b>");
            outro.push("</b>");
        }
        if (font.i) {
            intro.push("<i>");
            outro.push("</i>");
        }
        if (font.strike) {
            intro.push("<s>");
            outro.push("</s>");
        }
        var align = font.valign || "";
        if (align == "superscript" || align == "super") align = "sup";
        else if (align == "subscript") align = "sub";
        if (align != "") {
            intro.push("<" + align + ">");
            outro.push("</" + align + ">");
        }
        outro.push("</span>");
        return font;
    }
    /* 18.4.4 r CT_RElt */ function r_to_html(r) {
        var terms /*:[Array<string>, string, Array<string>]*/  = [
            [],
            r.v,
            []
        ];
        if (!r.v) return "";
        if (r.s) parse_rpr2(r.s, terms[0], terms[2]);
        return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
    }
    return function parse_rs(rs) {
        return rs.map(r_to_html).join("");
    };
}();
/* 18.4.8 si CT_Rst */ var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
function parse_si(x, opts) {
    var html = opts ? opts.cellHTML : true;
    var z = {};
    if (!x) return {
        t: ""
    };
    //var y;
    /* 18.4.12 t ST_Xstring (Plaintext String) */ // TODO: is whitespace actually valid here?
    if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
        z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
        z.r = utf8read(x);
        if (html) z.h = escapehtml(z.t);
    } else if (/*y = */ x.match(sirregex)) {
        z.r = utf8read(x);
        z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
        if (html) z.h = rs_to_html(parse_rs(z.r));
    }
    /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */ /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */ return z;
}
/* 18.4 Shared String Table */ var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
function parse_sst_xml(data /*:string*/ , opts) /*:SST*/ {
    var s /*:SST*/  = [], ss = "";
    if (!data) return s;
    /* 18.4.9 sst CT_Sst */ var sst = data.match(sstr0);
    if (sst) {
        ss = sst[2].replace(sstr1, "").split(sstr2);
        for(var i = 0; i != ss.length; ++i){
            var o = parse_si(ss[i].trim(), opts);
            if (o != null) s[s.length] = o;
        }
        sst = parsexmltag(sst[1]);
        s.Count = sst.count;
        s.Unique = sst.uniqueCount;
    }
    return s;
}
var straywsregex = /^\s|\s$|[\t\n\r]/;
function write_sst_xml(sst /*:SST*/ , opts) /*:string*/ {
    if (!opts.bookSST) return "";
    var o = [
        XML_HEADER
    ];
    o[o.length] = writextag("sst", null, {
        xmlns: XMLNS_main[0],
        count: sst.Count,
        uniqueCount: sst.Unique
    });
    for(var i = 0; i != sst.length; ++i){
        if (sst[i] == null) continue;
        var s /*:XLString*/  = sst[i];
        var sitag = "<si>";
        if (s.r) sitag += s.r;
        else {
            sitag += "<t";
            if (!s.t) s.t = "";
            if (s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
            sitag += ">" + escapexml(s.t) + "</t>";
        }
        sitag += "</si>";
        o[o.length] = sitag;
    }
    if (o.length > 2) {
        o[o.length] = "</sst>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.221 BrtBeginSst */ function parse_BrtBeginSst(data) {
    return [
        data.read_shift(4),
        data.read_shift(4)
    ];
}
/* [MS-XLSB] 2.1.7.45 Shared Strings */ function parse_sst_bin(data, opts) /*:SST*/ {
    var s /*:SST*/  = [];
    var pass = false;
    recordhopper(data, function hopper_sst(val, R, RT) {
        switch(RT){
            case 0x009F:
                /* BrtBeginSst */ s.Count = val[0];
                s.Unique = val[1];
                break;
            case 0x0013:
                /* BrtSSTItem */ s.push(val);
                break;
            case 0x00A0:
                /* BrtEndSst */ return true;
            case 0x0023:
                /* BrtFRTBegin */ pass = true;
                break;
            case 0x0024:
                /* BrtFRTEnd */ pass = false;
                break;
            default:
                R.T;
                if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return s;
}
function write_BrtBeginSst(sst, o) {
    if (!o) o = new_buf(8);
    o.write_shift(4, sst.Count);
    o.write_shift(4, sst.Unique);
    return o;
}
var write_BrtSSTItem = write_RichStr;
function write_sst_bin(sst /*::, opts*/ ) {
    var ba = buf_array();
    write_record(ba, 0x009F /* BrtBeginSst */ , write_BrtBeginSst(sst));
    for(var i = 0; i < sst.length; ++i)write_record(ba, 0x0013 /* BrtSSTItem */ , write_BrtSSTItem(sst[i]));
    /* FRTSST */ write_record(ba, 0x00A0 /* BrtEndSst */ );
    return ba.end();
}
function _JS2ANSI(str /*:string*/ ) /*:Array<number>*/ {
    if (typeof $cptable !== "undefined") return $cptable.utils.encode(current_ansi, str);
    var o /*:Array<number>*/  = [], oo = str.split("");
    for(var i = 0; i < oo.length; ++i)o[i] = oo[i].charCodeAt(0);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.4 Version */ function parse_CRYPTOVersion(blob, length /*:?number*/ ) {
    var o /*:any*/  = {};
    o.Major = blob.read_shift(2);
    o.Minor = blob.read_shift(2);
    /*:: if(length == null) return o; */ if (length >= 4) blob.l += length - 4;
    return o;
}
/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */ function parse_DataSpaceVersionInfo(blob) {
    var o = {};
    o.id = blob.read_shift(0, "lpp4");
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */ function parse_DataSpaceMapEntry(blob) {
    var len = blob.read_shift(4);
    var end = blob.l + len - 4;
    var o = {};
    var cnt = blob.read_shift(4);
    var comps /*:Array<{t:number, v:string}>*/  = [];
    /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */ while(cnt-- > 0)comps.push({
        t: blob.read_shift(4),
        v: blob.read_shift(0, "lpp4")
    });
    o.name = blob.read_shift(0, "lpp4");
    o.comps = comps;
    if (blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */ function parse_DataSpaceMap(blob) {
    var o = [];
    blob.l += 4; // must be 0x8
    var cnt = blob.read_shift(4);
    while(cnt-- > 0)o.push(parse_DataSpaceMapEntry(blob));
    return o;
}
/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */ function parse_DataSpaceDefinition(blob) /*:Array<string>*/ {
    var o /*:Array<string>*/  = [];
    blob.l += 4; // must be 0x8
    var cnt = blob.read_shift(4);
    while(cnt-- > 0)o.push(blob.read_shift(0, "lpp4"));
    return o;
}
/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */ function parse_TransformInfoHeader(blob) {
    var o = {};
    /*var len = */ blob.read_shift(4);
    blob.l += 4; // must be 0x1
    o.id = blob.read_shift(0, "lpp4");
    o.name = blob.read_shift(0, "lpp4");
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
}
function parse_Primary(blob) {
    /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */ var hdr = parse_TransformInfoHeader(blob);
    /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */ hdr.ename = blob.read_shift(0, "8lpp4");
    hdr.blksz = blob.read_shift(4);
    hdr.cmode = blob.read_shift(4);
    if (blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
    return hdr;
}
/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */ function parse_EncryptionHeader(blob, length /*:number*/ ) {
    var tgt = blob.l + length;
    var o = {};
    o.Flags = blob.read_shift(4) & 0x3F;
    blob.l += 4;
    o.AlgID = blob.read_shift(4);
    var valid = false;
    switch(o.AlgID){
        case 0x660E:
        case 0x660F:
        case 0x6610:
            valid = o.Flags == 0x24;
            break;
        case 0x6801:
            valid = o.Flags == 0x04;
            break;
        case 0:
            valid = o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24;
            break;
        default:
            throw "Unrecognized encryption algorithm: " + o.AlgID;
    }
    if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
    o.AlgIDHash = blob.read_shift(4);
    o.KeySize = blob.read_shift(4);
    o.ProviderType = blob.read_shift(4);
    blob.l += 8;
    o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
    blob.l = tgt;
    return o;
}
/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */ function parse_EncryptionVerifier(blob, length /*:number*/ ) {
    var o = {}, tgt = blob.l + length;
    blob.l += 4; // SaltSize must be 0x10
    o.Salt = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    o.Verifier = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    /*var sz = */ blob.read_shift(4);
    o.VerifierHash = blob.slice(blob.l, tgt);
    blob.l = tgt;
    return o;
}
/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */ function parse_EncryptionInfo(blob) {
    var vers = parse_CRYPTOVersion(blob);
    switch(vers.Minor){
        case 0x02:
            return [
                vers.Minor,
                parse_EncInfoStd(blob, vers)
            ];
        case 0x03:
            return [
                vers.Minor,
                parse_EncInfoExt(blob, vers)
            ];
        case 0x04:
            return [
                vers.Minor,
                parse_EncInfoAgl(blob, vers)
            ];
    }
    throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
}
/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */ function parse_EncInfoStd(blob /*::, vers*/ ) {
    var flags = blob.read_shift(4);
    if ((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
    var sz = blob.read_shift(4);
    //var tgt = blob.l + sz;
    var hdr = parse_EncryptionHeader(blob, sz);
    var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    return {
        t: "Std",
        h: hdr,
        v: verifier
    };
}
/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */ function parse_EncInfoExt() {
    throw new Error("File is password-protected: ECMA-376 Extensible");
}
/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */ function parse_EncInfoAgl(blob /*::, vers*/ ) {
    var KeyData = [
        "saltSize",
        "blockSize",
        "keyBits",
        "hashSize",
        "cipherAlgorithm",
        "cipherChaining",
        "hashAlgorithm",
        "saltValue"
    ];
    blob.l += 4;
    var xml = blob.read_shift(blob.length - blob.l, "utf8");
    var o = {};
    xml.replace(tagregex, function xml_agile(x) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            case "<encryption":
            case "</encryption>":
                break;
            case "<keyData":
                KeyData.forEach(function(k) {
                    o[k] = y[k];
                });
                break;
            case "<dataIntegrity":
                o.encryptedHmacKey = y.encryptedHmacKey;
                o.encryptedHmacValue = y.encryptedHmacValue;
                break;
            case "<keyEncryptors>":
            case "<keyEncryptors":
                o.encs = [];
                break;
            case "</keyEncryptors>":
                break;
            case "<keyEncryptor":
                o.uri = y.uri;
                break;
            case "</keyEncryptor>":
                break;
            case "<encryptedKey":
                o.encs.push(y);
                break;
            default:
                throw y[0];
        }
    });
    return o;
}
/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */ function parse_RC4CryptoHeader(blob, length /*:number*/ ) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    length -= 4;
    if (vers.Minor != 2) throw new Error("unrecognized minor version code: " + vers.Minor);
    if (vers.Major > 4 || vers.Major < 2) throw new Error("unrecognized major version code: " + vers.Major);
    o.Flags = blob.read_shift(4);
    length -= 4;
    var sz = blob.read_shift(4);
    length -= 4;
    o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
    length -= sz;
    o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    return o;
}
/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */ function parse_RC4Header(blob /*::, length*/ ) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
    o.Salt = blob.read_shift(16);
    o.EncryptedVerifier = blob.read_shift(16);
    o.EncryptedVerifierHash = blob.read_shift(16);
    return o;
}
/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */ function crypto_CreatePasswordVerifier_Method1(Password /*:string*/ ) {
    var Verifier = 0x0000, PasswordArray;
    var PasswordDecoded = _JS2ANSI(Password);
    var len = PasswordDecoded.length + 1, i, PasswordByte;
    var Intermediate1, Intermediate2, Intermediate3;
    PasswordArray = new_raw_buf(len);
    PasswordArray[0] = PasswordDecoded.length;
    for(i = 1; i != len; ++i)PasswordArray[i] = PasswordDecoded[i - 1];
    for(i = len - 1; i >= 0; --i){
        PasswordByte = PasswordArray[i];
        Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;
        Intermediate2 = Verifier << 1 & 0x7FFF;
        Intermediate3 = Intermediate1 | Intermediate2;
        Verifier = Intermediate3 ^ PasswordByte;
    }
    return Verifier ^ 0xCE4B;
}
/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */ var crypto_CreateXorArray_Method1 = /*#__PURE__*/ function() {
    var PadArray = [
        0xBB,
        0xFF,
        0xFF,
        0xBA,
        0xFF,
        0xFF,
        0xB9,
        0x80,
        0x00,
        0xBE,
        0x0F,
        0x00,
        0xBF,
        0x0F,
        0x00
    ];
    var InitialCode = [
        0xE1F0,
        0x1D0F,
        0xCC9C,
        0x84C0,
        0x110C,
        0x0E10,
        0xF1CE,
        0x313E,
        0x1872,
        0xE139,
        0xD40F,
        0x84F9,
        0x280C,
        0xA96A,
        0x4EC3
    ];
    var XorMatrix = [
        0xAEFC,
        0x4DD9,
        0x9BB2,
        0x2745,
        0x4E8A,
        0x9D14,
        0x2A09,
        0x7B61,
        0xF6C2,
        0xFDA5,
        0xEB6B,
        0xC6F7,
        0x9DCF,
        0x2BBF,
        0x4563,
        0x8AC6,
        0x05AD,
        0x0B5A,
        0x16B4,
        0x2D68,
        0x5AD0,
        0x0375,
        0x06EA,
        0x0DD4,
        0x1BA8,
        0x3750,
        0x6EA0,
        0xDD40,
        0xD849,
        0xA0B3,
        0x5147,
        0xA28E,
        0x553D,
        0xAA7A,
        0x44D5,
        0x6F45,
        0xDE8A,
        0xAD35,
        0x4A4B,
        0x9496,
        0x390D,
        0x721A,
        0xEB23,
        0xC667,
        0x9CEF,
        0x29FF,
        0x53FE,
        0xA7FC,
        0x5FD9,
        0x47D3,
        0x8FA6,
        0x0F6D,
        0x1EDA,
        0x3DB4,
        0x7B68,
        0xF6D0,
        0xB861,
        0x60E3,
        0xC1C6,
        0x93AD,
        0x377B,
        0x6EF6,
        0xDDEC,
        0x45A0,
        0x8B40,
        0x06A1,
        0x0D42,
        0x1A84,
        0x3508,
        0x6A10,
        0xAA51,
        0x4483,
        0x8906,
        0x022D,
        0x045A,
        0x08B4,
        0x1168,
        0x76B4,
        0xED68,
        0xCAF1,
        0x85C3,
        0x1BA7,
        0x374E,
        0x6E9C,
        0x3730,
        0x6E60,
        0xDCC0,
        0xA9A1,
        0x4363,
        0x86C6,
        0x1DAD,
        0x3331,
        0x6662,
        0xCCC4,
        0x89A9,
        0x0373,
        0x06E6,
        0x0DCC,
        0x1021,
        0x2042,
        0x4084,
        0x8108,
        0x1231,
        0x2462,
        0x48C4
    ];
    var Ror = function(Byte) {
        return (Byte / 2 | Byte * 128) & 0xFF;
    };
    var XorRor = function(byte1, byte2) {
        return Ror(byte1 ^ byte2);
    };
    var CreateXorKey_Method1 = function(Password) {
        var XorKey = InitialCode[Password.length - 1];
        var CurrentElement = 0x68;
        for(var i = Password.length - 1; i >= 0; --i){
            var Char = Password[i];
            for(var j = 0; j != 7; ++j){
                if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
                Char *= 2;
                --CurrentElement;
            }
        }
        return XorKey;
    };
    return function(password /*:string*/ ) {
        var Password = _JS2ANSI(password);
        var XorKey = CreateXorKey_Method1(Password);
        var Index = Password.length;
        var ObfuscationArray = new_raw_buf(16);
        for(var i = 0; i != 16; ++i)ObfuscationArray[i] = 0x00;
        var Temp, PasswordLastChar, PadIndex;
        if ((Index & 1) === 1) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
            --Index;
            Temp = XorKey & 0xFF;
            PasswordLastChar = Password[Password.length - 1];
            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
        }
        while(Index > 0){
            --Index;
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            Temp = XorKey & 0xFF;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        }
        Index = 15;
        PadIndex = 15 - Password.length;
        while(PadIndex > 0){
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
            --Index;
            --PadIndex;
            Temp = XorKey & 0xFF;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            --PadIndex;
        }
        return ObfuscationArray;
    };
}();
/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */ var crypto_DecryptData_Method1 = function(password /*:string*/ , Data, XorArrayIndex, XorArray, O) {
    /* If XorArray is set, use it; if O is not set, make changes in-place */ if (!O) O = Data;
    if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
    var Index, Value;
    for(Index = 0; Index != Data.length; ++Index){
        Value = Data[Index];
        Value ^= XorArray[XorArrayIndex];
        Value = (Value >> 5 | Value << 3) & 0xFF;
        O[Index] = Value;
        ++XorArrayIndex;
    }
    return [
        O,
        XorArrayIndex,
        XorArray
    ];
};
var crypto_MakeXorDecryptor = function(password /*:string*/ ) {
    var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
    return function(Data) {
        var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
        XorArrayIndex = O[1];
        return O[0];
    };
};
/* 2.5.343 */ function parse_XORObfuscation(blob, length, opts, out) {
    var o = {
        key: parseuint16(blob),
        verificationBytes: parseuint16(blob)
    } /*:any*/ ;
    if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    out.valid = o.verificationBytes === o.verifier;
    if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
    return o;
}
/* 2.4.117 */ function parse_FilePassHeader(blob, length /*:number*/ , oo) {
    var o = oo || {};
    o.Info = blob.read_shift(2);
    blob.l -= 2;
    if (o.Info === 1) o.Data = parse_RC4Header(blob, length);
    else o.Data = parse_RC4CryptoHeader(blob, length);
    return o;
}
function parse_FilePass(blob, length /*:number*/ , opts) {
    var o = {
        Type: opts.biff >= 8 ? blob.read_shift(2) : 0
    } /*:any*/ ; /* wEncryptionType */ 
    if (o.Type) parse_FilePassHeader(blob, length - 2, o);
    else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
    return o;
}
var RTF = /*#__PURE__*/ function() {
    function rtf_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        switch(opts.type){
            case "base64":
                return rtf_to_sheet_str(Base64_decode(d), opts);
            case "binary":
                return rtf_to_sheet_str(d, opts);
            case "buffer":
                return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return rtf_to_sheet_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    /* TODO: this is a stub */ function rtf_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        var o = opts || {};
        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;
        var rows = str.match(/\\trowd.*?\\row\b/g);
        if (!rows.length) throw new Error("RTF missing table");
        var range /*:Range*/  = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: rows.length - 1
            }
        } /*:any*/ ;
        rows.forEach(function(rowtf, R) {
            if (Array.isArray(ws)) ws[R] = [];
            var rtfre = /\\\w+\b/g;
            var last_index = 0;
            var res;
            var C = -1;
            while(res = rtfre.exec(rowtf)){
                switch(res[0]){
                    case "\\cell":
                        var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
                        if (data[0] == " ") data = data.slice(1);
                        ++C;
                        if (data.length) {
                            // TODO: value parsing, including codepage adjustments
                            var cell = {
                                v: data,
                                t: "s"
                            };
                            if (Array.isArray(ws)) ws[R][C] = cell;
                            else ws[encode_cell({
                                r: R,
                                c: C
                            })] = cell;
                        }
                        break;
                }
                last_index = rtfre.lastIndex;
            }
            if (C > range.e.c) range.e.c = C;
        });
        ws["!ref"] = encode_range(range);
        return ws;
    }
    function rtf_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
    }
    /* TODO: this is a stub */ function sheet_to_rtf(ws /*:Worksheet*/  /*::, opts*/ ) /*:string*/ {
        var o = [
            "{\\rtf1\\ansi"
        ];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R){
            o.push("\\trowd\\trautofit1");
            for(var C = r.s.c; C <= r.e.c; ++C)o.push("\\cellx" + (C + 1));
            o.push("\\pard\\intbl");
            for(C = r.s.c; C <= r.e.c; ++C){
                var coord = encode_cell({
                    r: R,
                    c: C
                });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
                o.push(" " + (cell.w || (format_cell(cell), cell.w)));
                o.push("\\cell");
            }
            o.push("\\pard\\intbl\\row");
        }
        return o.join("") + "}";
    }
    return {
        to_workbook: rtf_to_workbook,
        to_sheet: rtf_to_sheet,
        from_sheet: sheet_to_rtf
    };
}();
function hex2RGB(h) {
    var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
    return [
        parseInt(o.slice(0, 2), 16),
        parseInt(o.slice(2, 4), 16),
        parseInt(o.slice(4, 6), 16)
    ];
}
function rgb2Hex(rgb) {
    for(var i = 0, o = 1; i != 3; ++i)o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
    return o.toString(16).toUpperCase().slice(1);
}
function rgb2HSL(rgb) {
    var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
    var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
    if (C === 0) return [
        0,
        0,
        R
    ];
    var H6 = 0, S = 0, L2 = M + m;
    S = C / (L2 > 1 ? 2 - L2 : L2);
    switch(M){
        case R:
            H6 = ((G - B) / C + 6) % 6;
            break;
        case G:
            H6 = (B - R) / C + 2;
            break;
        case B:
            H6 = (R - G) / C + 4;
            break;
    }
    return [
        H6 / 6,
        S,
        L2 / 2
    ];
}
function hsl2RGB(hsl) {
    var H = hsl[0], S = hsl[1], L = hsl[2];
    var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
    var rgb = [
        m,
        m,
        m
    ], h6 = 6 * H;
    var X;
    if (S !== 0) switch(h6 | 0){
        case 0:
        case 6:
            X = C * h6;
            rgb[0] += C;
            rgb[1] += X;
            break;
        case 1:
            X = C * (2 - h6);
            rgb[0] += X;
            rgb[1] += C;
            break;
        case 2:
            X = C * (h6 - 2);
            rgb[1] += C;
            rgb[2] += X;
            break;
        case 3:
            X = C * (4 - h6);
            rgb[1] += X;
            rgb[2] += C;
            break;
        case 4:
            X = C * (h6 - 4);
            rgb[2] += C;
            rgb[0] += X;
            break;
        case 5:
            X = C * (6 - h6);
            rgb[2] += X;
            rgb[0] += C;
            break;
    }
    for(var i = 0; i != 3; ++i)rgb[i] = Math.round(rgb[i] * 255);
    return rgb;
}
/* 18.8.3 bgColor tint algorithm */ function rgb_tint(hex, tint) {
    if (tint === 0) return hex;
    var hsl = rgb2HSL(hex2RGB(hex));
    if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
    else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    return rgb2Hex(hsl2RGB(hsl));
}
/* 18.3.1.13 width calculations */ /* [MS-OI29500] 2.1.595 Column Width & Formatting */ var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
function width2px(width) {
    return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
}
function px2char(px) {
    return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
}
function char2width(chr) {
    return Math.round((chr * MDW + 5) / MDW * 256) / 256;
}
//function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
function cycle_width(collw) {
    return char2width(px2char(width2px(collw)));
}
/* XLSX/XLSB/XLS specify width in units of MDW */ function find_mdw_colw(collw) {
    var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
    if (delta > 0.005) {
        for(MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)if (Math.abs(collw - cycle_width(collw)) <= delta) {
            delta = Math.abs(collw - cycle_width(collw));
            _MDW = MDW;
        }
    }
    MDW = _MDW;
}
/* XLML specifies width in terms of pixels */ /*function find_mdw_wpx(wpx) {
	var delta = Infinity, guess = 0, _MDW = MIN_MDW;
	for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
		guess = char2width_(px2char_(wpx))*256;
		guess = (guess) % 1;
		if(guess > 0.5) guess--;
		if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
	}
	MDW = _MDW;
}*/ function process_col(coll /*:ColInfo*/ ) {
    if (coll.width) {
        coll.wpx = width2px(coll.width);
        coll.wch = px2char(coll.wpx);
        coll.MDW = MDW;
    } else if (coll.wpx) {
        coll.wch = px2char(coll.wpx);
        coll.width = char2width(coll.wch);
        coll.MDW = MDW;
    } else if (typeof coll.wch == "number") {
        coll.width = char2width(coll.wch);
        coll.wpx = width2px(coll.width);
        coll.MDW = MDW;
    }
    if (coll.customWidth) delete coll.customWidth;
}
var DEF_PPI = 96, PPI = DEF_PPI;
function px2pt(px) {
    return px * 96 / PPI;
}
function pt2px(pt) {
    return pt * PPI / 96;
}
/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */ var XLMLPatternTypeMap = {
    "None": "none",
    "Solid": "solid",
    "Gray50": "mediumGray",
    "Gray75": "darkGray",
    "Gray25": "lightGray",
    "HorzStripe": "darkHorizontal",
    "VertStripe": "darkVertical",
    "ReverseDiagStripe": "darkDown",
    "DiagStripe": "darkUp",
    "DiagCross": "darkGrid",
    "ThickDiagCross": "darkTrellis",
    "ThinHorzStripe": "lightHorizontal",
    "ThinVertStripe": "lightVertical",
    "ThinReverseDiagStripe": "lightDown",
    "ThinHorzCross": "lightGrid"
};
/* 18.8.5 borders CT_Borders */ function parse_borders(t, styles, themes, opts) {
    styles.Borders = [];
    var border = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<borders":
            case "<borders>":
            case "</borders>":
                break;
            /* 18.8.4 border CT_Border */ case "<border":
            case "<border>":
            case "<border/>":
                border = /*::(*/ {} /*:: :any)*/ ;
                if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
                if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
                styles.Borders.push(border);
                break;
            case "</border>":
                break;
            /* note: not in spec, appears to be CT_BorderPr */ case "<left/>":
                break;
            case "<left":
            case "<left>":
                break;
            case "</left>":
                break;
            /* note: not in spec, appears to be CT_BorderPr */ case "<right/>":
                break;
            case "<right":
            case "<right>":
                break;
            case "</right>":
                break;
            /* 18.8.43 top CT_BorderPr */ case "<top/>":
                break;
            case "<top":
            case "<top>":
                break;
            case "</top>":
                break;
            /* 18.8.6 bottom CT_BorderPr */ case "<bottom/>":
                break;
            case "<bottom":
            case "<bottom>":
                break;
            case "</bottom>":
                break;
            /* 18.8.13 diagonal CT_BorderPr */ case "<diagonal":
            case "<diagonal>":
            case "<diagonal/>":
                break;
            case "</diagonal>":
                break;
            /* 18.8.25 horizontal CT_BorderPr */ case "<horizontal":
            case "<horizontal>":
            case "<horizontal/>":
                break;
            case "</horizontal>":
                break;
            /* 18.8.44 vertical CT_BorderPr */ case "<vertical":
            case "<vertical>":
            case "<vertical/>":
                break;
            case "</vertical>":
                break;
            /* 18.8.37 start CT_BorderPr */ case "<start":
            case "<start>":
            case "<start/>":
                break;
            case "</start>":
                break;
            /* 18.8.16 end CT_BorderPr */ case "<end":
            case "<end>":
            case "<end/>":
                break;
            case "</end>":
                break;
            /* 18.8.? color CT_Color */ case "<color":
            case "<color>":
                break;
            case "<color/>":
            case "</color>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in borders");
                }
        }
    });
}
/* 18.8.21 fills CT_Fills */ function parse_fills(t, styles, themes, opts) {
    styles.Fills = [];
    var fill = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<fills":
            case "<fills>":
            case "</fills>":
                break;
            /* 18.8.20 fill CT_Fill */ case "<fill>":
            case "<fill":
            case "<fill/>":
                fill = {};
                styles.Fills.push(fill);
                break;
            case "</fill>":
                break;
            /* 18.8.24 gradientFill CT_GradientFill */ case "<gradientFill>":
                break;
            case "<gradientFill":
            case "</gradientFill>":
                styles.Fills.push(fill);
                fill = {};
                break;
            /* 18.8.32 patternFill CT_PatternFill */ case "<patternFill":
            case "<patternFill>":
                if (y.patternType) fill.patternType = y.patternType;
                break;
            case "<patternFill/>":
            case "</patternFill>":
                break;
            /* 18.8.3 bgColor CT_Color */ case "<bgColor":
                if (!fill.bgColor) fill.bgColor = {};
                if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
                if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
                if (y.tint) fill.bgColor.tint = parseFloat(y.tint);
                /* Excel uses ARGB strings */ if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
                break;
            case "<bgColor/>":
            case "</bgColor>":
                break;
            /* 18.8.19 fgColor CT_Color */ case "<fgColor":
                if (!fill.fgColor) fill.fgColor = {};
                if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
                if (y.tint) fill.fgColor.tint = parseFloat(y.tint);
                /* Excel uses ARGB strings */ if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
                break;
            case "<fgColor/>":
            case "</fgColor>":
                break;
            /* 18.8.38 stop CT_GradientStop */ case "<stop":
            case "<stop/>":
                break;
            case "</stop>":
                break;
            /* 18.8.? color CT_Color */ case "<color":
            case "<color/>":
                break;
            case "</color>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in fills");
                }
        }
    });
}
/* 18.8.23 fonts CT_Fonts */ function parse_fonts(t, styles, themes, opts) {
    styles.Fonts = [];
    var font = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<fonts":
            case "<fonts>":
            case "</fonts>":
                break;
            /* 18.8.22 font CT_Font */ case "<font":
            case "<font>":
                break;
            case "</font>":
            case "<font/>":
                styles.Fonts.push(font);
                font = {};
                break;
            /* 18.8.29 name CT_FontName */ case "<name":
                if (y.val) font.name = utf8read(y.val);
                break;
            case "<name/>":
            case "</name>":
                break;
            /* 18.8.2  b CT_BooleanProperty */ case "<b":
                font.bold = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<b/>":
                font.bold = 1;
                break;
            /* 18.8.26 i CT_BooleanProperty */ case "<i":
                font.italic = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<i/>":
                font.italic = 1;
                break;
            /* 18.4.13 u CT_UnderlineProperty */ case "<u":
                switch(y.val){
                    case "none":
                        font.underline = 0x00;
                        break;
                    case "single":
                        font.underline = 0x01;
                        break;
                    case "double":
                        font.underline = 0x02;
                        break;
                    case "singleAccounting":
                        font.underline = 0x21;
                        break;
                    case "doubleAccounting":
                        font.underline = 0x22;
                        break;
                }
                break;
            case "<u/>":
                font.underline = 1;
                break;
            /* 18.4.10 strike CT_BooleanProperty */ case "<strike":
                font.strike = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<strike/>":
                font.strike = 1;
                break;
            /* 18.4.2  outline CT_BooleanProperty */ case "<outline":
                font.outline = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<outline/>":
                font.outline = 1;
                break;
            /* 18.8.36 shadow CT_BooleanProperty */ case "<shadow":
                font.shadow = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<shadow/>":
                font.shadow = 1;
                break;
            /* 18.8.12 condense CT_BooleanProperty */ case "<condense":
                font.condense = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<condense/>":
                font.condense = 1;
                break;
            /* 18.8.17 extend CT_BooleanProperty */ case "<extend":
                font.extend = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<extend/>":
                font.extend = 1;
                break;
            /* 18.4.11 sz CT_FontSize */ case "<sz":
                if (y.val) font.sz = +y.val;
                break;
            case "<sz/>":
            case "</sz>":
                break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */ case "<vertAlign":
                if (y.val) font.vertAlign = y.val;
                break;
            case "<vertAlign/>":
            case "</vertAlign>":
                break;
            /* 18.8.18 family CT_FontFamily */ case "<family":
                if (y.val) font.family = parseInt(y.val, 10);
                break;
            case "<family/>":
            case "</family>":
                break;
            /* 18.8.35 scheme CT_FontScheme */ case "<scheme":
                if (y.val) font.scheme = y.val;
                break;
            case "<scheme/>":
            case "</scheme>":
                break;
            /* 18.4.1 charset CT_IntProperty */ case "<charset":
                if (y.val == "1") break;
                y.codepage = CS2CP[parseInt(y.val, 10)];
                break;
            /* 18.?.? color CT_Color */ case "<color":
                if (!font.color) font.color = {};
                if (y.auto) font.color.auto = parsexmlbool(y.auto);
                if (y.rgb) font.color.rgb = y.rgb.slice(-6);
                else if (y.indexed) {
                    font.color.index = parseInt(y.indexed, 10);
                    var icv = XLSIcv[font.color.index];
                    if (font.color.index == 81) icv = XLSIcv[1];
                    if (!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid
                    font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
                } else if (y.theme) {
                    font.color.theme = parseInt(y.theme, 10);
                    if (y.tint) font.color.tint = parseFloat(y.tint);
                    if (y.theme && themes.themeElements && themes.themeElements.clrScheme) font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                }
                break;
            case "<color/>":
            case "</color>":
                break;
            /* note: sometimes mc:AlternateContent appears bare */ case "<AlternateContent":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in fonts");
                }
        }
    });
}
/* 18.8.31 numFmts CT_NumFmts */ function parse_numFmts(t, styles, opts) {
    styles.NumberFmt = [];
    var k /*Array<number>*/  = keys(table_fmt);
    for(var i = 0; i < k.length; ++i)styles.NumberFmt[k[i]] = table_fmt[k[i]];
    var m = t[0].match(tagregex);
    if (!m) return;
    for(i = 0; i < m.length; ++i){
        var y = parsexmltag(m[i]);
        switch(strip_ns(y[0])){
            case "<numFmts":
            case "</numFmts>":
            case "<numFmts/>":
            case "<numFmts>":
                break;
            case "<numFmt":
                var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
                styles.NumberFmt[j] = f;
                if (j > 0) {
                    if (j > 0x188) {
                        for(j = 0x188; j > 0x3c; --j)if (styles.NumberFmt[j] == null) break;
                        styles.NumberFmt[j] = f;
                    }
                    SSF_load(f, j);
                }
                break;
            case "</numFmt>":
                break;
            default:
                if (opts.WTF) throw new Error("unrecognized " + y[0] + " in numFmts");
        }
    }
}
function write_numFmts(NF /*:{[n:number|string]:string}*/  /*::, opts*/ ) {
    var o = [
        "<numFmts>"
    ];
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) o[o.length] = writextag("numFmt", null, {
            numFmtId: i,
            formatCode: escapexml(NF[i])
        });
    });
    if (o.length === 1) return "";
    o[o.length] = "</numFmts>";
    o[0] = writextag("numFmts", null, {
        count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
}
/* 18.8.10 cellXfs CT_CellXfs */ var cellXF_uint = [
    "numFmtId",
    "fillId",
    "fontId",
    "borderId",
    "xfId"
];
var cellXF_bool = [
    "applyAlignment",
    "applyBorder",
    "applyFill",
    "applyFont",
    "applyNumberFormat",
    "applyProtection",
    "pivotButton",
    "quotePrefix"
];
function parse_cellXfs(t, styles, opts) {
    styles.CellXf = [];
    var xf;
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x), i = 0;
        switch(strip_ns(y[0])){
            case "<cellXfs":
            case "<cellXfs>":
            case "<cellXfs/>":
            case "</cellXfs>":
                break;
            /* 18.8.45 xf CT_Xf */ case "<xf":
            case "<xf/>":
                xf = y;
                delete xf[0];
                for(i = 0; i < cellXF_uint.length; ++i)if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
                for(i = 0; i < cellXF_bool.length; ++i)if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
                if (styles.NumberFmt && xf.numFmtId > 0x188) {
                    for(i = 0x188; i > 0x3c; --i)if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
                        xf.numFmtId = i;
                        break;
                    }
                }
                styles.CellXf.push(xf);
                break;
            case "</xf>":
                break;
            /* 18.8.1 alignment CT_CellAlignment */ case "<alignment":
            case "<alignment/>":
                var alignment = {};
                if (y.vertical) alignment.vertical = y.vertical;
                if (y.horizontal) alignment.horizontal = y.horizontal;
                if (y.textRotation != null) alignment.textRotation = y.textRotation;
                if (y.indent) alignment.indent = y.indent;
                if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
                xf.alignment = alignment;
                break;
            case "</alignment>":
                break;
            /* 18.8.33 protection CT_CellProtection */ case "<protection":
                break;
            case "</protection>":
            case "<protection/>":
                break;
            /* note: sometimes mc:AlternateContent appears bare */ case "<AlternateContent":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in cellXfs");
                }
        }
    });
}
function write_cellXfs(cellXfs) /*:string*/ {
    var o /*:Array<string>*/  = [];
    o[o.length] = writextag("cellXfs", null);
    cellXfs.forEach(function(c) {
        o[o.length] = writextag("xf", null, c);
    });
    o[o.length] = "</cellXfs>";
    if (o.length === 2) return "";
    o[0] = writextag("cellXfs", null, {
        count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
}
/* 18.8 Styles CT_Stylesheet*/ var parse_sty_xml = /*#__PURE__*/ function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
    return function parse_sty_xml(data, themes, opts) {
        var styles = {};
        if (!data) return styles;
        data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
        /* 18.8.39 styleSheet CT_Stylesheet */ var t;
        /* 18.8.31 numFmts CT_NumFmts ? */ if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);
        /* 18.8.23 fonts CT_Fonts ? */ if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);
        /* 18.8.21 fills CT_Fills ? */ if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);
        /* 18.8.5  borders CT_Borders ? */ if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);
        /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */ /* 18.8.8  cellStyles CT_CellStyles ? */ /* 18.8.10 cellXfs CT_CellXfs ? */ if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);
        /* 18.8.15 dxfs CT_Dxfs ? */ /* 18.8.42 tableStyles CT_TableStyles ? */ /* 18.8.11 colors CT_Colors ? */ /* 18.2.10 extLst CT_ExtensionList ? */ return styles;
    };
}();
function write_sty_xml(wb /*:Workbook*/ , opts) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("styleSheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:vt": XMLNS.vt
        })
    ], w;
    if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
    o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
    o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
    o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
    o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
    if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;
    o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
    o[o.length] = '<dxfs count="0"/>';
    o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
    if (o.length > 2) {
        o[o.length] = "</styleSheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.657 BrtFmt */ function parse_BrtFmt(data, length /*:number*/ ) {
    var numFmtId = data.read_shift(2);
    var stFmtCode = parse_XLWideString(data, length - 2);
    return [
        numFmtId,
        stFmtCode
    ];
}
function write_BrtFmt(i /*:number*/ , f /*:string*/ , o) {
    if (!o) o = new_buf(6 + 4 * f.length);
    o.write_shift(2, i);
    write_XLWideString(f, o);
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (o.l == null) o.l = o.length;
    return out;
}
/* [MS-XLSB] 2.4.659 BrtFont TODO */ function parse_BrtFont(data, length /*:number*/ , opts) {
    var out = {} /*:any*/ ;
    out.sz = data.read_shift(2) / 20;
    var grbit = parse_FontFlags(data, 2, opts);
    if (grbit.fItalic) out.italic = 1;
    if (grbit.fCondense) out.condense = 1;
    if (grbit.fExtend) out.extend = 1;
    if (grbit.fShadow) out.shadow = 1;
    if (grbit.fOutline) out.outline = 1;
    if (grbit.fStrikeout) out.strike = 1;
    var bls = data.read_shift(2);
    if (bls === 0x02BC) out.bold = 1;
    switch(data.read_shift(2)){
        /* case 0: out.vertAlign = "baseline"; break; */ case 1:
            out.vertAlign = "superscript";
            break;
        case 2:
            out.vertAlign = "subscript";
            break;
    }
    var underline = data.read_shift(1);
    if (underline != 0) out.underline = underline;
    var family = data.read_shift(1);
    if (family > 0) out.family = family;
    var bCharSet = data.read_shift(1);
    if (bCharSet > 0) out.charset = bCharSet;
    data.l++;
    out.color = parse_BrtColor(data, 8);
    switch(data.read_shift(1)){
        /* case 0: out.scheme = "none": break; */ case 1:
            out.scheme = "major";
            break;
        case 2:
            out.scheme = "minor";
            break;
    }
    out.name = parse_XLWideString(data, length - 21);
    return out;
}
function write_BrtFont(font /*:any*/ , o) {
    if (!o) o = new_buf(153);
    o.write_shift(2, font.sz * 20);
    write_FontFlags(font, o);
    o.write_shift(2, font.bold ? 0x02BC : 0x0190);
    var sss = 0;
    if (font.vertAlign == "superscript") sss = 1;
    else if (font.vertAlign == "subscript") sss = 2;
    o.write_shift(2, sss);
    o.write_shift(1, font.underline || 0);
    o.write_shift(1, font.family || 0);
    o.write_shift(1, font.charset || 0);
    o.write_shift(1, 0);
    write_BrtColor(font.color, o);
    var scheme = 0;
    if (font.scheme == "major") scheme = 1;
    if (font.scheme == "minor") scheme = 2;
    o.write_shift(1, scheme);
    write_XLWideString(font.name, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.650 BrtFill */ var XLSBFillPTNames = [
    "none",
    "solid",
    "mediumGray",
    "darkGray",
    "lightGray",
    "darkHorizontal",
    "darkVertical",
    "darkDown",
    "darkUp",
    "darkGrid",
    "darkTrellis",
    "lightHorizontal",
    "lightVertical",
    "lightDown",
    "lightUp",
    "lightGrid",
    "lightTrellis",
    "gray125",
    "gray0625"
];
var rev_XLSBFillPTNames /*:EvertNumType*/ ;
/* TODO: gradient fill representation */ var parse_BrtFill = parsenoop;
function write_BrtFill(fill, o) {
    if (!o) o = new_buf(84);
    if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);
    var fls /*:number*/  = rev_XLSBFillPTNames[fill.patternType];
    if (fls == null) fls = 0x28;
    o.write_shift(4, fls);
    var j = 0;
    if (fls != 0x28) {
        /* TODO: custom FG Color */ write_BrtColor({
            auto: 1
        }, o);
        /* TODO: custom BG Color */ write_BrtColor({
            auto: 1
        }, o);
        for(; j < 12; ++j)o.write_shift(4, 0);
    } else {
        for(; j < 4; ++j)o.write_shift(4, 0);
        for(; j < 12; ++j)o.write_shift(4, 0); /* TODO */ 
    /* iGradientType */ /* xnumDegree */ /* xnumFillToLeft */ /* xnumFillToRight */ /* xnumFillToTop */ /* xnumFillToBottom */ /* cNumStop */ /* xfillGradientStop */ }
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.824 BrtXF */ function parse_BrtXF(data, length /*:number*/ ) {
    var tgt = data.l + length;
    var ixfeParent = data.read_shift(2);
    var ifmt = data.read_shift(2);
    data.l = tgt;
    return {
        ixfe: ixfeParent,
        numFmtId: ifmt
    };
}
function write_BrtXF(data, ixfeP, o) {
    if (!o) o = new_buf(16);
    o.write_shift(2, ixfeP || 0);
    o.write_shift(2, data.numFmtId || 0);
    o.write_shift(2, 0); /* iFont */ 
    o.write_shift(2, 0); /* iFill */ 
    o.write_shift(2, 0); /* ixBorder */ 
    o.write_shift(1, 0); /* trot */ 
    o.write_shift(1, 0); /* indent */ 
    var flow = 0;
    o.write_shift(1, flow); /* flags */ 
    o.write_shift(1, 0); /* flags */ 
    o.write_shift(1, 0); /* xfGrbitAtr */ 
    o.write_shift(1, 0);
    return o;
}
/* [MS-XLSB] 2.5.4 Blxf TODO */ function write_Blxf(data, o) {
    if (!o) o = new_buf(10);
    o.write_shift(1, 0); /* dg */ 
    o.write_shift(1, 0);
    o.write_shift(4, 0); /* color */ 
    o.write_shift(4, 0); /* color */ 
    return o;
}
/* [MS-XLSB] 2.4.302 BrtBorder TODO */ var parse_BrtBorder = parsenoop;
function write_BrtBorder(border, o) {
    if (!o) o = new_buf(51);
    o.write_shift(1, 0); /* diagonal */ 
    write_Blxf(null, o); /* top */ 
    write_Blxf(null, o); /* bottom */ 
    write_Blxf(null, o); /* left */ 
    write_Blxf(null, o); /* right */ 
    write_Blxf(null, o); /* diag */ 
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.763 BrtStyle TODO */ function write_BrtStyle(style, o) {
    if (!o) o = new_buf(52);
    o.write_shift(4, style.xfId);
    o.write_shift(2, 1);
    o.write_shift(1, +style.builtinId);
    o.write_shift(1, 0); /* iLevel */ 
    write_XLNullableWideString(style.name || "", o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.272 BrtBeginTableStyles */ function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
    var o = new_buf(2052);
    o.write_shift(4, cnt);
    write_XLNullableWideString(defTableStyle, o);
    write_XLNullableWideString(defPivotStyle, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.1.7.50 Styles */ function parse_sty_bin(data, themes, opts) {
    var styles = {};
    styles.NumberFmt = [];
    for(var y in table_fmt)styles.NumberFmt[y] = table_fmt[y];
    styles.CellXf = [];
    styles.Fonts = [];
    var state /*:Array<string>*/  = [];
    var pass = false;
    recordhopper(data, function hopper_sty(val, R, RT) {
        switch(RT){
            case 0x002C:
                /* BrtFmt */ styles.NumberFmt[val[0]] = val[1];
                SSF_load(val[1], val[0]);
                break;
            case 0x002B:
                /* BrtFont */ styles.Fonts.push(val);
                if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
                break;
            case 0x0401:
                break;
            case 0x002D:
                break;
            case 0x002E:
                break;
            case 0x002F:
                /* BrtXF */ if (state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */ ) styles.CellXf.push(val);
                break;
            case 0x0030:
            /* BrtStyle */ case 0x01FB:
            /* BrtDXF */ case 0x023C:
            /* BrtMRUColor */ case 0x01DB:
                break;
            case 0x0493:
            /* BrtDXF14 */ case 0x0836:
            /* BrtDXF15 */ case 0x046A:
            /* BrtSlicerStyleElement */ case 0x0200:
            /* BrtTableStyleElement */ case 0x082F:
            /* BrtTimelineStyleElement */ case 0x0C00:
                break;
            case 0x0023:
                /* BrtFRTBegin */ pass = true;
                break;
            case 0x0024:
                /* BrtFRTEnd */ pass = false;
                break;
            case 0x0025:
                /* BrtACBegin */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* BrtACEnd */ state.pop();
                pass = false;
                break;
            default:
                if (R.T > 0) state.push(RT);
                else if (R.T < 0) state.pop();
                else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */ ) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return styles;
}
function write_FMTS_bin(ba, NF /*:?SSFTable*/ ) {
    if (!NF) return;
    var cnt = 0;
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) ++cnt;
    });
    if (cnt == 0) return;
    write_record(ba, 0x0267 /* BrtBeginFmts */ , write_UInt32LE(cnt));
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_record(ba, 0x002C /* BrtFmt */ , write_BrtFmt(i, NF[i]));
    });
    write_record(ba, 0x0268 /* BrtEndFmts */ );
}
function write_FONTS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, 0x0263 /* BrtBeginFonts */ , write_UInt32LE(cnt));
    write_record(ba, 0x002B /* BrtFont */ , write_BrtFont({
        sz: 12,
        color: {
            theme: 1
        },
        name: "Calibri",
        family: 2,
        scheme: "minor"
    }));
    /* 1*65491BrtFont [ACFONTS] */ write_record(ba, 0x0264 /* BrtEndFonts */ );
}
function write_FILLS_bin(ba /*::, data*/ ) {
    var cnt = 2;
    if (cnt == 0) return;
    write_record(ba, 0x025B /* BrtBeginFills */ , write_UInt32LE(cnt));
    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({
        patternType: "none"
    }));
    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({
        patternType: "gray125"
    }));
    /* 1*65431BrtFill */ write_record(ba, 0x025C /* BrtEndFills */ );
}
function write_BORDERS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, 0x0265 /* BrtBeginBorders */ , write_UInt32LE(cnt));
    write_record(ba, 0x002E /* BrtBorder */ , write_BrtBorder({}));
    /* 1*65430BrtBorder */ write_record(ba, 0x0266 /* BrtEndBorders */ );
}
function write_CELLSTYLEXFS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    write_record(ba, 0x0272 /* BrtBeginCellStyleXFs */ , write_UInt32LE(cnt));
    write_record(ba, 0x002F /* BrtXF */ , write_BrtXF({
        numFmtId: 0,
        fontId: 0,
        fillId: 0,
        borderId: 0
    }, 0xFFFF));
    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x0273 /* BrtEndCellStyleXFs */ );
}
function write_CELLXFS_bin(ba, data) {
    write_record(ba, 0x0269 /* BrtBeginCellXFs */ , write_UInt32LE(data.length));
    data.forEach(function(c) {
        write_record(ba, 0x002F /* BrtXF */ , write_BrtXF(c, 0));
    });
    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x026A /* BrtEndCellXFs */ );
}
function write_STYLES_bin(ba /*::, data*/ ) {
    var cnt = 1;
    write_record(ba, 0x026B /* BrtBeginStyles */ , write_UInt32LE(cnt));
    write_record(ba, 0x0030 /* BrtStyle */ , write_BrtStyle({
        xfId: 0,
        builtinId: 0,
        name: "Normal"
    }));
    /* 1*65430(BrtStyle *FRT) */ write_record(ba, 0x026C /* BrtEndStyles */ );
}
function write_DXFS_bin(ba /*::, data*/ ) {
    var cnt = 0;
    write_record(ba, 0x01F9 /* BrtBeginDXFs */ , write_UInt32LE(cnt));
    /* *2147483647(BrtDXF *FRT) */ write_record(ba, 0x01FA /* BrtEndDXFs */ );
}
function write_TABLESTYLES_bin(ba /*::, data*/ ) {
    var cnt = 0;
    write_record(ba, 0x01FC /* BrtBeginTableStyles */ , write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
    /* *TABLESTYLE */ write_record(ba, 0x01FD /* BrtEndTableStyles */ );
}
function write_COLORPALETTE_bin() {
    return;
/* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */ }
/* [MS-XLSB] 2.1.7.50 Styles */ function write_sty_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, 0x0116 /* BrtBeginStyleSheet */ );
    write_FMTS_bin(ba, wb.SSF);
    write_FONTS_bin(ba, wb);
    write_FILLS_bin(ba, wb);
    write_BORDERS_bin(ba, wb);
    write_CELLSTYLEXFS_bin(ba, wb);
    write_CELLXFS_bin(ba, opts.cellXfs);
    write_STYLES_bin(ba, wb);
    write_DXFS_bin(ba, wb);
    write_TABLESTYLES_bin(ba, wb);
    write_COLORPALETTE_bin(ba, wb);
    /* FRTSTYLESHEET*/ write_record(ba, 0x0117 /* BrtEndStyleSheet */ );
    return ba.end();
}
/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */ var XLSXThemeClrScheme = [
    "</a:lt1>",
    "</a:dk1>",
    "</a:lt2>",
    "</a:dk2>",
    "</a:accent1>",
    "</a:accent2>",
    "</a:accent3>",
    "</a:accent4>",
    "</a:accent5>",
    "</a:accent6>",
    "</a:hlink>",
    "</a:folHlink>"
];
/* 20.1.6.2 clrScheme CT_ColorScheme */ function parse_clrScheme(t, themes, opts) {
    themes.themeElements.clrScheme = [];
    var color = {};
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0]){
            /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */ case "<a:clrScheme":
            case "</a:clrScheme>":
                break;
            /* 20.1.2.3.32 srgbClr CT_SRgbColor */ case "<a:srgbClr":
                color.rgb = y.val;
                break;
            /* 20.1.2.3.33 sysClr CT_SystemColor */ case "<a:sysClr":
                color.rgb = y.lastClr;
                break;
            /* 20.1.4.1.1 accent1 (Accent 1) */ /* 20.1.4.1.2 accent2 (Accent 2) */ /* 20.1.4.1.3 accent3 (Accent 3) */ /* 20.1.4.1.4 accent4 (Accent 4) */ /* 20.1.4.1.5 accent5 (Accent 5) */ /* 20.1.4.1.6 accent6 (Accent 6) */ /* 20.1.4.1.9 dk1 (Dark 1) */ /* 20.1.4.1.10 dk2 (Dark 2) */ /* 20.1.4.1.15 folHlink (Followed Hyperlink) */ /* 20.1.4.1.19 hlink (Hyperlink) */ /* 20.1.4.1.22 lt1 (Light 1) */ /* 20.1.4.1.23 lt2 (Light 2) */ case "<a:dk1>":
            case "</a:dk1>":
            case "<a:lt1>":
            case "</a:lt1>":
            case "<a:dk2>":
            case "</a:dk2>":
            case "<a:lt2>":
            case "</a:lt2>":
            case "<a:accent1>":
            case "</a:accent1>":
            case "<a:accent2>":
            case "</a:accent2>":
            case "<a:accent3>":
            case "</a:accent3>":
            case "<a:accent4>":
            case "</a:accent4>":
            case "<a:accent5>":
            case "</a:accent5>":
            case "<a:accent6>":
            case "</a:accent6>":
            case "<a:hlink>":
            case "</a:hlink>":
            case "<a:folHlink>":
            case "</a:folHlink>":
                if (y[0].charAt(1) === "/") {
                    themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
                    color = {};
                } else color.name = y[0].slice(3, y[0].length - 1);
                break;
            default:
                if (opts && opts.WTF) throw new Error("Unrecognized " + y[0] + " in clrScheme");
        }
    });
}
/* 20.1.4.1.18 fontScheme CT_FontScheme */ function parse_fontScheme() {}
/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */ function parse_fmtScheme() {}
var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
/* 20.1.6.10 themeElements CT_BaseStyles */ function parse_themeElements(data, themes, opts) {
    themes.themeElements = {};
    var t;
    [
        /* clrScheme CT_ColorScheme */ [
            "clrScheme",
            clrsregex,
            parse_clrScheme
        ],
        /* fontScheme CT_FontScheme */ [
            "fontScheme",
            fntsregex,
            parse_fontScheme
        ],
        /* fmtScheme CT_StyleMatrix */ [
            "fmtScheme",
            fmtsregex,
            parse_fmtScheme
        ]
    ].forEach(function(m) {
        if (!(t = data.match(m[1]))) throw new Error(m[0] + " not found in themeElements");
        m[2](t, themes, opts);
    });
}
var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
/* 14.2.7 Theme Part */ function parse_theme_xml(data /*:string*/ , opts) {
    /* 20.1.6.9 theme CT_OfficeStyleSheet */ if (!data || data.length === 0) data = write_theme();
    var t;
    var themes = {};
    /* themeElements CT_BaseStyles */ if (!(t = data.match(themeltregex))) throw new Error("themeElements not found in theme");
    parse_themeElements(t[0], themes, opts);
    themes.raw = data;
    return themes;
}
function write_theme(Themes, opts) /*:string*/ {
    if (opts && opts.themeXLSX) return opts.themeXLSX;
    if (Themes && typeof Themes.raw == "string") return Themes.raw;
    var o = [
        XML_HEADER
    ];
    o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    o[o.length] = "<a:themeElements>";
    o[o.length] = '<a:clrScheme name="Office">';
    o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    o[o.length] = "</a:clrScheme>";
    o[o.length] = '<a:fontScheme name="Office">';
    o[o.length] = "<a:majorFont>";
    o[o.length] = '<a:latin typeface="Cambria"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o[o.length] = '<a:font script="Hans" typeface="宋体"/>';
    o[o.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = "</a:majorFont>";
    o[o.length] = "<a:minorFont>";
    o[o.length] = '<a:latin typeface="Calibri"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o[o.length] = '<a:font script="Hans" typeface="宋体"/>';
    o[o.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = "</a:minorFont>";
    o[o.length] = "</a:fontScheme>";
    o[o.length] = '<a:fmtScheme name="Office">';
    o[o.length] = "<a:fillStyleLst>";
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = "</a:fillStyleLst>";
    o[o.length] = "<a:lnStyleLst>";
    o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = "</a:lnStyleLst>";
    o[o.length] = "<a:effectStyleLst>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "</a:effectStyleLst>";
    o[o.length] = "<a:bgFillStyleLst>";
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = "</a:bgFillStyleLst>";
    o[o.length] = "</a:fmtScheme>";
    o[o.length] = "</a:themeElements>";
    o[o.length] = "<a:objectDefaults>";
    o[o.length] = "<a:spDef>";
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    o[o.length] = "</a:spDef>";
    o[o.length] = "<a:lnDef>";
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    o[o.length] = "</a:lnDef>";
    o[o.length] = "</a:objectDefaults>";
    o[o.length] = "<a:extraClrSchemeLst/>";
    o[o.length] = "</a:theme>";
    return o.join("");
}
/* [MS-XLS] 2.4.326 TODO: payload is a zip file */ function parse_Theme(blob, length, opts) {
    var end = blob.l + length;
    var dwThemeVersion = blob.read_shift(4);
    if (dwThemeVersion === 124226) return;
    if (!opts.cellStyles) {
        blob.l = end;
        return;
    }
    var data = blob.slice(blob.l);
    blob.l = end;
    var zip;
    try {
        zip = zip_read(data, {
            type: "array"
        });
    } catch (e) {
        return;
    }
    var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    if (!themeXML) return;
    return parse_theme_xml(themeXML, opts);
}
/* 2.5.49 */ function parse_ColorTheme(blob /*::, length*/ ) {
    return blob.read_shift(4);
}
/* 2.5.155 */ function parse_FullColorExt(blob /*::, length*/ ) {
    var o = {};
    o.xclrType = blob.read_shift(2);
    o.nTintShade = blob.read_shift(2);
    switch(o.xclrType){
        case 0:
            blob.l += 4;
            break;
        case 1:
            o.xclrValue = parse_IcvXF(blob, 4);
            break;
        case 2:
            o.xclrValue = parse_LongRGBA(blob, 4);
            break;
        case 3:
            o.xclrValue = parse_ColorTheme(blob, 4);
            break;
        case 4:
            blob.l += 4;
            break;
    }
    blob.l += 8;
    return o;
}
/* 2.5.164 TODO: read 7 bits*/ function parse_IcvXF(blob, length) {
    return parsenoop(blob, length);
}
/* 2.5.280 */ function parse_XFExtGradient(blob, length) {
    return parsenoop(blob, length);
}
/* [MS-XLS] 2.5.108 */ function parse_ExtProp(blob /*::, length*/ ) /*:Array<any>*/ {
    var extType = blob.read_shift(2);
    var cb = blob.read_shift(2) - 4;
    var o = [
        extType
    ];
    switch(extType){
        case 0x04:
        case 0x05:
        case 0x07:
        case 0x08:
        case 0x09:
        case 0x0A:
        case 0x0B:
        case 0x0D:
            o[1] = parse_FullColorExt(blob, cb);
            break;
        case 0x06:
            o[1] = parse_XFExtGradient(blob, cb);
            break;
        case 0x0E:
        case 0x0F:
            o[1] = blob.read_shift(cb === 1 ? 1 : 2);
            break;
        default:
            throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    }
    return o;
}
/* 2.4.355 */ function parse_XFExt(blob, length) {
    var end = blob.l + length;
    blob.l += 2;
    var ixfe = blob.read_shift(2);
    blob.l += 2;
    var cexts = blob.read_shift(2);
    var ext /*:AOA*/  = [];
    while(cexts-- > 0)ext.push(parse_ExtProp(blob, end - blob.l));
    return {
        ixfe: ixfe,
        ext: ext
    };
}
/* xf is an XF, see parse_XFExt for xfext */ function update_xfext(xf, xfext) {
    xfext.forEach(function(xfe) {
        xfe[0];
    });
}
function parse_BrtMdtinfo(data, length) {
    return {
        flags: data.read_shift(4),
        version: data.read_shift(4),
        name: parse_XLWideString(data, length - 8)
    };
}
function write_BrtMdtinfo(data) {
    var o = new_buf(12 + 2 * data.name.length);
    o.write_shift(4, data.flags);
    o.write_shift(4, data.version);
    write_XLWideString(data.name, o);
    return o.slice(0, o.l);
}
function parse_BrtMdb(data) {
    var out = [];
    var cnt = data.read_shift(4);
    while(cnt-- > 0)out.push([
        data.read_shift(4),
        data.read_shift(4)
    ]);
    return out;
}
function write_BrtMdb(mdb) {
    var o = new_buf(4 + 8 * mdb.length);
    o.write_shift(4, mdb.length);
    for(var i = 0; i < mdb.length; ++i){
        o.write_shift(4, mdb[i][0]);
        o.write_shift(4, mdb[i][1]);
    }
    return o;
}
function write_BrtBeginEsfmd(cnt, name) {
    var o = new_buf(8 + 2 * name.length);
    o.write_shift(4, cnt);
    write_XLWideString(name, o);
    return o.slice(0, o.l);
}
function parse_BrtBeginEsmdb(data) {
    data.l += 4;
    return data.read_shift(4) != 0;
}
function write_BrtBeginEsmdb(cnt, cm) {
    var o = new_buf(8);
    o.write_shift(4, cnt);
    o.write_shift(4, cm ? 1 : 0);
    return o;
}
function parse_xlmeta_bin(data, name, _opts) {
    var out = {
        Types: [],
        Cell: [],
        Value: []
    };
    var opts = _opts || {};
    var state = [];
    var pass = false;
    var metatype = 2;
    recordhopper(data, function(val, R, RT) {
        switch(RT){
            case 335:
                out.Types.push({
                    name: val.name
                });
                break;
            case 51:
                val.forEach(function(r) {
                    if (metatype == 1) out.Cell.push({
                        type: out.Types[r[0] - 1].name,
                        index: r[1]
                    });
                    else if (metatype == 0) out.Value.push({
                        type: out.Types[r[0] - 1].name,
                        index: r[1]
                    });
                });
                break;
            case 337:
                metatype = val ? 1 : 0;
                break;
            case 338:
                metatype = 2;
                break;
            case 35:
                state.push(RT);
                pass = true;
                break;
            case 36:
                state.pop();
                pass = false;
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
function write_xlmeta_bin() {
    var ba = buf_array();
    write_record(ba, 332);
    write_record(ba, 334, write_UInt32LE(1));
    write_record(ba, 335, write_BrtMdtinfo({
        name: "XLDAPR",
        version: 12e4,
        flags: 3496657072
    }));
    write_record(ba, 336);
    write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
    write_record(ba, 52);
    write_record(ba, 35, write_UInt32LE(514));
    write_record(ba, 4096, write_UInt32LE(0));
    write_record(ba, 4097, writeuint16(1));
    write_record(ba, 36);
    write_record(ba, 53);
    write_record(ba, 340);
    write_record(ba, 337, write_BrtBeginEsmdb(1, true));
    write_record(ba, 51, write_BrtMdb([
        [
            1,
            0
        ]
    ]));
    write_record(ba, 338);
    write_record(ba, 333);
    return ba.end();
}
function parse_xlmeta_xml(data, name, opts) {
    var out = {
        Types: [],
        Cell: [],
        Value: []
    };
    if (!data) return out;
    var pass = false;
    var metatype = 2;
    var lastmeta;
    data.replace(tagregex, function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            case "<metadata":
            case "</metadata>":
                break;
            case "<metadataTypes":
            case "</metadataTypes>":
                break;
            case "<metadataType":
                out.Types.push({
                    name: y.name
                });
                break;
            case "</metadataType>":
                break;
            case "<futureMetadata":
                for(var j = 0; j < out.Types.length; ++j)if (out.Types[j].name == y.name) lastmeta = out.Types[j];
                break;
            case "</futureMetadata>":
                break;
            case "<bk>":
                break;
            case "</bk>":
                break;
            case "<rc":
                if (metatype == 1) out.Cell.push({
                    type: out.Types[y.t - 1].name,
                    index: +y.v
                });
                else if (metatype == 0) out.Value.push({
                    type: out.Types[y.t - 1].name,
                    index: +y.v
                });
                break;
            case "</rc>":
                break;
            case "<cellMetadata":
                metatype = 1;
                break;
            case "</cellMetadata>":
                metatype = 2;
                break;
            case "<valueMetadata":
                metatype = 0;
                break;
            case "</valueMetadata>":
                metatype = 2;
                break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            case "<rvb":
                if (!lastmeta) break;
                if (!lastmeta.offsets) lastmeta.offsets = [];
                lastmeta.offsets.push(+y.i);
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in metadata");
        }
        return x;
    });
    return out;
}
function write_xlmeta_xml() {
    var o = [
        XML_HEADER
    ];
    o.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
    return o.join("");
}
/* 18.6 Calculation Chain */ function parse_cc_xml(data /*::, name, opts*/ ) /*:Array<any>*/ {
    var d = [];
    if (!data) return d;
    var i = 1;
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0]){
            case "<?xml":
                break;
            /* 18.6.2  calcChain CT_CalcChain 1 */ case "<calcChain":
            case "<calcChain>":
            case "</calcChain>":
                break;
            /* 18.6.1  c CT_CalcCell 1 */ case "<c":
                delete y[0];
                if (y.i) i = y.i;
                else y.i = i;
                d.push(y);
                break;
        }
    });
    return d;
}
//function write_cc_xml(data, opts) { }
/* [MS-XLSB] 2.6.4.1 */ function parse_BrtCalcChainItem$(data) {
    var out = {};
    out.i = data.read_shift(4);
    var cell = {};
    cell.r = data.read_shift(4);
    cell.c = data.read_shift(4);
    out.r = encode_cell(cell);
    var flags = data.read_shift(1);
    if (flags & 0x2) out.l = "1";
    if (flags & 0x8) out.a = "1";
    return out;
}
/* 18.6 Calculation Chain */ function parse_cc_bin(data, name, opts) {
    var out = [];
    var pass = false;
    recordhopper(data, function hopper_cc(val, R, RT) {
        switch(RT){
            case 0x003F:
                /* 'BrtCalcChainItem$' */ out.push(val);
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
//function write_cc_bin(data, opts) { }
/* 18.14 Supplementary Workbook Data */ function parse_xlink_xml() {
//var opts = _opts || {};
//if(opts.WTF) throw "XLSX External Link";
}
/* [MS-XLSB] 2.1.7.25 External Link */ function parse_xlink_bin(data, rel, name /*:string*/ , _opts) {
    if (!data) return data;
    var opts = _opts || {};
    var pass = false, end = false;
    recordhopper(data, function xlink_parse(val, R, RT) {
        if (end) return;
        switch(RT){
            case 0x0167:
            /* 'BrtSupTabs' */ case 0x016B:
            /* 'BrtExternTableStart' */ case 0x016C:
            /* 'BrtExternTableEnd' */ case 0x016E:
            /* 'BrtExternRowHdr' */ case 0x016F:
            /* 'BrtExternCellBlank' */ case 0x0170:
            /* 'BrtExternCellReal' */ case 0x0171:
            /* 'BrtExternCellBool' */ case 0x0172:
            /* 'BrtExternCellError' */ case 0x0173:
            /* 'BrtExternCellString' */ case 0x01D8:
            /* 'BrtExternValueMeta' */ case 0x0241:
            /* 'BrtSupNameStart' */ case 0x0242:
            /* 'BrtSupNameValueStart' */ case 0x0243:
            /* 'BrtSupNameValueEnd' */ case 0x0244:
            /* 'BrtSupNameNum' */ case 0x0245:
            /* 'BrtSupNameErr' */ case 0x0246:
            /* 'BrtSupNameSt' */ case 0x0247:
            /* 'BrtSupNameNil' */ case 0x0248:
            /* 'BrtSupNameBool' */ case 0x0249:
            /* 'BrtSupNameFmla' */ case 0x024A:
            /* 'BrtSupNameBits' */ case 0x024B:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
}
/* 20.5 DrawingML - SpreadsheetML Drawing */ /* 20.5.2.35 wsDr CT_Drawing */ function parse_drawing(data, rels /*:any*/ ) {
    if (!data) return "??";
    /*
	  Chartsheet Drawing:
	   - 20.5.2.35 wsDr CT_Drawing
	    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
	     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
	      - 20.1.2.2.16 graphic CT_GraphicalObject
	       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
          - chart reference
	   the actual type is based on the URI of the graphicData
		TODO: handle embedded charts and other types of graphics
	*/ var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || [
        "",
        ""
    ])[1];
    return rels["!id"][id].Target;
}
/* L.5.5.2 SpreadsheetML Comments + VML Schema */ var _shapeid = 1024;
function write_comments_vml(rId /*:number*/ , comments) {
    var csize = [
        21600,
        21600
    ];
    /* L.5.2.1.2 Path Attribute */ var bbox = [
        "m0,0l0",
        csize[1],
        csize[0],
        csize[1],
        csize[0],
        "0xe"
    ].join(",");
    var o = [
        writextag("xml", null, {
            "xmlns:v": XLMLNS.v,
            "xmlns:o": XLMLNS.o,
            "xmlns:x": XLMLNS.x,
            "xmlns:mv": XLMLNS.mv
        }).replace(/\/>/, ">"),
        writextag("o:shapelayout", writextag("o:idmap", null, {
            "v:ext": "edit",
            "data": rId
        }), {
            "v:ext": "edit"
        }),
        writextag("v:shapetype", [
            writextag("v:stroke", null, {
                joinstyle: "miter"
            }),
            writextag("v:path", null, {
                gradientshapeok: "t",
                "o:connecttype": "rect"
            })
        ].join(""), {
            id: "_x0000_t202",
            "o:spt": 202,
            coordsize: csize.join(","),
            path: bbox
        })
    ];
    while(_shapeid < rId * 1000)_shapeid += 1000;
    comments.forEach(function(x) {
        var c = decode_cell(x[0]);
        var fillopts = /*::(*/ {
            "color2": "#BEFF82",
            "type": "gradient"
        } /*:: :any)*/ ;
        if (fillopts.type == "gradient") fillopts.angle = "-180";
        var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, {
            type: "gradientUnscaled",
            "v:ext": "view"
        }) : null;
        var fillxml = writextag("v:fill", fillparm, fillopts);
        var shadata = {
            on: "t",
            "obscured": "t"
        } /*:any*/ ;
        ++_shapeid;
        o = o.concat([
            "<v:shape" + wxt_helper({
                id: "_x0000_s" + _shapeid,
                type: "#_x0000_t202",
                style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
                fillcolor: "#ECFAD4",
                strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, {
                "o:connecttype": "none"
            }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            /* Part 4 19.4.2.3 Anchor (Anchor) */ writetag("x:Anchor", [
                c.c + 1,
                0,
                c.r + 1,
                0,
                c.c + 3,
                20,
                c.r + 5,
                20
            ].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c.r)),
            writetag("x:Column", String(c.c)),
            x[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
        ]);
    });
    o.push("</xml>");
    return o.join("");
}
function sheet_insert_comments(sheet, comments /*:Array<RawComment>*/ , threaded /*:boolean*/ , people /*:?Array<any>*/ ) {
    var dense = Array.isArray(sheet);
    var cell /*:Cell*/ ;
    comments.forEach(function(comment) {
        var r = decode_cell(comment.ref);
        if (dense) {
            if (!sheet[r.r]) sheet[r.r] = [];
            cell = sheet[r.r][r.c];
        } else cell = sheet[comment.ref];
        if (!cell) {
            cell = {
                t: "z"
            } /*:any*/ ;
            if (dense) sheet[r.r][r.c] = cell;
            else sheet[comment.ref] = cell;
            var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
            if (range.s.r > r.r) range.s.r = r.r;
            if (range.e.r < r.r) range.e.r = r.r;
            if (range.s.c > r.c) range.s.c = r.c;
            if (range.e.c < r.c) range.e.c = r.c;
            var encoded = encode_range(range);
            if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
        }
        if (!cell.c) cell.c = [];
        var o /*:Comment*/  = {
            a: comment.author,
            t: comment.t,
            r: comment.r,
            T: threaded
        };
        if (comment.h) o.h = comment.h;
        /* threaded comments always override */ for(var i = cell.c.length - 1; i >= 0; --i){
            if (!threaded && cell.c[i].T) return;
            if (threaded && !cell.c[i].T) cell.c.splice(i, 1);
        }
        if (threaded && people) {
            for(i = 0; i < people.length; ++i)if (o.a == people[i].id) {
                o.a = people[i].name || o.a;
                break;
            }
        }
        cell.c.push(o);
    });
}
/* 18.7 Comments */ function parse_comments_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {
    /* 18.7.6 CT_Comments */ if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
    var authors /*:Array<string>*/  = [];
    var commentList /*:Array<RawComment>*/  = [];
    var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
        if (x === "" || x.trim() === "") return;
        var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
        if (a) authors.push(a[1]);
    });
    var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
        if (x === "" || x.trim() === "") return;
        var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
        if (!cm) return;
        var y = parsexmltag(cm[0]);
        var comment /*:RawComment*/  = {
            author: y.authorId && authors[y.authorId] || "sheetjsghost",
            ref: y.ref,
            guid: y.guid
        } /*:any*/ ;
        var cell = decode_cell(y.ref);
        if (opts.sheetRows && opts.sheetRows <= cell.r) return;
        var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
        var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {
            r: "",
            t: "",
            h: ""
        };
        comment.r = rt.r;
        if (rt.r == "<t></t>") rt.t = rt.h = "";
        comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        if (opts.cellHTML) comment.h = rt.h;
        commentList.push(comment);
    });
    return commentList;
}
function write_comments_xml(data /*::, opts*/ ) {
    var o = [
        XML_HEADER,
        writextag("comments", null, {
            "xmlns": XMLNS_main[0]
        })
    ];
    var iauthor /*:Array<string>*/  = [];
    o.push("<authors>");
    data.forEach(function(x) {
        x[1].forEach(function(w) {
            var a = escapexml(w.a);
            if (iauthor.indexOf(a) == -1) {
                iauthor.push(a);
                o.push("<author>" + a + "</author>");
            }
            if (w.T && w.ID && iauthor.indexOf("tc=" + w.ID) == -1) {
                iauthor.push("tc=" + w.ID);
                o.push("<author>tc=" + w.ID + "</author>");
            }
        });
    });
    if (iauthor.length == 0) {
        iauthor.push("SheetJ5");
        o.push("<author>SheetJ5</author>");
    }
    o.push("</authors>");
    o.push("<commentList>");
    data.forEach(function(d) {
        /* 18.7.3 CT_Comment */ var lastauthor = 0, ts = [];
        if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
        else d[1].forEach(function(c) {
            if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));
            ts.push(c.t || "");
        });
        o.push('<comment ref="' + d[0] + '" authorId="' + lastauthor + '"><text>');
        if (ts.length <= 1) o.push(writetag("t", escapexml(ts[0] || "")));
        else {
            /* based on Threaded Comments -> Comments projection */ var t = "Comment:\n    " + ts[0] + "\n";
            for(var i = 1; i < ts.length; ++i)t += "Reply:\n    " + ts[i] + "\n";
            o.push(writetag("t", escapexml(t)));
        }
        o.push("</text></comment>");
    });
    o.push("</commentList>");
    if (o.length > 2) {
        o[o.length] = "</comments>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSX] 2.1.17 */ function parse_tcmnt_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {
    var out = [];
    var pass = false, comment = {}, tidx = 0;
    data.replace(tagregex, function xml_tcmnt(x, idx) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 2.6.207 ThreadedComments CT_ThreadedComments */ case "<ThreadedComments":
                break;
            case "</ThreadedComments>":
                break;
            /* 2.6.205 threadedComment CT_ThreadedComment */ case "<threadedComment":
                comment = {
                    author: y.personId,
                    guid: y.id,
                    ref: y.ref,
                    T: 1
                };
                break;
            case "</threadedComment>":
                if (comment.t != null) out.push(comment);
                break;
            case "<text>":
            case "<text":
                tidx = idx + x.length;
                break;
            case "</text>":
                comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                break;
            /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */ case "<mentions":
            case "<mentions>":
                pass = true;
                break;
            case "</mentions>":
                pass = false;
                break;
            /* 2.6.202 mention CT_Mention TODO */ /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
        }
        return x;
    });
    return out;
}
function write_tcmnt_xml(comments, people, opts) {
    var o = [
        XML_HEADER,
        writextag("ThreadedComments", null, {
            "xmlns": XMLNS.TCMNT
        }).replace(/[\/]>/, ">")
    ];
    comments.forEach(function(carr) {
        var rootid = "";
        (carr[1] || []).forEach(function(c, idx) {
            if (!c.T) {
                delete c.ID;
                return;
            }
            if (c.a && people.indexOf(c.a) == -1) people.push(c.a);
            var tcopts = {
                ref: carr[0],
                id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
            };
            if (idx == 0) rootid = tcopts.id;
            else tcopts.parentId = rootid;
            c.ID = tcopts.id;
            if (c.a) tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c.a)).slice(-12) + "}";
            o.push(writextag("threadedComment", writetag("text", c.t || ""), tcopts));
        });
    });
    o.push("</ThreadedComments>");
    return o.join("");
}
/* [MS-XLSX] 2.1.18 */ function parse_people_xml(data /*:string*/ , opts) {
    var out = [];
    var pass = false;
    data.replace(tagregex, function xml_tcmnt(x) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 2.4.85 personList CT_PersonList */ case "<personList":
                break;
            case "</personList>":
                break;
            /* 2.6.203 person CT_Person TODO: providers */ case "<person":
                out.push({
                    name: y.displayname,
                    id: y.id
                });
                break;
            case "</person>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
        }
        return x;
    });
    return out;
}
function write_people_xml(people /*, opts*/ ) {
    var o = [
        XML_HEADER,
        writextag("personList", null, {
            "xmlns": XMLNS.TCMNT,
            "xmlns:x": XMLNS_main[0]
        }).replace(/[\/]>/, ">")
    ];
    people.forEach(function(person, idx) {
        o.push(writextag("person", null, {
            displayName: person,
            id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
            userId: person,
            providerId: "None"
        }));
    });
    o.push("</personList>");
    return o.join("");
}
/* [MS-XLSB] 2.4.28 BrtBeginComment */ function parse_BrtBeginComment(data) {
    var out = {};
    out.iauthor = data.read_shift(4);
    var rfx = parse_UncheckedRfX(data, 16);
    out.rfx = rfx.s;
    out.ref = encode_cell(rfx.s);
    data.l += 16; /*var guid = parse_GUID(data); */ 
    return out;
}
function write_BrtBeginComment(data, o) {
    if (o == null) o = new_buf(36);
    o.write_shift(4, data[1].iauthor);
    write_UncheckedRfX(data[0], o);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
}
/* [MS-XLSB] 2.4.327 BrtCommentAuthor */ var parse_BrtCommentAuthor = parse_XLWideString;
function write_BrtCommentAuthor(data) {
    return write_XLWideString(data.slice(0, 54));
}
/* [MS-XLSB] 2.1.7.8 Comments */ function parse_comments_bin(data, opts) /*:Array<RawComment>*/ {
    var out /*:Array<RawComment>*/  = [];
    var authors /*:Array<string>*/  = [];
    var c = {};
    var pass = false;
    recordhopper(data, function hopper_cmnt(val, R, RT) {
        switch(RT){
            case 0x0278:
                /* 'BrtCommentAuthor' */ authors.push(val);
                break;
            case 0x027B:
                /* 'BrtBeginComment' */ c = val;
                break;
            case 0x027D:
                /* 'BrtCommentText' */ c.t = val.t;
                c.h = val.h;
                c.r = val.r;
                break;
            case 0x027C:
                /* 'BrtEndComment' */ c.author = authors[c.iauthor];
                delete c /*:any*/ .iauthor;
                if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
                if (!c.t) c.t = "";
                delete c.rfx;
                out.push(c);
                break;
            case 0x0C00:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                break;
            case 0x0026:
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
function write_comments_bin(data /*::, opts*/ ) {
    var ba = buf_array();
    var iauthor /*:Array<string>*/  = [];
    write_record(ba, 0x0274 /* BrtBeginComments */ );
    write_record(ba, 0x0276 /* BrtBeginCommentAuthors */ );
    data.forEach(function(comment) {
        comment[1].forEach(function(c) {
            if (iauthor.indexOf(c.a) > -1) return;
            iauthor.push(c.a.slice(0, 54));
            write_record(ba, 0x0278 /* BrtCommentAuthor */ , write_BrtCommentAuthor(c.a));
        });
    });
    write_record(ba, 0x0277 /* BrtEndCommentAuthors */ );
    write_record(ba, 0x0279 /* BrtBeginCommentList */ );
    data.forEach(function(comment) {
        comment[1].forEach(function(c) {
            c.iauthor = iauthor.indexOf(c.a);
            var range = {
                s: decode_cell(comment[0]),
                e: decode_cell(comment[0])
            };
            write_record(ba, 0x027B /* BrtBeginComment */ , write_BrtBeginComment([
                range,
                c
            ]));
            if (c.t && c.t.length > 0) write_record(ba, 0x027D /* BrtCommentText */ , write_BrtCommentText(c));
            write_record(ba, 0x027C /* BrtEndComment */ );
            delete c.iauthor;
        });
    });
    write_record(ba, 0x027A /* BrtEndCommentList */ );
    write_record(ba, 0x0275 /* BrtEndComments */ );
    return ba.end();
}
var CT_VBA = "application/vnd.ms-office.vbaProject";
function make_vba_xls(cfb) {
    var newcfb = CFB.utils.cfb_new({
        root: "R"
    });
    cfb.FullPaths.forEach(function(p, i) {
        if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/)) return;
        var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
    });
    return CFB.write(newcfb);
}
function fill_vba_xls(cfb, vba) {
    vba.FullPaths.forEach(function(p, i) {
        if (i == 0) return;
        var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
        if (newpath.slice(-1) !== "/") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
    });
}
var VBAFMTS = [
    "xlsb",
    "xlsm",
    "xlam",
    "biff8",
    "xla"
];
/* macro and dialog sheet stubs */ function parse_ds_bin() /*:Worksheet*/ {
    return {
        "!type": "dialog"
    };
}
function parse_ds_xml() /*:Worksheet*/ {
    return {
        "!type": "dialog"
    };
}
function parse_ms_bin() /*:Worksheet*/ {
    return {
        "!type": "macro"
    };
}
function parse_ms_xml() /*:Worksheet*/ {
    return {
        "!type": "macro"
    };
}
/* TODO: it will be useful to parse the function str */ var rc_to_a1 = /*#__PURE__*/ function() {
    var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    var rcbase /*:Cell*/  = {
        r: 0,
        c: 0
    } /*:any*/ ;
    function rcfunc($$, $1, $2, $3) {
        var cRel = false, rRel = false;
        if ($2.length == 0) rRel = true;
        else if ($2.charAt(0) == "[") {
            rRel = true;
            $2 = $2.slice(1, -1);
        }
        if ($3.length == 0) cRel = true;
        else if ($3.charAt(0) == "[") {
            cRel = true;
            $3 = $3.slice(1, -1);
        }
        var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
        if (cRel) C += rcbase.c;
        else --C;
        if (rRel) R += rcbase.r;
        else --R;
        return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
    }
    return function rc_to_a1(fstr /*:string*/ , base /*:Cell*/ ) /*:string*/ {
        rcbase = base;
        return fstr.replace(rcregex, rcfunc);
    };
}();
var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
var a1_to_rc = /*#__PURE__*/ function() {
    return function a1_to_rc(fstr /*:string*/ , base /*:CellAddress*/ ) {
        return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
            var c = decode_col($3) - ($2 ? 0 : base.c);
            var r = decode_row($5) - ($4 ? 0 : base.r);
            var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
            var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
            return $1 + "R" + R + "C" + C;
        });
    };
}();
/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */ function shift_formula_str(f /*:string*/ , delta /*:Cell*/ ) /*:string*/ {
    return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
        return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
    });
}
function shift_formula_xlsx(f /*:string*/ , range /*:string*/ , cell /*:string*/ ) /*:string*/ {
    var r = decode_range(range), s = r.s, c = decode_cell(cell);
    var delta = {
        r: c.r - s.r,
        c: c.c - s.c
    };
    return shift_formula_str(f, delta);
}
/* TODO: parse formula */ function fuzzyfmla(f /*:string*/ ) /*:boolean*/ {
    if (f.length == 1) return false;
    return true;
}
function _xlfn(f /*:string*/ ) /*:string*/ {
    return f.replace(/_xlfn\./g, "");
}
function parseread1(blob) {
    blob.l += 1;
    return;
}
/* [MS-XLS] 2.5.51 */ function parse_ColRelU(blob, length) {
    var c = blob.read_shift(length == 1 ? 1 : 2);
    return [
        c & 0x3FFF,
        c >> 14 & 1,
        c >> 15 & 1
    ];
}
/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */ function parse_RgceArea(blob, length, opts) {
    var w = 2;
    if (opts) {
        if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);
        else if (opts.biff == 12) w = 4;
    }
    var r = blob.read_shift(w), R = blob.read_shift(w);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
        s: {
            r: r,
            c: c[0],
            cRel: c[1],
            rRel: c[2]
        },
        e: {
            r: R,
            c: C[0],
            cRel: C[1],
            rRel: C[2]
        }
    };
}
/* BIFF 2-5 encodes flags in the row field */ function parse_RgceArea_BIFF2(blob /*::, length, opts*/ ) {
    var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    var C = blob.read_shift(1);
    return {
        s: {
            r: r[0],
            c: c,
            cRel: r[1],
            rRel: r[2]
        },
        e: {
            r: R[0],
            c: C,
            cRel: R[1],
            rRel: R[2]
        }
    };
}
/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */ function parse_RgceAreaRel(blob, length, opts) {
    if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
        s: {
            r: r,
            c: c[0],
            cRel: c[1],
            rRel: c[2]
        },
        e: {
            r: R,
            c: C[0],
            cRel: C[1],
            rRel: C[2]
        }
    };
}
/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */ function parse_RgceLoc(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    return {
        r: r,
        c: c[0],
        cRel: c[1],
        rRel: c[2]
    };
}
function parse_RgceLoc_BIFF2(blob /*::, length, opts*/ ) {
    var r = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    return {
        r: r[0],
        c: c,
        cRel: r[1],
        rRel: r[2]
    };
}
/* [MS-XLS] 2.5.198.107, 2.5.47 */ function parse_RgceElfLoc(blob /*::, length, opts*/ ) {
    var r = blob.read_shift(2);
    var c = blob.read_shift(2);
    return {
        r: r,
        c: c & 0xFF,
        fQuoted: !!(c & 0x4000),
        cRel: c >> 15,
        rRel: c >> 15
    };
}
/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */ function parse_RgceLocRel(blob, length, opts) {
    var biff = opts && opts.biff ? opts.biff : 8;
    if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
    var r = blob.read_shift(biff >= 12 ? 4 : 2);
    var cl = blob.read_shift(2);
    var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
    cl &= 0x3FFF;
    if (rRel == 1) while(r > 0x7FFFF)r -= 0x100000;
    if (cRel == 1) while(cl > 0x1FFF)cl = cl - 0x4000;
    return {
        r: r,
        c: cl,
        cRel: cRel,
        rRel: rRel
    };
}
function parse_RgceLocRel_BIFF2(blob /*::, length:number, opts*/ ) {
    var rl = blob.read_shift(2);
    var c = blob.read_shift(1);
    var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
    rl &= 0x3FFF;
    if (rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
    if (cRel == 1 && c >= 0x80) c = c - 0x100;
    return {
        r: rl,
        c: c,
        cRel: cRel,
        rRel: rRel
    };
}
/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */ function parse_PtgArea(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    return [
        type,
        area
    ];
}
/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */ function parse_PtgArea3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2, "i");
    var w = 8;
    if (opts) switch(opts.biff){
        case 5:
            blob.l += 12;
            w = 6;
            break;
        case 12:
            w = 12;
            break;
    }
    var area = parse_RgceArea(blob, w, opts);
    return [
        type,
        ixti,
        area
    ];
}
/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */ function parse_PtgAreaErr(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */ function parse_PtgAreaErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 8;
    if (opts) switch(opts.biff){
        case 5:
            blob.l += 12;
            w = 6;
            break;
        case 12:
            w = 12;
            break;
    }
    blob.l += w;
    return [
        type,
        ixti
    ];
}
/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */ function parse_PtgAreaN(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceAreaRel(blob, length - 1, opts);
    return [
        type,
        area
    ];
}
/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */ function parse_PtgArray(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */ function parse_PtgAttrBaxcel(blob) {
    var bitSemi = blob[blob.l + 1] & 0x01; /* 1 = volatile */ 
    var bitBaxcel = 1;
    blob.l += 4;
    return [
        bitSemi,
        bitBaxcel
    ];
}
/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */ function parse_PtgAttrChoose(blob, length, opts) /*:Array<number>*/ {
    blob.l += 2;
    var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var o /*:Array<number>*/  = [];
    /* offset is 1 less than the number of elements */ for(var i = 0; i <= offset; ++i)o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
    return o;
}
/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */ function parse_PtgAttrGoto(blob, length, opts) {
    var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitGoto,
        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)
    ];
}
/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */ function parse_PtgAttrIf(blob, length, opts) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitIf,
        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)
    ];
}
/* [MS-XLSB] 2.5.97.28 */ function parse_PtgAttrIfError(blob) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitIf,
        blob.read_shift(2)
    ];
}
/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */ function parse_PtgAttrSemi(blob, length, opts) {
    var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return [
        bitSemi
    ];
}
/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */ function parse_PtgAttrSpaceType(blob /*::, length*/ ) {
    var type = blob.read_shift(1), cch = blob.read_shift(1);
    return [
        type,
        cch
    ];
}
/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */ function parse_PtgAttrSpace(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
}
/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */ function parse_PtgAttrSpaceSemi(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
}
/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */ function parse_PtgRef(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLoc(blob, 0, opts);
    return [
        type,
        loc
    ];
}
/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */ function parse_PtgRefN(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLocRel(blob, 0, opts);
    return [
        type,
        loc
    ];
}
/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */ function parse_PtgRef3d(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var ixti = blob.read_shift(2); // XtiIndex
    if (opts && opts.biff == 5) blob.l += 12;
    var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
    return [
        type,
        ixti,
        loc
    ];
}
/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */ function parse_PtgFunc(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    return [
        FtabArgc[iftab],
        Ftab[iftab],
        type
    ];
}
/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */ function parse_PtgFuncVar(blob, length, opts) {
    var type = blob[blob.l++];
    var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [
        type == 0x58 ? -1 : 0,
        blob.read_shift(1)
    ] : parsetab(blob);
    return [
        cparams,
        (tab[0] === 0 ? Ftab : Cetab)[tab[1]]
    ];
}
function parsetab(blob) {
    return [
        blob[blob.l + 1] >> 7,
        blob.read_shift(2) & 0x7FFF
    ];
}
/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */ function parse_PtgAttrSum(blob, length, opts) {
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return;
}
/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */ function parse_PtgExp(blob, length, opts) {
    blob.l++;
    if (opts && opts.biff == 12) return [
        blob.read_shift(4, "i"),
        0
    ];
    var row = blob.read_shift(2);
    var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        row,
        col
    ];
}
/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */ function parse_PtgErr(blob) {
    blob.l++;
    return BErr[blob.read_shift(1)];
}
/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */ function parse_PtgInt(blob) {
    blob.l++;
    return blob.read_shift(2);
}
/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */ function parse_PtgBool(blob) {
    blob.l++;
    return blob.read_shift(1) !== 0;
}
/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */ function parse_PtgNum(blob) {
    blob.l++;
    return parse_Xnum(blob, 8);
}
/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */ function parse_PtgStr(blob, length, opts) {
    blob.l++;
    return parse_ShortXLUnicodeString(blob, length - 1, opts);
}
/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */ /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */ function parse_SerAr(blob, biff /*:number*/ ) {
    var val = [
        blob.read_shift(1)
    ];
    if (biff == 12) switch(val[0]){
        case 0x02:
            val[0] = 0x04;
            break; /* SerBool */ 
        case 0x04:
            val[0] = 0x10;
            break; /* SerErr */ 
        case 0x00:
            val[0] = 0x01;
            break; /* SerNum */ 
        case 0x01:
            val[0] = 0x02;
            break; /* SerStr */ 
    }
    switch(val[0]){
        case 0x04:
            /* SerBool -- boolean */ val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
            if (biff != 12) blob.l += 7;
            break;
        case 0x25:
        /* appears to be an alias */ case 0x10:
            /* SerErr -- error */ val[1] = BErr[blob[blob.l]];
            blob.l += biff == 12 ? 4 : 8;
            break;
        case 0x00:
            /* SerNil -- honestly, I'm not sure how to reproduce this */ blob.l += 8;
            break;
        case 0x01:
            /* SerNum -- Xnum */ val[1] = parse_Xnum(blob, 8);
            break;
        case 0x02:
            /* SerStr -- XLUnicodeString (<256 chars) */ val[1] = parse_XLUnicodeString2(blob, 0, {
                biff: biff > 0 && biff < 8 ? 2 : biff
            });
            break;
        default:
            throw new Error("Bad SerAr: " + val[0]); /* Unreachable */ 
    }
    return val;
}
/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */ function parse_PtgExtraMem(blob, cce, opts) {
    var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var out /*:Array<Range>*/  = [];
    for(var i = 0; i != count; ++i)out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
    return out;
}
/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */ function parse_PtgExtraArray(blob, length, opts) {
    var rows = 0, cols = 0;
    if (opts.biff == 12) {
        rows = blob.read_shift(4); // DRw
        cols = blob.read_shift(4); // DCol
    } else {
        cols = 1 + blob.read_shift(1); //DColByteU
        rows = 1 + blob.read_shift(2); //DRw
    }
    if (opts.biff >= 2 && opts.biff < 8) {
        --rows;
        if (--cols == 0) cols = 0x100;
    }
    // $FlowIgnore
    for(var i = 0, o /*:Array<Array<any>>*/  = []; i != rows && (o[i] = []); ++i)for(var j = 0; j != cols; ++j)o[i][j] = parse_SerAr(blob, opts.biff);
    return o;
}
/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */ function parse_PtgName(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var w = !opts || opts.biff >= 8 ? 4 : 2;
    var nameindex = blob.read_shift(w);
    switch(opts.biff){
        case 2:
            blob.l += 5;
            break;
        case 3:
        case 4:
            blob.l += 8;
            break;
        case 5:
            blob.l += 12;
            break;
    }
    return [
        type,
        0,
        nameindex
    ];
}
/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */ function parse_PtgNameX(blob, length, opts) {
    if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2); // XtiIndex
    var nameindex = blob.read_shift(4);
    return [
        type,
        ixti,
        nameindex
    ];
}
function parse_PtgNameX_BIFF5(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2, "i"); // XtiIndex
    blob.l += 8;
    var nameindex = blob.read_shift(2);
    blob.l += 12;
    return [
        type,
        ixti,
        nameindex
    ];
}
/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */ function parse_PtgMemArea(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        type,
        cce
    ];
}
/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */ function parse_PtgMemFunc(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        type,
        cce
    ];
}
/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */ function parse_PtgRefErr(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += 4;
    if (opts.biff < 8) blob.l--;
    if (opts.biff == 12) blob.l += 2;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */ function parse_PtgRefErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 4;
    if (opts) switch(opts.biff){
        case 5:
            w = 15;
            break;
        case 12:
            w = 6;
            break;
    }
    blob.l += w;
    return [
        type,
        ixti
    ];
}
/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */ var parse_PtgMemErr = parsenoop;
/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */ var parse_PtgMemNoMem = parsenoop;
/* [MS-XLS] 2.5.198.92 */ var parse_PtgTbl = parsenoop;
function parse_PtgElfLoc(blob, length, opts) {
    blob.l += 2;
    return [
        parse_RgceElfLoc(blob, 4, opts)
    ];
}
function parse_PtgElfNoop(blob /*::, length, opts*/ ) {
    blob.l += 6;
    return [];
}
/* [MS-XLS] 2.5.198.46 */ var parse_PtgElfCol = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.47 */ var parse_PtgElfColS = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.48 */ var parse_PtgElfColSV = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.49 */ var parse_PtgElfColV = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.50 */ function parse_PtgElfLel(blob /*::, length, opts*/ ) {
    blob.l += 2;
    return [
        parseuint16(blob),
        blob.read_shift(2) & 0x01
    ];
}
/* [MS-XLS] 2.5.198.51 */ var parse_PtgElfRadical = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.52 */ var parse_PtgElfRadicalLel = parse_PtgElfLel;
/* [MS-XLS] 2.5.198.53 */ var parse_PtgElfRadicalS = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.54 */ var parse_PtgElfRw = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.55 */ var parse_PtgElfRwV = parse_PtgElfLoc;
/* [MS-XLSB] 2.5.97.52 TODO */ var PtgListRT = [
    "Data",
    "All",
    "Headers",
    "??",
    "?Data2",
    "??",
    "?DataHeaders",
    "??",
    "Totals",
    "??",
    "??",
    "??",
    "?DataTotals",
    "??",
    "??",
    "??",
    "?Current"
];
function parse_PtgList(blob /*::, length, opts*/ ) {
    blob.l += 2;
    var ixti = blob.read_shift(2);
    var flags = blob.read_shift(2);
    var idx = blob.read_shift(4);
    var c = blob.read_shift(2);
    var C = blob.read_shift(2);
    var rt = PtgListRT[flags >> 2 & 0x1F];
    return {
        ixti: ixti,
        coltype: flags & 0x3,
        rt: rt,
        idx: idx,
        c: c,
        C: C
    };
}
/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */ function parse_PtgSxName(blob /*::, length, opts*/ ) {
    blob.l += 2;
    return [
        blob.read_shift(4)
    ];
}
/* [XLS] old spec */ function parse_PtgSheet(blob, length, opts) {
    blob.l += 5;
    blob.l += 2;
    blob.l += opts.biff == 2 ? 1 : 4;
    return [
        "PTGSHEET"
    ];
}
function parse_PtgEndSheet(blob, length, opts) {
    blob.l += opts.biff == 2 ? 4 : 5;
    return [
        "PTGENDSHEET"
    ];
}
function parse_PtgMemAreaN(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [
        type,
        cce
    ];
}
function parse_PtgMemNoMemN(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [
        type,
        cce
    ];
}
function parse_PtgAttrNoop(blob /*::, length, opts*/ ) {
    blob.l += 4;
    return [
        0,
        0
    ];
}
/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */ var PtgTypes = {
    /*::[*/ 0x01: {
        n: "PtgExp",
        f: parse_PtgExp
    },
    /*::[*/ 0x02: {
        n: "PtgTbl",
        f: parse_PtgTbl
    },
    /*::[*/ 0x03: {
        n: "PtgAdd",
        f: parseread1
    },
    /*::[*/ 0x04: {
        n: "PtgSub",
        f: parseread1
    },
    /*::[*/ 0x05: {
        n: "PtgMul",
        f: parseread1
    },
    /*::[*/ 0x06: {
        n: "PtgDiv",
        f: parseread1
    },
    /*::[*/ 0x07: {
        n: "PtgPower",
        f: parseread1
    },
    /*::[*/ 0x08: {
        n: "PtgConcat",
        f: parseread1
    },
    /*::[*/ 0x09: {
        n: "PtgLt",
        f: parseread1
    },
    /*::[*/ 0x0A: {
        n: "PtgLe",
        f: parseread1
    },
    /*::[*/ 0x0B: {
        n: "PtgEq",
        f: parseread1
    },
    /*::[*/ 0x0C: {
        n: "PtgGe",
        f: parseread1
    },
    /*::[*/ 0x0D: {
        n: "PtgGt",
        f: parseread1
    },
    /*::[*/ 0x0E: {
        n: "PtgNe",
        f: parseread1
    },
    /*::[*/ 0x0F: {
        n: "PtgIsect",
        f: parseread1
    },
    /*::[*/ 0x10: {
        n: "PtgUnion",
        f: parseread1
    },
    /*::[*/ 0x11: {
        n: "PtgRange",
        f: parseread1
    },
    /*::[*/ 0x12: {
        n: "PtgUplus",
        f: parseread1
    },
    /*::[*/ 0x13: {
        n: "PtgUminus",
        f: parseread1
    },
    /*::[*/ 0x14: {
        n: "PtgPercent",
        f: parseread1
    },
    /*::[*/ 0x15: {
        n: "PtgParen",
        f: parseread1
    },
    /*::[*/ 0x16: {
        n: "PtgMissArg",
        f: parseread1
    },
    /*::[*/ 0x17: {
        n: "PtgStr",
        f: parse_PtgStr
    },
    /*::[*/ 0x1A: {
        n: "PtgSheet",
        f: parse_PtgSheet
    },
    /*::[*/ 0x1B: {
        n: "PtgEndSheet",
        f: parse_PtgEndSheet
    },
    /*::[*/ 0x1C: {
        n: "PtgErr",
        f: parse_PtgErr
    },
    /*::[*/ 0x1D: {
        n: "PtgBool",
        f: parse_PtgBool
    },
    /*::[*/ 0x1E: {
        n: "PtgInt",
        f: parse_PtgInt
    },
    /*::[*/ 0x1F: {
        n: "PtgNum",
        f: parse_PtgNum
    },
    /*::[*/ 0x20: {
        n: "PtgArray",
        f: parse_PtgArray
    },
    /*::[*/ 0x21: {
        n: "PtgFunc",
        f: parse_PtgFunc
    },
    /*::[*/ 0x22: {
        n: "PtgFuncVar",
        f: parse_PtgFuncVar
    },
    /*::[*/ 0x23: {
        n: "PtgName",
        f: parse_PtgName
    },
    /*::[*/ 0x24: {
        n: "PtgRef",
        f: parse_PtgRef
    },
    /*::[*/ 0x25: {
        n: "PtgArea",
        f: parse_PtgArea
    },
    /*::[*/ 0x26: {
        n: "PtgMemArea",
        f: parse_PtgMemArea
    },
    /*::[*/ 0x27: {
        n: "PtgMemErr",
        f: parse_PtgMemErr
    },
    /*::[*/ 0x28: {
        n: "PtgMemNoMem",
        f: parse_PtgMemNoMem
    },
    /*::[*/ 0x29: {
        n: "PtgMemFunc",
        f: parse_PtgMemFunc
    },
    /*::[*/ 0x2A: {
        n: "PtgRefErr",
        f: parse_PtgRefErr
    },
    /*::[*/ 0x2B: {
        n: "PtgAreaErr",
        f: parse_PtgAreaErr
    },
    /*::[*/ 0x2C: {
        n: "PtgRefN",
        f: parse_PtgRefN
    },
    /*::[*/ 0x2D: {
        n: "PtgAreaN",
        f: parse_PtgAreaN
    },
    /*::[*/ 0x2E: {
        n: "PtgMemAreaN",
        f: parse_PtgMemAreaN
    },
    /*::[*/ 0x2F: {
        n: "PtgMemNoMemN",
        f: parse_PtgMemNoMemN
    },
    /*::[*/ 0x39: {
        n: "PtgNameX",
        f: parse_PtgNameX
    },
    /*::[*/ 0x3A: {
        n: "PtgRef3d",
        f: parse_PtgRef3d
    },
    /*::[*/ 0x3B: {
        n: "PtgArea3d",
        f: parse_PtgArea3d
    },
    /*::[*/ 0x3C: {
        n: "PtgRefErr3d",
        f: parse_PtgRefErr3d
    },
    /*::[*/ 0x3D: {
        n: "PtgAreaErr3d",
        f: parse_PtgAreaErr3d
    },
    /*::[*/ 0xFF: {}
};
/* These are duplicated in the PtgTypes table */ var PtgDupes = {
    /*::[*/ 0x40: 0x20,
    /*::[*/ 0x60: 0x20,
    /*::[*/ 0x41: 0x21,
    /*::[*/ 0x61: 0x21,
    /*::[*/ 0x42: 0x22,
    /*::[*/ 0x62: 0x22,
    /*::[*/ 0x43: 0x23,
    /*::[*/ 0x63: 0x23,
    /*::[*/ 0x44: 0x24,
    /*::[*/ 0x64: 0x24,
    /*::[*/ 0x45: 0x25,
    /*::[*/ 0x65: 0x25,
    /*::[*/ 0x46: 0x26,
    /*::[*/ 0x66: 0x26,
    /*::[*/ 0x47: 0x27,
    /*::[*/ 0x67: 0x27,
    /*::[*/ 0x48: 0x28,
    /*::[*/ 0x68: 0x28,
    /*::[*/ 0x49: 0x29,
    /*::[*/ 0x69: 0x29,
    /*::[*/ 0x4A: 0x2A,
    /*::[*/ 0x6A: 0x2A,
    /*::[*/ 0x4B: 0x2B,
    /*::[*/ 0x6B: 0x2B,
    /*::[*/ 0x4C: 0x2C,
    /*::[*/ 0x6C: 0x2C,
    /*::[*/ 0x4D: 0x2D,
    /*::[*/ 0x6D: 0x2D,
    /*::[*/ 0x4E: 0x2E,
    /*::[*/ 0x6E: 0x2E,
    /*::[*/ 0x4F: 0x2F,
    /*::[*/ 0x6F: 0x2F,
    /*::[*/ 0x58: 0x22,
    /*::[*/ 0x78: 0x22,
    /*::[*/ 0x59: 0x39,
    /*::[*/ 0x79: 0x39,
    /*::[*/ 0x5A: 0x3A,
    /*::[*/ 0x7A: 0x3A,
    /*::[*/ 0x5B: 0x3B,
    /*::[*/ 0x7B: 0x3B,
    /*::[*/ 0x5C: 0x3C,
    /*::[*/ 0x7C: 0x3C,
    /*::[*/ 0x5D: 0x3D,
    /*::[*/ 0x7D: 0x3D
};
var Ptg18 = {
    /*::[*/ 0x01: {
        n: "PtgElfLel",
        f: parse_PtgElfLel
    },
    /*::[*/ 0x02: {
        n: "PtgElfRw",
        f: parse_PtgElfRw
    },
    /*::[*/ 0x03: {
        n: "PtgElfCol",
        f: parse_PtgElfCol
    },
    /*::[*/ 0x06: {
        n: "PtgElfRwV",
        f: parse_PtgElfRwV
    },
    /*::[*/ 0x07: {
        n: "PtgElfColV",
        f: parse_PtgElfColV
    },
    /*::[*/ 0x0A: {
        n: "PtgElfRadical",
        f: parse_PtgElfRadical
    },
    /*::[*/ 0x0B: {
        n: "PtgElfRadicalS",
        f: parse_PtgElfRadicalS
    },
    /*::[*/ 0x0D: {
        n: "PtgElfColS",
        f: parse_PtgElfColS
    },
    /*::[*/ 0x0F: {
        n: "PtgElfColSV",
        f: parse_PtgElfColSV
    },
    /*::[*/ 0x10: {
        n: "PtgElfRadicalLel",
        f: parse_PtgElfRadicalLel
    },
    /*::[*/ 0x19: {
        n: "PtgList",
        f: parse_PtgList
    },
    /*::[*/ 0x1D: {
        n: "PtgSxName",
        f: parse_PtgSxName
    },
    /*::[*/ 0xFF: {}
};
var Ptg19 = {
    /*::[*/ 0x00: {
        n: "PtgAttrNoop",
        f: parse_PtgAttrNoop
    },
    /*::[*/ 0x01: {
        n: "PtgAttrSemi",
        f: parse_PtgAttrSemi
    },
    /*::[*/ 0x02: {
        n: "PtgAttrIf",
        f: parse_PtgAttrIf
    },
    /*::[*/ 0x04: {
        n: "PtgAttrChoose",
        f: parse_PtgAttrChoose
    },
    /*::[*/ 0x08: {
        n: "PtgAttrGoto",
        f: parse_PtgAttrGoto
    },
    /*::[*/ 0x10: {
        n: "PtgAttrSum",
        f: parse_PtgAttrSum
    },
    /*::[*/ 0x20: {
        n: "PtgAttrBaxcel",
        f: parse_PtgAttrBaxcel
    },
    /*::[*/ 0x21: {
        n: "PtgAttrBaxcel",
        f: parse_PtgAttrBaxcel
    },
    /*::[*/ 0x40: {
        n: "PtgAttrSpace",
        f: parse_PtgAttrSpace
    },
    /*::[*/ 0x41: {
        n: "PtgAttrSpaceSemi",
        f: parse_PtgAttrSpaceSemi
    },
    /*::[*/ 0x80: {
        n: "PtgAttrIfError",
        f: parse_PtgAttrIfError
    },
    /*::[*/ 0xFF: {}
};
/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */ function parse_RgbExtra(blob, length, rgce, opts) {
    if (opts.biff < 8) return parsenoop(blob, length);
    var target = blob.l + length;
    var o = [];
    for(var i = 0; i !== rgce.length; ++i)switch(rgce[i][0]){
        case "PtgArray":
            /* PtgArray -> PtgExtraArray */ rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
            o.push(rgce[i][1]);
            break;
        case "PtgMemArea":
            /* PtgMemArea -> PtgExtraMem */ rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
            o.push(rgce[i][2]);
            break;
        case "PtgExp":
            /* PtgExp -> PtgExtraCol */ if (opts && opts.biff == 12) {
                rgce[i][1][1] = blob.read_shift(4);
                o.push(rgce[i][1]);
            }
            break;
        case "PtgList":
        /* TODO: PtgList -> PtgExtraList */ case "PtgElfRadicalS":
        /* TODO: PtgElfRadicalS -> PtgExtraElf */ case "PtgElfColS":
        /* TODO: PtgElfColS -> PtgExtraElf */ case "PtgElfColSV":
            /* TODO: PtgElfColSV -> PtgExtraElf */ throw "Unsupported " + rgce[i][0];
        default:
            break;
    }
    length = target - blob.l;
    /* note: this is technically an error but Excel disregards */ //if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
    if (length !== 0) o.push(parsenoop(blob, length));
    return o;
}
/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */ function parse_Rgce(blob, length, opts) {
    var target = blob.l + length;
    var R, id, ptgs = [];
    while(target != blob.l){
        length = target - blob.l;
        id = blob[blob.l];
        R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
        if (id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
        if (!R || !R.f) parsenoop(blob, length);
        else ptgs.push([
            R.n,
            R.f(blob, length, opts)
        ]);
    }
    return ptgs;
}
function stringify_array(f /*:Array<Array<string>>*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < f.length; ++i){
        var x = f[i], r /*:Array<string>*/  = [];
        for(var j = 0; j < x.length; ++j){
            var y = x[j];
            if (y) switch(y[0]){
                // TODO: handle embedded quotes
                case 0x02:
                    /*:: if(typeof y[1] != 'string') throw "unreachable"; */ r.push('"' + y[1].replace(/"/g, '""') + '"');
                    break;
                default:
                    r.push(y[1]);
            }
            else r.push("");
        }
        o.push(r.join(","));
    }
    return o.join(";");
}
/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */ var PtgBinOp = {
    PtgAdd: "+",
    PtgConcat: "&",
    PtgDiv: "/",
    PtgEq: "=",
    PtgGe: ">=",
    PtgGt: ">",
    PtgLe: "<=",
    PtgLt: "<",
    PtgMul: "*",
    PtgNe: "<>",
    PtgPower: "^",
    PtgSub: "-"
};
// List of invalid characters needs to be tested further
function formula_quote_sheet_name(sname /*:string*/ , opts) /*:string*/ {
    if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
    if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
    return sname;
}
function get_ixti_raw(supbooks, ixti /*:number*/ , opts) /*:string*/ {
    if (!supbooks) return "SH33TJSERR0";
    if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
    if (!supbooks.XTI) return "SH33TJSERR6";
    var XTI = supbooks.XTI[ixti];
    if (opts.biff < 8) {
        if (ixti > 10000) ixti -= 65536;
        if (ixti < 0) ixti = -ixti;
        return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    }
    if (!XTI) return "SH33TJSERR1";
    var o = "";
    if (opts.biff > 8) switch(supbooks[XTI[0]][0]){
        case 0x0165:
            /* 'BrtSupSelf' */ o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
        case 0x0166:
            /* 'BrtSupSame' */ if (opts.SID != null) return supbooks.SheetNames[opts.SID];
            return "SH33TJSSAME" + supbooks[XTI[0]][0];
        case 0x0163:
        /* 'BrtSupBookSrc' */ /* falls through */ default:
            return "SH33TJSSRC" + supbooks[XTI[0]][0];
    }
    switch(supbooks[XTI[0]][0][0]){
        case 0x0401:
            o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
        case 0x3A01:
            return supbooks[XTI[0]].slice(1).map(function(name) {
                return name.Name;
            }).join(";;"); //return "SH33TJSERR8";
        default:
            if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
            o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    }
}
function get_ixti(supbooks, ixti /*:number*/ , opts) /*:string*/ {
    var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
    return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
}
function stringify_formula(formula /*Array<any>*/ , range, cell /*:any*/ , supbooks, opts) /*:string*/ {
    var biff = opts && opts.biff || 8;
    var _range = /*range != null ? range :*/ {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: 0,
            r: 0
        }
    };
    var stack /*:Array<string>*/  = [], e1, e2, /*::type,*/ c /*:CellAddress*/ , ixti = 0, nameidx = 0, r, sname = "";
    if (!formula[0] || !formula[0][0]) return "";
    var last_sp = -1, sp = "";
    for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff){
        var f = formula[0][ff];
        switch(f[0]){
            case "PtgUminus":
                /* [MS-XLS] 2.5.198.93 */ stack.push("-" + stack.pop());
                break;
            case "PtgUplus":
                /* [MS-XLS] 2.5.198.95 */ stack.push("+" + stack.pop());
                break;
            case "PtgPercent":
                /* [MS-XLS] 2.5.198.81 */ stack.push(stack.pop() + "%");
                break;
            case "PtgAdd":
            /* [MS-XLS] 2.5.198.26 */ case "PtgConcat":
            /* [MS-XLS] 2.5.198.43 */ case "PtgDiv":
            /* [MS-XLS] 2.5.198.45 */ case "PtgEq":
            /* [MS-XLS] 2.5.198.56 */ case "PtgGe":
            /* [MS-XLS] 2.5.198.64 */ case "PtgGt":
            /* [MS-XLS] 2.5.198.65 */ case "PtgLe":
            /* [MS-XLS] 2.5.198.68 */ case "PtgLt":
            /* [MS-XLS] 2.5.198.69 */ case "PtgMul":
            /* [MS-XLS] 2.5.198.75 */ case "PtgNe":
            /* [MS-XLS] 2.5.198.78 */ case "PtgPower":
            /* [MS-XLS] 2.5.198.82 */ case "PtgSub":
                /* [MS-XLS] 2.5.198.90 */ e1 = stack.pop();
                e2 = stack.pop();
                if (last_sp >= 0) {
                    switch(formula[0][last_sp][1][0]){
                        case 0:
                            // $FlowIgnore
                            sp = fill(" ", formula[0][last_sp][1][1]);
                            break;
                        case 1:
                            // $FlowIgnore
                            sp = fill("\r", formula[0][last_sp][1][1]);
                            break;
                        default:
                            sp = "";
                            // $FlowIgnore
                            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                    }
                    e2 = e2 + sp;
                    last_sp = -1;
                }
                stack.push(e2 + PtgBinOp[f[0]] + e1);
                break;
            case "PtgIsect":
                /* [MS-XLS] 2.5.198.67 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + " " + e1);
                break;
            case "PtgUnion":
                /* [MS-XLS] 2.5.198.94 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + "," + e1);
                break;
            case "PtgRange":
                /* [MS-XLS] 2.5.198.83 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + ":" + e1);
                break;
            case "PtgAttrChoose":
                break;
            case "PtgAttrGoto":
                break;
            case "PtgAttrIf":
                break;
            case "PtgAttrIfError":
                break;
            case "PtgRef":
                /* [MS-XLS] 2.5.198.84 */ /*::type = f[1][0]; */ c = shift_cell_xls(f[1][1], _range, opts);
                stack.push(encode_cell_xls(c, biff));
                break;
            case "PtgRefN":
                /* [MS-XLS] 2.5.198.88 */ /*::type = f[1][0]; */ c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
                stack.push(encode_cell_xls(c, biff));
                break;
            case "PtgRef3d":
                /* [MS-XLS] 2.5.198.85 */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;
                c = shift_cell_xls(f[1][2], _range, opts);
                sname = get_ixti(supbooks, ixti, opts);
                var w = sname; /* IE9 fails on defined names */  // eslint-disable-line no-unused-vars
                stack.push(sname + "!" + encode_cell_xls(c, biff));
                break;
            case "PtgFunc":
            /* [MS-XLS] 2.5.198.62 */ case "PtgFuncVar":
                /* [MS-XLS] 2.5.198.63 */ /* f[1] = [argc, func, type] */ var argc /*:number*/  = f[1][0], func /*:string*/  = f[1][1];
                if (!argc) argc = 0;
                argc &= 0x7F;
                var args = argc == 0 ? [] : stack.slice(-argc);
                stack.length -= argc;
                if (func === "User") func = args.shift();
                stack.push(func + "(" + args.join(",") + ")");
                break;
            case "PtgBool":
                /* [MS-XLS] 2.5.198.42 */ stack.push(f[1] ? "TRUE" : "FALSE");
                break;
            case "PtgInt":
                /* [MS-XLS] 2.5.198.66 */ stack.push(/*::String(*/ f[1]);
                break;
            case "PtgNum":
                /* [MS-XLS] 2.5.198.79 TODO: precision? */ stack.push(String(f[1]));
                break;
            case "PtgStr":
                /* [MS-XLS] 2.5.198.89 */ // $FlowIgnore
                stack.push('"' + f[1].replace(/"/g, '""') + '"');
                break;
            case "PtgErr":
                /* [MS-XLS] 2.5.198.57 */ stack.push(/*::String(*/ f[1]);
                break;
            case "PtgAreaN":
                /* [MS-XLS] 2.5.198.31 TODO */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], cell ? {
                    s: cell
                } : _range, opts);
                stack.push(encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgArea":
                /* [MS-XLS] 2.5.198.27 TODO: fixed points */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], _range, opts);
                stack.push(encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgArea3d":
                /* [MS-XLS] 2.5.198.28 TODO */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;
                r = f[1][2];
                sname = get_ixti(supbooks, ixti, opts);
                stack.push(sname + "!" + encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgAttrSum":
                /* [MS-XLS] 2.5.198.41 */ stack.push("SUM(" + stack.pop() + ")");
                break;
            case "PtgAttrBaxcel":
            /* [MS-XLS] 2.5.198.33 */ case "PtgAttrSemi":
                break;
            case "PtgName":
                /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */ /* f[1] = type, 0, nameindex */ nameidx = f[1][2];
                var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
                var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
                /* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */ if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
                stack.push(name);
                break;
            case "PtgNameX":
                /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */ /* f[1] = type, ixti, nameindex */ var bookidx /*:number*/  = f[1][1];
                nameidx = f[1][2];
                var externbook;
                /* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */ if (opts.biff <= 5) {
                    if (bookidx < 0) bookidx = -bookidx;
                    if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
                } else {
                    var o = "";
                    if (((supbooks[bookidx] || [])[0] || [])[0] == 0x3A01) ;
                    else if (((supbooks[bookidx] || [])[0] || [])[0] == 0x0401) {
                        if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                    } else o = supbooks.SheetNames[nameidx - 1] + "!";
                    if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
                    else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
                    else {
                        var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                        if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
                        else o += "SH33TJSERRX";
                    }
                    stack.push(o);
                    break;
                }
                if (!externbook) externbook = {
                    Name: "SH33TJSERRY"
                };
                stack.push(externbook.Name);
                break;
            case "PtgParen":
                /* [MS-XLS] 2.5.198.80 */ var lp = "(", rp = ")";
                if (last_sp >= 0) {
                    sp = "";
                    switch(formula[0][last_sp][1][0]){
                        // $FlowIgnore
                        case 2:
                            lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                            break;
                        // $FlowIgnore
                        case 3:
                            lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                            break;
                        // $FlowIgnore
                        case 4:
                            rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                            break;
                        // $FlowIgnore
                        case 5:
                            rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                            break;
                        default:
                            // $FlowIgnore
                            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                    }
                    last_sp = -1;
                }
                stack.push(lp + stack.pop() + rp);
                break;
            case "PtgRefErr":
                /* [MS-XLS] 2.5.198.86 */ stack.push("#REF!");
                break;
            case "PtgRefErr3d":
                /* [MS-XLS] 2.5.198.87 */ stack.push("#REF!");
                break;
            case "PtgExp":
                /* [MS-XLS] 2.5.198.58 TODO */ c = {
                    c: f[1][1],
                    r: f[1][0]
                };
                var q = {
                    c: cell.c,
                    r: cell.r
                } /*:any*/ ;
                if (supbooks.sharedf[encode_cell(c)]) {
                    var parsedf = supbooks.sharedf[encode_cell(c)];
                    stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
                } else {
                    var fnd = false;
                    for(e1 = 0; e1 != supbooks.arrayf.length; ++e1){
                        /* TODO: should be something like range_has */ e2 = supbooks.arrayf[e1];
                        if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
                        if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
                        stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                        fnd = true;
                        break;
                    }
                    if (!fnd) stack.push(/*::String(*/ f[1]);
                }
                break;
            case "PtgArray":
                /* [MS-XLS] 2.5.198.32 TODO */ stack.push("{" + stringify_array(/*::(*/ f[1]) + "}");
                break;
            case "PtgMemArea":
                break;
            case "PtgAttrSpace":
            /* [MS-XLS] 2.5.198.38 */ case "PtgAttrSpaceSemi":
                /* [MS-XLS] 2.5.198.39 */ last_sp = ff;
                break;
            case "PtgTbl":
                break;
            case "PtgMemErr":
                break;
            case "PtgMissArg":
                /* [MS-XLS] 2.5.198.74 */ stack.push("");
                break;
            case "PtgAreaErr":
                /* [MS-XLS] 2.5.198.29 */ stack.push("#REF!");
                break;
            case "PtgAreaErr3d":
                /* [MS-XLS] 2.5.198.30 */ stack.push("#REF!");
                break;
            case "PtgList":
                /* [MS-XLSB] 2.5.97.52 */ // $FlowIgnore
                stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
                break;
            case "PtgMemAreaN":
            case "PtgMemNoMemN":
            case "PtgAttrNoop":
            case "PtgSheet":
            case "PtgEndSheet":
                break;
            case "PtgMemFunc":
                break;
            case "PtgMemNoMem":
                break;
            case "PtgElfCol":
            /* [MS-XLS] 2.5.198.46 */ case "PtgElfColS":
            /* [MS-XLS] 2.5.198.47 */ case "PtgElfColSV":
            /* [MS-XLS] 2.5.198.48 */ case "PtgElfColV":
            /* [MS-XLS] 2.5.198.49 */ case "PtgElfLel":
            /* [MS-XLS] 2.5.198.50 */ case "PtgElfRadical":
            /* [MS-XLS] 2.5.198.51 */ case "PtgElfRadicalLel":
            /* [MS-XLS] 2.5.198.52 */ case "PtgElfRadicalS":
            /* [MS-XLS] 2.5.198.53 */ case "PtgElfRw":
            /* [MS-XLS] 2.5.198.54 */ case "PtgElfRwV":
                /* [MS-XLS] 2.5.198.55 */ throw new Error("Unsupported ELFs");
            case "PtgSxName":
                /* [MS-XLS] 2.5.198.91 TODO -- find a test case */ throw new Error("Unrecognized Formula Token: " + String(f));
            default:
                throw new Error("Unrecognized Formula Token: " + String(f));
        }
        var PtgNonDisp = [
            "PtgAttrSpace",
            "PtgAttrSpaceSemi",
            "PtgAttrGoto"
        ];
        if (opts.biff != 3) {
            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
                f = formula[0][last_sp];
                var _left = true;
                switch(f[1][0]){
                    /* note: some bad XLSB files omit the PtgParen */ case 4:
                        _left = false;
                    /* falls through */ case 0:
                        // $FlowIgnore
                        sp = fill(" ", f[1][1]);
                        break;
                    case 5:
                        _left = false;
                    /* falls through */ case 1:
                        // $FlowIgnore
                        sp = fill("\r", f[1][1]);
                        break;
                    default:
                        sp = "";
                        // $FlowIgnore
                        if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
                }
                stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
                last_sp = -1;
            }
        }
    }
    if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
    return stack[0];
}
/* [MS-XLS] 2.5.198.1 TODO */ function parse_ArrayParsedFormula(blob, length, opts /*::, ref*/ ) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len); // length of rgce
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.3 TODO */ function parse_XLSCellParsedFormula(blob, length, opts) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len); // length of rgce
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.21 */ function parse_NameParsedFormula(blob, length, opts, cce) {
    var target = blob.l + length;
    var rgce = parse_Rgce(blob, cce, opts);
    var rgcb;
    if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.118 TODO */ function parse_SharedParsedFormula(blob, length, opts) {
    var target = blob.l + length;
    var rgcb, cce = blob.read_shift(2); // length of rgce
    var rgce = parse_Rgce(blob, cce, opts);
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */ function parse_FormulaValue(blob /*::, length*/ ) {
    var b;
    if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [
        parse_Xnum(blob),
        "n"
    ];
    switch(blob[blob.l]){
        case 0x00:
            blob.l += 8;
            return [
                "String",
                "s"
            ];
        case 0x01:
            b = blob[blob.l + 2] === 0x1;
            blob.l += 8;
            return [
                b,
                "b"
            ];
        case 0x02:
            b = blob[blob.l + 2];
            blob.l += 8;
            return [
                b,
                "e"
            ];
        case 0x03:
            blob.l += 8;
            return [
                "",
                "s"
            ];
    }
    return [];
}
function write_FormulaValue(value) {
    if (value == null) {
        // Blank String Value
        var o = new_buf(8);
        o.write_shift(1, 0x03);
        o.write_shift(1, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0xFFFF);
        return o;
    } else if (typeof value == "number") return write_Xnum(value);
    return write_Xnum(0);
}
/* [MS-XLS] 2.4.127 TODO */ function parse_Formula(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) ++blob.l;
    var val = parse_FormulaValue(blob, 8);
    var flags = blob.read_shift(1);
    if (opts.biff != 2) {
        blob.read_shift(1);
        if (opts.biff >= 5) /*var chn = */ blob.read_shift(4);
    }
    var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    return {
        cell: cell,
        val: val[0],
        formula: cbf,
        shared: flags >> 3 & 1,
        tt: val[1]
    };
}
function write_Formula(cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, os /*:number*/ ) {
    // Cell
    var o1 = write_XLSCell(R, C, os);
    // FormulaValue
    var o2 = write_FormulaValue(cell.v);
    // flags + cache
    var o3 = new_buf(6);
    var flags = 33;
    o3.write_shift(2, flags);
    o3.write_shift(4, 0);
    // CellParsedFormula
    var bf = new_buf(cell.bf.length);
    for(var i = 0; i < cell.bf.length; ++i)bf[i] = cell.bf[i];
    var out = bconcat([
        o1,
        o2,
        o3,
        bf
    ]);
    return out;
}
/* XLSB Parsed Formula records have the same shape */ function parse_XLSBParsedFormula(data, length, opts) {
    var cce = data.read_shift(4);
    var rgce = parse_Rgce(data, cce, opts);
    var cb = data.read_shift(4);
    var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */ var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.4 CellParsedFormula */ var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.8 DVParsedFormula */ //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */ //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;
/* [MS-XLSB] 2.5.97.12 NameParsedFormula */ var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */ var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
var Cetab = {
    0: "BEEP",
    1: "OPEN",
    2: "OPEN.LINKS",
    3: "CLOSE.ALL",
    4: "SAVE",
    5: "SAVE.AS",
    6: "FILE.DELETE",
    7: "PAGE.SETUP",
    8: "PRINT",
    9: "PRINTER.SETUP",
    10: "QUIT",
    11: "NEW.WINDOW",
    12: "ARRANGE.ALL",
    13: "WINDOW.SIZE",
    14: "WINDOW.MOVE",
    15: "FULL",
    16: "CLOSE",
    17: "RUN",
    22: "SET.PRINT.AREA",
    23: "SET.PRINT.TITLES",
    24: "SET.PAGE.BREAK",
    25: "REMOVE.PAGE.BREAK",
    26: "FONT",
    27: "DISPLAY",
    28: "PROTECT.DOCUMENT",
    29: "PRECISION",
    30: "A1.R1C1",
    31: "CALCULATE.NOW",
    32: "CALCULATION",
    34: "DATA.FIND",
    35: "EXTRACT",
    36: "DATA.DELETE",
    37: "SET.DATABASE",
    38: "SET.CRITERIA",
    39: "SORT",
    40: "DATA.SERIES",
    41: "TABLE",
    42: "FORMAT.NUMBER",
    43: "ALIGNMENT",
    44: "STYLE",
    45: "BORDER",
    46: "CELL.PROTECTION",
    47: "COLUMN.WIDTH",
    48: "UNDO",
    49: "CUT",
    50: "COPY",
    51: "PASTE",
    52: "CLEAR",
    53: "PASTE.SPECIAL",
    54: "EDIT.DELETE",
    55: "INSERT",
    56: "FILL.RIGHT",
    57: "FILL.DOWN",
    61: "DEFINE.NAME",
    62: "CREATE.NAMES",
    63: "FORMULA.GOTO",
    64: "FORMULA.FIND",
    65: "SELECT.LAST.CELL",
    66: "SHOW.ACTIVE.CELL",
    67: "GALLERY.AREA",
    68: "GALLERY.BAR",
    69: "GALLERY.COLUMN",
    70: "GALLERY.LINE",
    71: "GALLERY.PIE",
    72: "GALLERY.SCATTER",
    73: "COMBINATION",
    74: "PREFERRED",
    75: "ADD.OVERLAY",
    76: "GRIDLINES",
    77: "SET.PREFERRED",
    78: "AXES",
    79: "LEGEND",
    80: "ATTACH.TEXT",
    81: "ADD.ARROW",
    82: "SELECT.CHART",
    83: "SELECT.PLOT.AREA",
    84: "PATTERNS",
    85: "MAIN.CHART",
    86: "OVERLAY",
    87: "SCALE",
    88: "FORMAT.LEGEND",
    89: "FORMAT.TEXT",
    90: "EDIT.REPEAT",
    91: "PARSE",
    92: "JUSTIFY",
    93: "HIDE",
    94: "UNHIDE",
    95: "WORKSPACE",
    96: "FORMULA",
    97: "FORMULA.FILL",
    98: "FORMULA.ARRAY",
    99: "DATA.FIND.NEXT",
    100: "DATA.FIND.PREV",
    101: "FORMULA.FIND.NEXT",
    102: "FORMULA.FIND.PREV",
    103: "ACTIVATE",
    104: "ACTIVATE.NEXT",
    105: "ACTIVATE.PREV",
    106: "UNLOCKED.NEXT",
    107: "UNLOCKED.PREV",
    108: "COPY.PICTURE",
    109: "SELECT",
    110: "DELETE.NAME",
    111: "DELETE.FORMAT",
    112: "VLINE",
    113: "HLINE",
    114: "VPAGE",
    115: "HPAGE",
    116: "VSCROLL",
    117: "HSCROLL",
    118: "ALERT",
    119: "NEW",
    120: "CANCEL.COPY",
    121: "SHOW.CLIPBOARD",
    122: "MESSAGE",
    124: "PASTE.LINK",
    125: "APP.ACTIVATE",
    126: "DELETE.ARROW",
    127: "ROW.HEIGHT",
    128: "FORMAT.MOVE",
    129: "FORMAT.SIZE",
    130: "FORMULA.REPLACE",
    131: "SEND.KEYS",
    132: "SELECT.SPECIAL",
    133: "APPLY.NAMES",
    134: "REPLACE.FONT",
    135: "FREEZE.PANES",
    136: "SHOW.INFO",
    137: "SPLIT",
    138: "ON.WINDOW",
    139: "ON.DATA",
    140: "DISABLE.INPUT",
    142: "OUTLINE",
    143: "LIST.NAMES",
    144: "FILE.CLOSE",
    145: "SAVE.WORKBOOK",
    146: "DATA.FORM",
    147: "COPY.CHART",
    148: "ON.TIME",
    149: "WAIT",
    150: "FORMAT.FONT",
    151: "FILL.UP",
    152: "FILL.LEFT",
    153: "DELETE.OVERLAY",
    155: "SHORT.MENUS",
    159: "SET.UPDATE.STATUS",
    161: "COLOR.PALETTE",
    162: "DELETE.STYLE",
    163: "WINDOW.RESTORE",
    164: "WINDOW.MAXIMIZE",
    166: "CHANGE.LINK",
    167: "CALCULATE.DOCUMENT",
    168: "ON.KEY",
    169: "APP.RESTORE",
    170: "APP.MOVE",
    171: "APP.SIZE",
    172: "APP.MINIMIZE",
    173: "APP.MAXIMIZE",
    174: "BRING.TO.FRONT",
    175: "SEND.TO.BACK",
    185: "MAIN.CHART.TYPE",
    186: "OVERLAY.CHART.TYPE",
    187: "SELECT.END",
    188: "OPEN.MAIL",
    189: "SEND.MAIL",
    190: "STANDARD.FONT",
    191: "CONSOLIDATE",
    192: "SORT.SPECIAL",
    193: "GALLERY.3D.AREA",
    194: "GALLERY.3D.COLUMN",
    195: "GALLERY.3D.LINE",
    196: "GALLERY.3D.PIE",
    197: "VIEW.3D",
    198: "GOAL.SEEK",
    199: "WORKGROUP",
    200: "FILL.GROUP",
    201: "UPDATE.LINK",
    202: "PROMOTE",
    203: "DEMOTE",
    204: "SHOW.DETAIL",
    206: "UNGROUP",
    207: "OBJECT.PROPERTIES",
    208: "SAVE.NEW.OBJECT",
    209: "SHARE",
    210: "SHARE.NAME",
    211: "DUPLICATE",
    212: "APPLY.STYLE",
    213: "ASSIGN.TO.OBJECT",
    214: "OBJECT.PROTECTION",
    215: "HIDE.OBJECT",
    216: "SET.EXTRACT",
    217: "CREATE.PUBLISHER",
    218: "SUBSCRIBE.TO",
    219: "ATTRIBUTES",
    220: "SHOW.TOOLBAR",
    222: "PRINT.PREVIEW",
    223: "EDIT.COLOR",
    224: "SHOW.LEVELS",
    225: "FORMAT.MAIN",
    226: "FORMAT.OVERLAY",
    227: "ON.RECALC",
    228: "EDIT.SERIES",
    229: "DEFINE.STYLE",
    240: "LINE.PRINT",
    243: "ENTER.DATA",
    249: "GALLERY.RADAR",
    250: "MERGE.STYLES",
    251: "EDITION.OPTIONS",
    252: "PASTE.PICTURE",
    253: "PASTE.PICTURE.LINK",
    254: "SPELLING",
    256: "ZOOM",
    259: "INSERT.OBJECT",
    260: "WINDOW.MINIMIZE",
    265: "SOUND.NOTE",
    266: "SOUND.PLAY",
    267: "FORMAT.SHAPE",
    268: "EXTEND.POLYGON",
    269: "FORMAT.AUTO",
    272: "GALLERY.3D.BAR",
    273: "GALLERY.3D.SURFACE",
    274: "FILL.AUTO",
    276: "CUSTOMIZE.TOOLBAR",
    277: "ADD.TOOL",
    278: "EDIT.OBJECT",
    279: "ON.DOUBLECLICK",
    280: "ON.ENTRY",
    281: "WORKBOOK.ADD",
    282: "WORKBOOK.MOVE",
    283: "WORKBOOK.COPY",
    284: "WORKBOOK.OPTIONS",
    285: "SAVE.WORKSPACE",
    288: "CHART.WIZARD",
    289: "DELETE.TOOL",
    290: "MOVE.TOOL",
    291: "WORKBOOK.SELECT",
    292: "WORKBOOK.ACTIVATE",
    293: "ASSIGN.TO.TOOL",
    295: "COPY.TOOL",
    296: "RESET.TOOL",
    297: "CONSTRAIN.NUMERIC",
    298: "PASTE.TOOL",
    302: "WORKBOOK.NEW",
    305: "SCENARIO.CELLS",
    306: "SCENARIO.DELETE",
    307: "SCENARIO.ADD",
    308: "SCENARIO.EDIT",
    309: "SCENARIO.SHOW",
    310: "SCENARIO.SHOW.NEXT",
    311: "SCENARIO.SUMMARY",
    312: "PIVOT.TABLE.WIZARD",
    313: "PIVOT.FIELD.PROPERTIES",
    314: "PIVOT.FIELD",
    315: "PIVOT.ITEM",
    316: "PIVOT.ADD.FIELDS",
    318: "OPTIONS.CALCULATION",
    319: "OPTIONS.EDIT",
    320: "OPTIONS.VIEW",
    321: "ADDIN.MANAGER",
    322: "MENU.EDITOR",
    323: "ATTACH.TOOLBARS",
    324: "VBAActivate",
    325: "OPTIONS.CHART",
    328: "VBA.INSERT.FILE",
    330: "VBA.PROCEDURE.DEFINITION",
    336: "ROUTING.SLIP",
    338: "ROUTE.DOCUMENT",
    339: "MAIL.LOGON",
    342: "INSERT.PICTURE",
    343: "EDIT.TOOL",
    344: "GALLERY.DOUGHNUT",
    350: "CHART.TREND",
    352: "PIVOT.ITEM.PROPERTIES",
    354: "WORKBOOK.INSERT",
    355: "OPTIONS.TRANSITION",
    356: "OPTIONS.GENERAL",
    370: "FILTER.ADVANCED",
    373: "MAIL.ADD.MAILER",
    374: "MAIL.DELETE.MAILER",
    375: "MAIL.REPLY",
    376: "MAIL.REPLY.ALL",
    377: "MAIL.FORWARD",
    378: "MAIL.NEXT.LETTER",
    379: "DATA.LABEL",
    380: "INSERT.TITLE",
    381: "FONT.PROPERTIES",
    382: "MACRO.OPTIONS",
    383: "WORKBOOK.HIDE",
    384: "WORKBOOK.UNHIDE",
    385: "WORKBOOK.DELETE",
    386: "WORKBOOK.NAME",
    388: "GALLERY.CUSTOM",
    390: "ADD.CHART.AUTOFORMAT",
    391: "DELETE.CHART.AUTOFORMAT",
    392: "CHART.ADD.DATA",
    393: "AUTO.OUTLINE",
    394: "TAB.ORDER",
    395: "SHOW.DIALOG",
    396: "SELECT.ALL",
    397: "UNGROUP.SHEETS",
    398: "SUBTOTAL.CREATE",
    399: "SUBTOTAL.REMOVE",
    400: "RENAME.OBJECT",
    412: "WORKBOOK.SCROLL",
    413: "WORKBOOK.NEXT",
    414: "WORKBOOK.PREV",
    415: "WORKBOOK.TAB.SPLIT",
    416: "FULL.SCREEN",
    417: "WORKBOOK.PROTECT",
    420: "SCROLLBAR.PROPERTIES",
    421: "PIVOT.SHOW.PAGES",
    422: "TEXT.TO.COLUMNS",
    423: "FORMAT.CHARTTYPE",
    424: "LINK.FORMAT",
    425: "TRACER.DISPLAY",
    430: "TRACER.NAVIGATE",
    431: "TRACER.CLEAR",
    432: "TRACER.ERROR",
    433: "PIVOT.FIELD.GROUP",
    434: "PIVOT.FIELD.UNGROUP",
    435: "CHECKBOX.PROPERTIES",
    436: "LABEL.PROPERTIES",
    437: "LISTBOX.PROPERTIES",
    438: "EDITBOX.PROPERTIES",
    439: "PIVOT.REFRESH",
    440: "LINK.COMBO",
    441: "OPEN.TEXT",
    442: "HIDE.DIALOG",
    443: "SET.DIALOG.FOCUS",
    444: "ENABLE.OBJECT",
    445: "PUSHBUTTON.PROPERTIES",
    446: "SET.DIALOG.DEFAULT",
    447: "FILTER",
    448: "FILTER.SHOW.ALL",
    449: "CLEAR.OUTLINE",
    450: "FUNCTION.WIZARD",
    451: "ADD.LIST.ITEM",
    452: "SET.LIST.ITEM",
    453: "REMOVE.LIST.ITEM",
    454: "SELECT.LIST.ITEM",
    455: "SET.CONTROL.VALUE",
    456: "SAVE.COPY.AS",
    458: "OPTIONS.LISTS.ADD",
    459: "OPTIONS.LISTS.DELETE",
    460: "SERIES.AXES",
    461: "SERIES.X",
    462: "SERIES.Y",
    463: "ERRORBAR.X",
    464: "ERRORBAR.Y",
    465: "FORMAT.CHART",
    466: "SERIES.ORDER",
    467: "MAIL.LOGOFF",
    468: "CLEAR.ROUTING.SLIP",
    469: "APP.ACTIVATE.MICROSOFT",
    470: "MAIL.EDIT.MAILER",
    471: "ON.SHEET",
    472: "STANDARD.WIDTH",
    473: "SCENARIO.MERGE",
    474: "SUMMARY.INFO",
    475: "FIND.FILE",
    476: "ACTIVE.CELL.FONT",
    477: "ENABLE.TIPWIZARD",
    478: "VBA.MAKE.ADDIN",
    480: "INSERTDATATABLE",
    481: "WORKGROUP.OPTIONS",
    482: "MAIL.SEND.MAILER",
    485: "AUTOCORRECT",
    489: "POST.DOCUMENT",
    491: "PICKLIST",
    493: "VIEW.SHOW",
    494: "VIEW.DEFINE",
    495: "VIEW.DELETE",
    509: "SHEET.BACKGROUND",
    510: "INSERT.MAP.OBJECT",
    511: "OPTIONS.MENONO",
    517: "MSOCHECKS",
    518: "NORMAL",
    519: "LAYOUT",
    520: "RM.PRINT.AREA",
    521: "CLEAR.PRINT.AREA",
    522: "ADD.PRINT.AREA",
    523: "MOVE.BRK",
    545: "HIDECURR.NOTE",
    546: "HIDEALL.NOTES",
    547: "DELETE.NOTE",
    548: "TRAVERSE.NOTES",
    549: "ACTIVATE.NOTES",
    620: "PROTECT.REVISIONS",
    621: "UNPROTECT.REVISIONS",
    647: "OPTIONS.ME",
    653: "WEB.PUBLISH",
    667: "NEWWEBQUERY",
    673: "PIVOT.TABLE.CHART",
    753: "OPTIONS.SAVE",
    755: "OPTIONS.SPELL",
    808: "HIDEALL.INKANNOTS"
};
var Ftab = {
    0: "COUNT",
    1: "IF",
    2: "ISNA",
    3: "ISERROR",
    4: "SUM",
    5: "AVERAGE",
    6: "MIN",
    7: "MAX",
    8: "ROW",
    9: "COLUMN",
    10: "NA",
    11: "NPV",
    12: "STDEV",
    13: "DOLLAR",
    14: "FIXED",
    15: "SIN",
    16: "COS",
    17: "TAN",
    18: "ATAN",
    19: "PI",
    20: "SQRT",
    21: "EXP",
    22: "LN",
    23: "LOG10",
    24: "ABS",
    25: "INT",
    26: "SIGN",
    27: "ROUND",
    28: "LOOKUP",
    29: "INDEX",
    30: "REPT",
    31: "MID",
    32: "LEN",
    33: "VALUE",
    34: "TRUE",
    35: "FALSE",
    36: "AND",
    37: "OR",
    38: "NOT",
    39: "MOD",
    40: "DCOUNT",
    41: "DSUM",
    42: "DAVERAGE",
    43: "DMIN",
    44: "DMAX",
    45: "DSTDEV",
    46: "VAR",
    47: "DVAR",
    48: "TEXT",
    49: "LINEST",
    50: "TREND",
    51: "LOGEST",
    52: "GROWTH",
    53: "GOTO",
    54: "HALT",
    55: "RETURN",
    56: "PV",
    57: "FV",
    58: "NPER",
    59: "PMT",
    60: "RATE",
    61: "MIRR",
    62: "IRR",
    63: "RAND",
    64: "MATCH",
    65: "DATE",
    66: "TIME",
    67: "DAY",
    68: "MONTH",
    69: "YEAR",
    70: "WEEKDAY",
    71: "HOUR",
    72: "MINUTE",
    73: "SECOND",
    74: "NOW",
    75: "AREAS",
    76: "ROWS",
    77: "COLUMNS",
    78: "OFFSET",
    79: "ABSREF",
    80: "RELREF",
    81: "ARGUMENT",
    82: "SEARCH",
    83: "TRANSPOSE",
    84: "ERROR",
    85: "STEP",
    86: "TYPE",
    87: "ECHO",
    88: "SET.NAME",
    89: "CALLER",
    90: "DEREF",
    91: "WINDOWS",
    92: "SERIES",
    93: "DOCUMENTS",
    94: "ACTIVE.CELL",
    95: "SELECTION",
    96: "RESULT",
    97: "ATAN2",
    98: "ASIN",
    99: "ACOS",
    100: "CHOOSE",
    101: "HLOOKUP",
    102: "VLOOKUP",
    103: "LINKS",
    104: "INPUT",
    105: "ISREF",
    106: "GET.FORMULA",
    107: "GET.NAME",
    108: "SET.VALUE",
    109: "LOG",
    110: "EXEC",
    111: "CHAR",
    112: "LOWER",
    113: "UPPER",
    114: "PROPER",
    115: "LEFT",
    116: "RIGHT",
    117: "EXACT",
    118: "TRIM",
    119: "REPLACE",
    120: "SUBSTITUTE",
    121: "CODE",
    122: "NAMES",
    123: "DIRECTORY",
    124: "FIND",
    125: "CELL",
    126: "ISERR",
    127: "ISTEXT",
    128: "ISNUMBER",
    129: "ISBLANK",
    130: "T",
    131: "N",
    132: "FOPEN",
    133: "FCLOSE",
    134: "FSIZE",
    135: "FREADLN",
    136: "FREAD",
    137: "FWRITELN",
    138: "FWRITE",
    139: "FPOS",
    140: "DATEVALUE",
    141: "TIMEVALUE",
    142: "SLN",
    143: "SYD",
    144: "DDB",
    145: "GET.DEF",
    146: "REFTEXT",
    147: "TEXTREF",
    148: "INDIRECT",
    149: "REGISTER",
    150: "CALL",
    151: "ADD.BAR",
    152: "ADD.MENU",
    153: "ADD.COMMAND",
    154: "ENABLE.COMMAND",
    155: "CHECK.COMMAND",
    156: "RENAME.COMMAND",
    157: "SHOW.BAR",
    158: "DELETE.MENU",
    159: "DELETE.COMMAND",
    160: "GET.CHART.ITEM",
    161: "DIALOG.BOX",
    162: "CLEAN",
    163: "MDETERM",
    164: "MINVERSE",
    165: "MMULT",
    166: "FILES",
    167: "IPMT",
    168: "PPMT",
    169: "COUNTA",
    170: "CANCEL.KEY",
    171: "FOR",
    172: "WHILE",
    173: "BREAK",
    174: "NEXT",
    175: "INITIATE",
    176: "REQUEST",
    177: "POKE",
    178: "EXECUTE",
    179: "TERMINATE",
    180: "RESTART",
    181: "HELP",
    182: "GET.BAR",
    183: "PRODUCT",
    184: "FACT",
    185: "GET.CELL",
    186: "GET.WORKSPACE",
    187: "GET.WINDOW",
    188: "GET.DOCUMENT",
    189: "DPRODUCT",
    190: "ISNONTEXT",
    191: "GET.NOTE",
    192: "NOTE",
    193: "STDEVP",
    194: "VARP",
    195: "DSTDEVP",
    196: "DVARP",
    197: "TRUNC",
    198: "ISLOGICAL",
    199: "DCOUNTA",
    200: "DELETE.BAR",
    201: "UNREGISTER",
    204: "USDOLLAR",
    205: "FINDB",
    206: "SEARCHB",
    207: "REPLACEB",
    208: "LEFTB",
    209: "RIGHTB",
    210: "MIDB",
    211: "LENB",
    212: "ROUNDUP",
    213: "ROUNDDOWN",
    214: "ASC",
    215: "DBCS",
    216: "RANK",
    219: "ADDRESS",
    220: "DAYS360",
    221: "TODAY",
    222: "VDB",
    223: "ELSE",
    224: "ELSE.IF",
    225: "END.IF",
    226: "FOR.CELL",
    227: "MEDIAN",
    228: "SUMPRODUCT",
    229: "SINH",
    230: "COSH",
    231: "TANH",
    232: "ASINH",
    233: "ACOSH",
    234: "ATANH",
    235: "DGET",
    236: "CREATE.OBJECT",
    237: "VOLATILE",
    238: "LAST.ERROR",
    239: "CUSTOM.UNDO",
    240: "CUSTOM.REPEAT",
    241: "FORMULA.CONVERT",
    242: "GET.LINK.INFO",
    243: "TEXT.BOX",
    244: "INFO",
    245: "GROUP",
    246: "GET.OBJECT",
    247: "DB",
    248: "PAUSE",
    251: "RESUME",
    252: "FREQUENCY",
    253: "ADD.TOOLBAR",
    254: "DELETE.TOOLBAR",
    255: "User",
    256: "RESET.TOOLBAR",
    257: "EVALUATE",
    258: "GET.TOOLBAR",
    259: "GET.TOOL",
    260: "SPELLING.CHECK",
    261: "ERROR.TYPE",
    262: "APP.TITLE",
    263: "WINDOW.TITLE",
    264: "SAVE.TOOLBAR",
    265: "ENABLE.TOOL",
    266: "PRESS.TOOL",
    267: "REGISTER.ID",
    268: "GET.WORKBOOK",
    269: "AVEDEV",
    270: "BETADIST",
    271: "GAMMALN",
    272: "BETAINV",
    273: "BINOMDIST",
    274: "CHIDIST",
    275: "CHIINV",
    276: "COMBIN",
    277: "CONFIDENCE",
    278: "CRITBINOM",
    279: "EVEN",
    280: "EXPONDIST",
    281: "FDIST",
    282: "FINV",
    283: "FISHER",
    284: "FISHERINV",
    285: "FLOOR",
    286: "GAMMADIST",
    287: "GAMMAINV",
    288: "CEILING",
    289: "HYPGEOMDIST",
    290: "LOGNORMDIST",
    291: "LOGINV",
    292: "NEGBINOMDIST",
    293: "NORMDIST",
    294: "NORMSDIST",
    295: "NORMINV",
    296: "NORMSINV",
    297: "STANDARDIZE",
    298: "ODD",
    299: "PERMUT",
    300: "POISSON",
    301: "TDIST",
    302: "WEIBULL",
    303: "SUMXMY2",
    304: "SUMX2MY2",
    305: "SUMX2PY2",
    306: "CHITEST",
    307: "CORREL",
    308: "COVAR",
    309: "FORECAST",
    310: "FTEST",
    311: "INTERCEPT",
    312: "PEARSON",
    313: "RSQ",
    314: "STEYX",
    315: "SLOPE",
    316: "TTEST",
    317: "PROB",
    318: "DEVSQ",
    319: "GEOMEAN",
    320: "HARMEAN",
    321: "SUMSQ",
    322: "KURT",
    323: "SKEW",
    324: "ZTEST",
    325: "LARGE",
    326: "SMALL",
    327: "QUARTILE",
    328: "PERCENTILE",
    329: "PERCENTRANK",
    330: "MODE",
    331: "TRIMMEAN",
    332: "TINV",
    334: "MOVIE.COMMAND",
    335: "GET.MOVIE",
    336: "CONCATENATE",
    337: "POWER",
    338: "PIVOT.ADD.DATA",
    339: "GET.PIVOT.TABLE",
    340: "GET.PIVOT.FIELD",
    341: "GET.PIVOT.ITEM",
    342: "RADIANS",
    343: "DEGREES",
    344: "SUBTOTAL",
    345: "SUMIF",
    346: "COUNTIF",
    347: "COUNTBLANK",
    348: "SCENARIO.GET",
    349: "OPTIONS.LISTS.GET",
    350: "ISPMT",
    351: "DATEDIF",
    352: "DATESTRING",
    353: "NUMBERSTRING",
    354: "ROMAN",
    355: "OPEN.DIALOG",
    356: "SAVE.DIALOG",
    357: "VIEW.GET",
    358: "GETPIVOTDATA",
    359: "HYPERLINK",
    360: "PHONETIC",
    361: "AVERAGEA",
    362: "MAXA",
    363: "MINA",
    364: "STDEVPA",
    365: "VARPA",
    366: "STDEVA",
    367: "VARA",
    368: "BAHTTEXT",
    369: "THAIDAYOFWEEK",
    370: "THAIDIGIT",
    371: "THAIMONTHOFYEAR",
    372: "THAINUMSOUND",
    373: "THAINUMSTRING",
    374: "THAISTRINGLENGTH",
    375: "ISTHAIDIGIT",
    376: "ROUNDBAHTDOWN",
    377: "ROUNDBAHTUP",
    378: "THAIYEAR",
    379: "RTD",
    380: "CUBEVALUE",
    381: "CUBEMEMBER",
    382: "CUBEMEMBERPROPERTY",
    383: "CUBERANKEDMEMBER",
    384: "HEX2BIN",
    385: "HEX2DEC",
    386: "HEX2OCT",
    387: "DEC2BIN",
    388: "DEC2HEX",
    389: "DEC2OCT",
    390: "OCT2BIN",
    391: "OCT2HEX",
    392: "OCT2DEC",
    393: "BIN2DEC",
    394: "BIN2OCT",
    395: "BIN2HEX",
    396: "IMSUB",
    397: "IMDIV",
    398: "IMPOWER",
    399: "IMABS",
    400: "IMSQRT",
    401: "IMLN",
    402: "IMLOG2",
    403: "IMLOG10",
    404: "IMSIN",
    405: "IMCOS",
    406: "IMEXP",
    407: "IMARGUMENT",
    408: "IMCONJUGATE",
    409: "IMAGINARY",
    410: "IMREAL",
    411: "COMPLEX",
    412: "IMSUM",
    413: "IMPRODUCT",
    414: "SERIESSUM",
    415: "FACTDOUBLE",
    416: "SQRTPI",
    417: "QUOTIENT",
    418: "DELTA",
    419: "GESTEP",
    420: "ISEVEN",
    421: "ISODD",
    422: "MROUND",
    423: "ERF",
    424: "ERFC",
    425: "BESSELJ",
    426: "BESSELK",
    427: "BESSELY",
    428: "BESSELI",
    429: "XIRR",
    430: "XNPV",
    431: "PRICEMAT",
    432: "YIELDMAT",
    433: "INTRATE",
    434: "RECEIVED",
    435: "DISC",
    436: "PRICEDISC",
    437: "YIELDDISC",
    438: "TBILLEQ",
    439: "TBILLPRICE",
    440: "TBILLYIELD",
    441: "PRICE",
    442: "YIELD",
    443: "DOLLARDE",
    444: "DOLLARFR",
    445: "NOMINAL",
    446: "EFFECT",
    447: "CUMPRINC",
    448: "CUMIPMT",
    449: "EDATE",
    450: "EOMONTH",
    451: "YEARFRAC",
    452: "COUPDAYBS",
    453: "COUPDAYS",
    454: "COUPDAYSNC",
    455: "COUPNCD",
    456: "COUPNUM",
    457: "COUPPCD",
    458: "DURATION",
    459: "MDURATION",
    460: "ODDLPRICE",
    461: "ODDLYIELD",
    462: "ODDFPRICE",
    463: "ODDFYIELD",
    464: "RANDBETWEEN",
    465: "WEEKNUM",
    466: "AMORDEGRC",
    467: "AMORLINC",
    468: "CONVERT",
    724: "SHEETJS",
    469: "ACCRINT",
    470: "ACCRINTM",
    471: "WORKDAY",
    472: "NETWORKDAYS",
    473: "GCD",
    474: "MULTINOMIAL",
    475: "LCM",
    476: "FVSCHEDULE",
    477: "CUBEKPIMEMBER",
    478: "CUBESET",
    479: "CUBESETCOUNT",
    480: "IFERROR",
    481: "COUNTIFS",
    482: "SUMIFS",
    483: "AVERAGEIF",
    484: "AVERAGEIFS"
};
var FtabArgc = {
    2: 1,
    3: 1,
    10: 0,
    15: 1,
    16: 1,
    17: 1,
    18: 1,
    19: 0,
    20: 1,
    21: 1,
    22: 1,
    23: 1,
    24: 1,
    25: 1,
    26: 1,
    27: 2,
    30: 2,
    31: 3,
    32: 1,
    33: 1,
    34: 0,
    35: 0,
    38: 1,
    39: 2,
    40: 3,
    41: 3,
    42: 3,
    43: 3,
    44: 3,
    45: 3,
    47: 3,
    48: 2,
    53: 1,
    61: 3,
    63: 0,
    65: 3,
    66: 3,
    67: 1,
    68: 1,
    69: 1,
    70: 1,
    71: 1,
    72: 1,
    73: 1,
    74: 0,
    75: 1,
    76: 1,
    77: 1,
    79: 2,
    80: 2,
    83: 1,
    85: 0,
    86: 1,
    89: 0,
    90: 1,
    94: 0,
    95: 0,
    97: 2,
    98: 1,
    99: 1,
    101: 3,
    102: 3,
    105: 1,
    106: 1,
    108: 2,
    111: 1,
    112: 1,
    113: 1,
    114: 1,
    117: 2,
    118: 1,
    119: 4,
    121: 1,
    126: 1,
    127: 1,
    128: 1,
    129: 1,
    130: 1,
    131: 1,
    133: 1,
    134: 1,
    135: 1,
    136: 2,
    137: 2,
    138: 2,
    140: 1,
    141: 1,
    142: 3,
    143: 4,
    144: 4,
    161: 1,
    162: 1,
    163: 1,
    164: 1,
    165: 2,
    172: 1,
    175: 2,
    176: 2,
    177: 3,
    178: 2,
    179: 1,
    184: 1,
    186: 1,
    189: 3,
    190: 1,
    195: 3,
    196: 3,
    197: 1,
    198: 1,
    199: 3,
    201: 1,
    207: 4,
    210: 3,
    211: 1,
    212: 2,
    213: 2,
    214: 1,
    215: 1,
    225: 0,
    229: 1,
    230: 1,
    231: 1,
    232: 1,
    233: 1,
    234: 1,
    235: 3,
    244: 1,
    247: 4,
    252: 2,
    257: 1,
    261: 1,
    271: 1,
    273: 4,
    274: 2,
    275: 2,
    276: 2,
    277: 3,
    278: 3,
    279: 1,
    280: 3,
    281: 3,
    282: 3,
    283: 1,
    284: 1,
    285: 2,
    286: 4,
    287: 3,
    288: 2,
    289: 4,
    290: 3,
    291: 3,
    292: 3,
    293: 4,
    294: 1,
    295: 3,
    296: 1,
    297: 3,
    298: 1,
    299: 2,
    300: 3,
    301: 3,
    302: 4,
    303: 2,
    304: 2,
    305: 2,
    306: 2,
    307: 2,
    308: 2,
    309: 3,
    310: 2,
    311: 2,
    312: 2,
    313: 2,
    314: 2,
    315: 2,
    316: 4,
    325: 2,
    326: 2,
    327: 2,
    328: 2,
    331: 2,
    332: 2,
    337: 2,
    342: 1,
    343: 1,
    346: 2,
    347: 1,
    350: 4,
    351: 3,
    352: 1,
    353: 2,
    360: 1,
    368: 1,
    369: 1,
    370: 1,
    371: 1,
    372: 1,
    373: 1,
    374: 1,
    375: 1,
    376: 1,
    377: 1,
    378: 1,
    382: 3,
    385: 1,
    392: 1,
    393: 1,
    396: 2,
    397: 2,
    398: 2,
    399: 1,
    400: 1,
    401: 1,
    402: 1,
    403: 1,
    404: 1,
    405: 1,
    406: 1,
    407: 1,
    408: 1,
    409: 1,
    410: 1,
    414: 4,
    415: 1,
    416: 1,
    417: 2,
    420: 1,
    421: 1,
    422: 2,
    424: 1,
    425: 2,
    426: 2,
    427: 2,
    428: 2,
    430: 3,
    438: 3,
    439: 3,
    440: 3,
    443: 2,
    444: 2,
    445: 2,
    446: 2,
    447: 6,
    448: 6,
    449: 2,
    450: 2,
    464: 2,
    468: 3,
    476: 2,
    479: 1,
    480: 2,
    65535: 0
};
/* Part 3 TODO: actually parse formulae */ function ods_to_csf_formula(f /*:string*/ ) /*:string*/ {
    if (f.slice(0, 3) == "of:") f = f.slice(3);
    /* 5.2 Basic Expressions */ if (f.charCodeAt(0) == 61) {
        f = f.slice(1);
        if (f.charCodeAt(0) == 61) f = f.slice(1);
    }
    f = f.replace(/COM\.MICROSOFT\./g, "");
    /* Part 3 Section 5.8 References */ f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
        return $1.replace(/\./g, "");
    });
    /* TODO: something other than this */ f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
}
function csf_to_ods_formula(f /*:string*/ ) /*:string*/ {
    var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
    /* TODO: something other than this */ return o.replace(/;/g, "|").replace(/,/g, ";");
}
function ods_to_csf_3D(r /*:string*/ ) /*:[string, string]*/ {
    var a = r.split(":");
    var s = a[0].split(".")[0];
    return [
        s,
        a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")
    ];
}
function csf_to_ods_3D(r /*:string*/ ) /*:string*/ {
    return r.replace(/\./, "!");
}
var strs = {}; // shared strings
var _ssfopts = {}; // spreadsheet formatting options
/*global Map */ var browser_has_Map = typeof Map !== "undefined";
function get_sst_id(sst /*:SST*/ , str /*:string*/ , rev) /*:number*/ {
    var i = 0, len = sst.length;
    if (rev) {
        if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
            var revarr = browser_has_Map ? rev.get(str) : rev[str];
            for(; i < revarr.length; ++i)if (sst[revarr[i]].t === str) {
                sst.Count++;
                return revarr[i];
            }
        }
    } else for(; i < len; ++i)if (sst[i].t === str) {
        sst.Count++;
        return i;
    }
    sst[len] = {
        t: str
    } /*:any*/ ;
    sst.Count++;
    sst.Unique++;
    if (rev) {
        if (browser_has_Map) {
            if (!rev.has(str)) rev.set(str, []);
            rev.get(str).push(len);
        } else {
            if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
            rev[str].push(len);
        }
    }
    return len;
}
function col_obj_w(C /*:number*/ , col) {
    var p = {
        min: C + 1,
        max: C + 1
    } /*:any*/ ;
    /* wch (chars), wpx (pixels) */ var wch = -1;
    if (col.MDW) MDW = col.MDW;
    if (col.width != null) p.customWidth = 1;
    else if (col.wpx != null) wch = px2char(col.wpx);
    else if (col.wch != null) wch = col.wch;
    if (wch > -1) {
        p.width = char2width(wch);
        p.customWidth = 1;
    } else if (col.width != null) p.width = col.width;
    if (col.hidden) p.hidden = true;
    if (col.level != null) p.outlineLevel = p.level = col.level;
    return p;
}
function default_margins(margins /*:Margins*/ , mode /*:?string*/ ) {
    if (!margins) return;
    var defs = [
        0.7,
        0.7,
        0.75,
        0.75,
        0.3,
        0.3
    ];
    if (mode == "xlml") defs = [
        1,
        1,
        1,
        1,
        0.5,
        0.5
    ];
    if (margins.left == null) margins.left = defs[0];
    if (margins.right == null) margins.right = defs[1];
    if (margins.top == null) margins.top = defs[2];
    if (margins.bottom == null) margins.bottom = defs[3];
    if (margins.header == null) margins.header = defs[4];
    if (margins.footer == null) margins.footer = defs[5];
}
function get_cell_style(styles /*:Array<any>*/ , cell /*:Cell*/ , opts) {
    var z = opts.revssf[cell.z != null ? cell.z : "General"];
    var i = 0x3c, len = styles.length;
    if (z == null && opts.ssf) {
        for(; i < 0x188; ++i)if (opts.ssf[i] == null) {
            SSF_load(cell.z, i);
            // $FlowIgnore
            opts.ssf[i] = cell.z;
            opts.revssf[cell.z] = z = i;
            break;
        }
    }
    for(i = 0; i != len; ++i)if (styles[i].numFmtId === z) return i;
    styles[len] = {
        numFmtId: z,
        fontId: 0,
        fillId: 0,
        borderId: 0,
        xfId: 0,
        applyNumberFormat: 1
    };
    return len;
}
function safe_format(p /*:Cell*/ , fmtid /*:number*/ , fillid /*:?number*/ , opts, themes, styles) {
    try {
        if (opts.cellNF) p.z = table_fmt[fmtid];
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (p.t === "z" && !opts.cellStyles) return;
    if (p.t === "d" && typeof p.v === "string") p.v = parseDate(p.v);
    if ((!opts || opts.cellText !== false) && p.t !== "z") try {
        if (table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
        if (p.t === "e") p.w = p.w || BErr[p.v];
        else if (fmtid === 0) {
            if (p.t === "n") {
                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                else p.w = SSF_general_num(p.v);
            } else if (p.t === "d") {
                var dd = datenum(p.v);
                if ((dd | 0) === dd) p.w = dd.toString(10);
                else p.w = SSF_general_num(dd);
            } else if (p.v === undefined) return "";
            else p.w = SSF_general(p.v, _ssfopts);
        } else if (p.t === "d") p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);
        else p.w = SSF_format(fmtid, p.v, _ssfopts);
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (!opts.cellStyles) return;
    if (fillid != null) try {
        p.s = styles.Fills[fillid];
        if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
            p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
            if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
        }
        if (p.s.bgColor && p.s.bgColor.theme) {
            p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
            if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
        }
    } catch (e) {
        if (opts.WTF && styles.Fills) throw e;
    }
}
function check_ws(ws /*:Worksheet*/ , sname /*:string*/ , i /*:number*/ ) {
    if (ws && ws["!ref"]) {
        var range = safe_decode_range(ws["!ref"]);
        if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i + "): " + ws["!ref"]);
    }
}
function parse_ws_xml_dim(ws /*:Worksheet*/ , s /*:string*/ ) {
    var d = safe_decode_range(s);
    if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d);
}
var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
var dimregex = /"(\w*:\w*)"/;
var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
/* 18.3 Worksheets */ function parse_ws_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {
    if (!data) return data;
    if (!rels) rels = {
        "!id": {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    /* 18.3.1.99 worksheet CT_Worksheet */ var s = opts.dense ? [] : {} /*:any*/ ;
    var refguess /*:Range*/  = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    } /*:any*/ ;
    var data1 = "", data2 = "";
    var mtch /*:?any*/  = data.match(sheetdataregex);
    if (mtch) {
        data1 = data.slice(0, mtch.index);
        data2 = data.slice(mtch.index + mtch[0].length);
    } else data1 = data2 = data;
    /* 18.3.1.82 sheetPr CT_SheetPr */ var sheetPr = data1.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx, styles, themes);
    /* 18.3.1.35 dimension CT_SheetDimension */ var ridx = (data1.match(/<(?:\w*:)?dimension/) || {
        index: -1
    }).index;
    if (ridx > 0) {
        var ref = data1.slice(ridx, ridx + 50).match(dimregex);
        if (ref) parse_ws_xml_dim(s, ref[1]);
    }
    /* 18.3.1.88 sheetViews CT_SheetViews */ var svs = data1.match(svsregex);
    if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
    /* 18.3.1.17 cols CT_Cols */ var columns /*:Array<ColInfo>*/  = [];
    if (opts.cellStyles) {
        /* 18.3.1.13 col CT_Col */ var cols = data1.match(colregex);
        if (cols) parse_ws_xml_cols(columns, cols);
    }
    /* 18.3.1.80 sheetData CT_SheetData ? */ if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
    /* 18.3.1.2  autoFilter CT_AutoFilter */ var afilter = data2.match(afregex);
    if (afilter) s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
    /* 18.3.1.55 mergeCells CT_MergeCells */ var merges /*:Array<Range>*/  = [];
    var _merge = data2.match(mergecregex);
    if (_merge) for(ridx = 0; ridx != _merge.length; ++ridx)merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
    /* 18.3.1.48 hyperlinks CT_Hyperlinks */ var hlink = data2.match(hlinkregex);
    if (hlink) parse_ws_xml_hlinks(s, hlink, rels);
    /* 18.3.1.62 pageMargins CT_PageMargins */ var margins = data2.match(marginregex);
    if (margins) s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
    if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
    if (opts.sheetRows > 0 && s["!ref"]) {
        var tmpref = safe_decode_range(s["!ref"]);
        if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
        }
    }
    if (columns.length > 0) s["!cols"] = columns;
    if (merges.length > 0) s["!merges"] = merges;
    return s;
}
function write_ws_xml_merges(merges /*:Array<Range>*/ ) /*:string*/ {
    if (merges.length === 0) return "";
    var o = '<mergeCells count="' + merges.length + '">';
    for(var i = 0; i != merges.length; ++i)o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
    return o + "</mergeCells>";
}
/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */ function parse_ws_xml_sheetpr(sheetPr /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {
    var data = parsexmltag(sheetPr);
    if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
    if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
}
function parse_ws_xml_sheetpr2(sheetPr /*:string*/ , body /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {
    parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
}
function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
    var needed = false;
    var props = {}, payload = null;
    if (opts.bookType !== "xlsx" && wb.vbaraw) {
        var cname = wb.SheetNames[idx];
        try {
            if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
        } catch (e) {}
        needed = true;
        props.codeName = utf8write(escapexml(cname));
    }
    if (ws && ws["!outline"]) {
        var outlineprops = {
            summaryBelow: 1,
            summaryRight: 1
        };
        if (ws["!outline"].above) outlineprops.summaryBelow = 0;
        if (ws["!outline"].left) outlineprops.summaryRight = 0;
        payload = (payload || "") + writextag("outlinePr", null, outlineprops);
    }
    if (!needed && !payload) return;
    o[o.length] = writextag("sheetPr", payload, props);
}
/* 18.3.1.85 sheetProtection CT_SheetProtection */ var sheetprot_deffalse = [
    "objects",
    "scenarios",
    "selectLockedCells",
    "selectUnlockedCells"
];
var sheetprot_deftrue = [
    "formatColumns",
    "formatRows",
    "formatCells",
    "insertColumns",
    "insertRows",
    "insertHyperlinks",
    "deleteColumns",
    "deleteRows",
    "sort",
    "autoFilter",
    "pivotTables"
];
function write_ws_xml_protection(sp) /*:string*/ {
    // algorithmName, hashValue, saltValue, spinCount
    var o = {
        sheet: 1
    } /*:any*/ ;
    sheetprot_deffalse.forEach(function(n) {
        if (sp[n] != null && sp[n]) o[n] = "1";
    });
    sheetprot_deftrue.forEach(function(n) {
        if (sp[n] != null && !sp[n]) o[n] = "0";
    });
    /* TODO: algorithm */ if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
    return writextag("sheetProtection", null, o);
}
function parse_ws_xml_hlinks(s, data /*:Array<string>*/ , rels) {
    var dense = Array.isArray(s);
    for(var i = 0; i != data.length; ++i){
        var val = parsexmltag(utf8read(data[i]), true);
        if (!val.ref) return;
        var rel = ((rels || {})["!id"] || [])[val.id];
        if (rel) {
            val.Target = rel.Target;
            if (val.location) val.Target += "#" + unescapexml(val.location);
        } else {
            val.Target = "#" + unescapexml(val.location);
            rel = {
                Target: val.Target,
                TargetMode: "Internal"
            };
        }
        val.Rel = rel;
        if (val.tooltip) {
            val.Tooltip = val.tooltip;
            delete val.tooltip;
        }
        var rng = safe_decode_range(val.ref);
        for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){
            var addr = encode_cell({
                c: C,
                r: R
            });
            if (dense) {
                if (!s[R]) s[R] = [];
                if (!s[R][C]) s[R][C] = {
                    t: "z",
                    v: undefined
                };
                s[R][C].l = val;
            } else {
                if (!s[addr]) s[addr] = {
                    t: "z",
                    v: undefined
                };
                s[addr].l = val;
            }
        }
    }
}
function parse_ws_xml_margins(margin) {
    var o = {};
    [
        "left",
        "right",
        "top",
        "bottom",
        "header",
        "footer"
    ].forEach(function(k) {
        if (margin[k]) o[k] = parseFloat(margin[k]);
    });
    return o;
}
function write_ws_xml_margins(margin) /*:string*/ {
    default_margins(margin);
    return writextag("pageMargins", null, margin);
}
function parse_ws_xml_cols(columns, cols) {
    var seencol = false;
    for(var coli = 0; coli != cols.length; ++coli){
        var coll = parsexmltag(cols[coli], true);
        if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
        var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
        if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
        delete coll.min;
        delete coll.max;
        coll.width = +coll.width;
        if (!seencol && coll.width) {
            seencol = true;
            find_mdw_colw(coll.width);
        }
        process_col(coll);
        while(colm <= colM)columns[colm++] = dup(coll);
    }
}
function write_ws_xml_cols(ws, cols) /*:string*/ {
    var o = [
        "<cols>"
    ], col;
    for(var i = 0; i != cols.length; ++i){
        if (!(col = cols[i])) continue;
        o[o.length] = writextag("col", null, col_obj_w(i, col));
    }
    o[o.length] = "</cols>";
    return o.join("");
}
function parse_ws_xml_autofilter(data /*:string*/ ) {
    var o = {
        ref: (data.match(/ref="([^"]*)"/) || [])[1]
    };
    return o;
}
function write_ws_xml_autofilter(data, ws, wb, idx) /*:string*/ {
    var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
    if (!wb.Workbook) wb.Workbook = {
        Sheets: []
    } /*:any*/ ;
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names /*: Array<any> */  = wb.Workbook.Names;
    var range = decode_range(ref);
    if (range.s.r == range.e.r) {
        range.e.r = decode_range(ws["!ref"]).e.r;
        ref = encode_range(range);
    }
    for(var i = 0; i < names.length; ++i){
        var name = names[i];
        if (name.Name != "_xlnm._FilterDatabase") continue;
        if (name.Sheet != idx) continue;
        name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
        break;
    }
    if (i == names.length) names.push({
        Name: "_xlnm._FilterDatabase",
        Sheet: idx,
        Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    return writextag("autoFilter", null, {
        ref: ref
    });
}
/* 18.3.1.88 sheetViews CT_SheetViews */ /* 18.3.1.87 sheetView CT_SheetView */ var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
function parse_ws_xml_sheetviews(data, wb /*:WBWBProps*/ ) {
    if (!wb.Views) wb.Views = [
        {}
    ];
    (data.match(sviewregex) || []).forEach(function(r /*:string*/ , i /*:number*/ ) {
        var tag = parsexmltag(r);
        // $FlowIgnore
        if (!wb.Views[i]) wb.Views[i] = {};
        // $FlowIgnore
        if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
        // $FlowIgnore
        if (parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
    });
}
function write_ws_xml_sheetviews(ws, opts, idx, wb) /*:string*/ {
    var sview = {
        workbookViewId: "0"
    } /*:any*/ ;
    // $FlowIgnore
    if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
    return writextag("sheetViews", writextag("sheetView", null, sview), {});
}
function write_ws_xml_cell(cell /*:Cell*/ , ref, ws, opts /*::, idx, wb*/ ) /*:string*/ {
    if (cell.c) ws["!comments"].push([
        ref,
        cell.c
    ]);
    if (cell.v === undefined && typeof cell.f !== "string" || cell.t === "z" && !cell.f) return "";
    var vv = "";
    var oldt = cell.t, oldv = cell.v;
    if (cell.t !== "z") switch(cell.t){
        case "b":
            vv = cell.v ? "1" : "0";
            break;
        case "n":
            vv = "" + cell.v;
            break;
        case "e":
            vv = BErr[cell.v];
            break;
        case "d":
            if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
            else {
                cell = dup(cell);
                cell.t = "n";
                vv = "" + (cell.v = datenum(parseDate(cell.v)));
            }
            if (typeof cell.z === "undefined") cell.z = table_fmt[14];
            break;
        default:
            vv = cell.v;
            break;
    }
    var v = writetag("v", escapexml(vv)), o = {
        r: ref
    } /*:any*/ ;
    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);
    if (os !== 0) o.s = os;
    switch(cell.t){
        case "n":
            break;
        case "d":
            o.t = "d";
            break;
        case "b":
            o.t = "b";
            break;
        case "e":
            o.t = "e";
            break;
        case "z":
            break;
        default:
            if (cell.v == null) {
                delete cell.t;
                break;
            }
            if (cell.v.length > 32767) throw new Error("Text length must not exceed 32767 characters");
            if (opts && opts.bookSST) {
                v = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
                o.t = "s";
                break;
            }
            o.t = "str";
            break;
    }
    if (cell.t != oldt) {
        cell.t = oldt;
        cell.v = oldv;
    }
    if (typeof cell.f == "string" && cell.f) {
        var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {
            t: "array",
            ref: cell.F
        } : null;
        v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "");
    }
    if (cell.l) ws["!links"].push([
        ref,
        cell.l
    ]);
    if (cell.D) o.cm = 1;
    return writextag("c", v, o);
}
var parse_ws_xml_data = /*#__PURE__*/ function() {
    var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
    var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    var refregex = /ref=["']([^"']*)["']/;
    var match_v = matchtag("v"), match_f = matchtag("f");
    return function parse_ws_xml_data(sdata /*:string*/ , s, opts, guess /*:Range*/ , themes, styles) {
        var ri = 0, x = "", cells /*:Array<string>*/  = [], cref /*:?Array<string>*/  = [], idx = 0, i = 0, cc = 0, d = "", p /*:any*/ ;
        var tag, tagr = 0, tagc = 0;
        var sstr, ftag;
        var fmtid = 0, fillid = 0;
        var do_format = Array.isArray(styles.CellXf), cf;
        var arrayf /*:Array<[Range, string]>*/  = [];
        var sharedf = [];
        var dense = Array.isArray(s);
        var rows /*:Array<RowInfo>*/  = [], rowobj = {}, rowrite = false;
        var sheetStubs = !!opts.sheetStubs;
        for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt){
            x = marr[mt].trim();
            var xlen = x.length;
            if (xlen === 0) continue;
            /* 18.3.1.73 row CT_Row */ var rstarti = 0;
            outa: for(ri = 0; ri < xlen; ++ri)switch(/*x.charCodeAt(ri)*/ x[ri]){
                case ">" /*62*/ :
                    if (/*x.charCodeAt(ri-1) != 47*/ x[ri - 1] != "/") {
                        ++ri;
                        break outa;
                    }
                    if (opts && opts.cellStyles) {
                        // TODO: avoid duplication
                        tag = parsexmltag(x.slice(rstarti, ri), true);
                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                        tagc = -1;
                        if (opts.sheetRows && opts.sheetRows < tagr) continue;
                        rowobj = {};
                        rowrite = false;
                        if (tag.ht) {
                            rowrite = true;
                            rowobj.hpt = parseFloat(tag.ht);
                            rowobj.hpx = pt2px(rowobj.hpt);
                        }
                        if (tag.hidden == "1") {
                            rowrite = true;
                            rowobj.hidden = true;
                        }
                        if (tag.outlineLevel != null) {
                            rowrite = true;
                            rowobj.level = +tag.outlineLevel;
                        }
                        if (rowrite) rows[tagr - 1] = rowobj;
                    }
                    break;
                case "<" /*60*/ :
                    rstarti = ri;
                    break;
            }
            if (rstarti >= ri) break;
            tag = parsexmltag(x.slice(rstarti, ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr) continue;
            if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
            if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
            if (opts && opts.cellStyles) {
                rowobj = {};
                rowrite = false;
                if (tag.ht) {
                    rowrite = true;
                    rowobj.hpt = parseFloat(tag.ht);
                    rowobj.hpx = pt2px(rowobj.hpt);
                }
                if (tag.hidden == "1") {
                    rowrite = true;
                    rowobj.hidden = true;
                }
                if (tag.outlineLevel != null) {
                    rowrite = true;
                    rowobj.level = +tag.outlineLevel;
                }
                if (rowrite) rows[tagr - 1] = rowobj;
            }
            /* 18.3.1.4 c CT_Cell */ cells = x.slice(ri).split(cellregex);
            for(var rslice = 0; rslice != cells.length; ++rslice)if (cells[rslice].trim().charAt(0) != "<") break;
            cells = cells.slice(rslice);
            for(ri = 0; ri != cells.length; ++ri){
                x = cells[ri].trim();
                if (x.length === 0) continue;
                cref = x.match(rregex);
                idx = ri;
                i = 0;
                cc = 0;
                x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
                if (cref != null && cref.length === 2) {
                    idx = 0;
                    d = cref[1];
                    for(i = 0; i != d.length; ++i){
                        if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;
                        idx = 26 * idx + cc;
                    }
                    --idx;
                    tagc = idx;
                } else ++tagc;
                for(i = 0; i != x.length; ++i)if (x.charCodeAt(i) === 62) break;
                ++i;
                tag = parsexmltag(x.slice(0, i), true);
                if (!tag.r) tag.r = encode_cell({
                    r: tagr - 1,
                    c: tagc
                });
                d = x.slice(i);
                p = {
                    t: ""
                } /*:any*/ ;
                if ((cref = d.match(match_v)) != null && /*::cref != null && */ cref[1] !== "") p.v = unescapexml(cref[1]);
                if (opts.cellFormula) {
                    if ((cref = d.match(match_f)) != null && /*::cref != null && */ cref[1] !== "") {
                        /* TODO: match against XLSXFutureFunctions */ p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
                        if (!opts.xlfn) p.f = _xlfn(p.f);
                        if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t="array"') > -1) {
                            p.F = (d.match(refregex) || [])[1];
                            if (p.F.indexOf(":") > -1) arrayf.push([
                                safe_decode_range(p.F),
                                p.F
                            ]);
                        } else if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t="shared"') > -1) {
                            // TODO: parse formula
                            ftag = parsexmltag(cref[0]);
                            var ___f = unescapexml(utf8read(cref[1]));
                            if (!opts.xlfn) ___f = _xlfn(___f);
                            sharedf[parseInt(ftag.si, 10)] = [
                                ftag,
                                ___f,
                                tag.r
                            ];
                        }
                    } else if (cref = d.match(/<f[^>]*\/>/)) {
                        ftag = parsexmltag(cref[0]);
                        if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                    }
                    /* TODO: factor out contains logic */ var _tag = decode_cell(tag.r);
                    for(i = 0; i < arrayf.length; ++i)if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) {
                        if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];
                    }
                }
                if (tag.t == null && p.v === undefined) {
                    if (p.f || p.F) {
                        p.v = 0;
                        p.t = "n";
                    } else if (!sheetStubs) continue;
                    else p.t = "z";
                } else p.t = tag.t || "n";
                if (guess.s.c > tagc) guess.s.c = tagc;
                if (guess.e.c < tagc) guess.e.c = tagc;
                /* 18.18.11 t ST_CellType */ switch(p.t){
                    case "n":
                        if (p.v == "" || p.v == null) {
                            if (!sheetStubs) continue;
                            p.t = "z";
                        } else p.v = parseFloat(p.v);
                        break;
                    case "s":
                        if (typeof p.v == "undefined") {
                            if (!sheetStubs) continue;
                            p.t = "z";
                        } else {
                            sstr = strs[parseInt(p.v, 10)];
                            p.v = sstr.t;
                            p.r = sstr.r;
                            if (opts.cellHTML) p.h = sstr.h;
                        }
                        break;
                    case "str":
                        p.t = "s";
                        p.v = p.v != null ? utf8read(p.v) : "";
                        if (opts.cellHTML) p.h = escapehtml(p.v);
                        break;
                    case "inlineStr":
                        cref = d.match(isregex);
                        p.t = "s";
                        if (cref != null && (sstr = parse_si(cref[1]))) {
                            p.v = sstr.t;
                            if (opts.cellHTML) p.h = sstr.h;
                        } else p.v = "";
                        break;
                    case "b":
                        p.v = parsexmlbool(p.v);
                        break;
                    case "d":
                        if (opts.cellDates) p.v = parseDate(p.v, 1);
                        else {
                            p.v = datenum(parseDate(p.v, 1));
                            p.t = "n";
                        }
                        break;
                    /* error string in .w, number in .v */ case "e":
                        if (!opts || opts.cellText !== false) p.w = p.v;
                        p.v = RBErr[p.v];
                        break;
                }
                /* formatting */ fmtid = fillid = 0;
                cf = null;
                if (do_format && tag.s !== undefined) {
                    cf = styles.CellXf[tag.s];
                    if (cf != null) {
                        if (cf.numFmtId != null) fmtid = cf.numFmtId;
                        if (opts.cellStyles) {
                            if (cf.fillId != null) fillid = cf.fillId;
                        }
                    }
                }
                safe_format(p, fmtid, fillid, opts, themes, styles);
                if (opts.cellDates && do_format && p.t == "n" && fmt_is_date(table_fmt[fmtid])) {
                    p.t = "d";
                    p.v = numdate(p.v);
                }
                if (tag.cm && opts.xlmeta) {
                    var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                    if (cm && cm.type == "XLDAPR") p.D = true;
                }
                if (dense) {
                    var _r = decode_cell(tag.r);
                    if (!s[_r.r]) s[_r.r] = [];
                    s[_r.r][_r.c] = p;
                } else s[tag.r] = p;
            }
        }
        if (rows.length > 0) s["!rows"] = rows;
    };
}();
function write_ws_xml_data(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/  /*::, rels*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [], r /*:Array<string>*/  = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols /*:Array<string>*/  = [], R = 0, C = 0, rows = ws["!rows"];
    var dense = Array.isArray(ws);
    var params = {
        r: rr
    } /*:any*/ , row /*:RowInfo*/ , height = -1;
    for(C = range.s.c; C <= range.e.c; ++C)cols[C] = encode_col(C);
    for(R = range.s.r; R <= range.e.r; ++R){
        r = [];
        rr = encode_row(R);
        for(C = range.s.c; C <= range.e.c; ++C){
            ref = cols[C] + rr;
            var _cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (_cell === undefined) continue;
            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);
        }
        if (r.length > 0 || rows && rows[R]) {
            params = {
                r: rr
            } /*:any*/ ;
            if (rows && rows[R]) {
                row = rows[R];
                if (row.hidden) params.hidden = 1;
                height = -1;
                if (row.hpx) height = px2pt(row.hpx);
                else if (row.hpt) height = row.hpt;
                if (height > -1) {
                    params.ht = height;
                    params.customHeight = 1;
                }
                if (row.level) params.outlineLevel = row.level;
            }
            o[o.length] = writextag("row", r.join(""), params);
        }
    }
    if (rows) {
        for(; R < rows.length; ++R)if (rows && rows[R]) {
            params = {
                r: R + 1
            } /*:any*/ ;
            row = rows[R];
            if (row.hidden) params.hidden = 1;
            height = -1;
            if (row.hpx) height = px2pt(row.hpx);
            else if (row.hpt) height = row.hpt;
            if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
            }
            if (row.level) params.outlineLevel = row.level;
            o[o.length] = writextag("row", "", params);
        }
    }
    return o.join("");
}
function write_ws_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("worksheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
        })
    ];
    var s = wb.SheetNames[idx], sidx = 0, rdata = "";
    var ws = wb.Sheets[s];
    if (ws == null) ws = {};
    var ref = ws["!ref"] || "A1";
    var range = safe_decode_range(ref);
    if (range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {
        if (opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
        range.e.c = Math.min(range.e.c, 0x3FFF);
        range.e.r = Math.min(range.e.c, 0xFFFFF);
        ref = encode_range(range);
    }
    if (!rels) rels = {};
    ws["!comments"] = [];
    var _drawing = [];
    write_ws_xml_sheetpr(ws, wb, idx, opts, o);
    o[o.length] = writextag("dimension", null, {
        "ref": ref
    });
    o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
    /* TODO: store in WB, process styles */ if (opts.sheetFormat) o[o.length] = writextag("sheetFormatPr", null, {
        defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
        baseColWidth: opts.sheetFormat.baseColWidth || "10",
        outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
    });
    if (ws["!cols"] != null && ws["!cols"].length > 0) o[o.length] = write_ws_xml_cols(ws, ws["!cols"]);
    o[sidx = o.length] = "<sheetData/>";
    ws["!links"] = [];
    if (ws["!ref"] != null) {
        rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
        if (rdata.length > 0) o[o.length] = rdata;
    }
    if (o.length > sidx + 1) {
        o[o.length] = "</sheetData>";
        o[sidx] = o[sidx].replace("/>", ">");
    }
    /* sheetCalcPr */ if (ws["!protect"]) o[o.length] = write_ws_xml_protection(ws["!protect"]);
    /* protectedRanges */ /* scenarios */ if (ws["!autofilter"] != null) o[o.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
    /* sortState */ /* dataConsolidate */ /* customSheetViews */ if (ws["!merges"] != null && ws["!merges"].length > 0) o[o.length] = write_ws_xml_merges(ws["!merges"]);
    /* phoneticPr */ /* conditionalFormatting */ /* dataValidations */ var relc = -1, rel, rId = -1;
    if (/*::(*/ ws["!links"]/*::||[])*/ .length > 0) {
        o[o.length] = "<hyperlinks>";
        /*::(*/ ws["!links"]/*::||[])*/ .forEach(function(l) {
            if (!l[1].Target) return;
            rel = {
                "ref": l[0]
            } /*:any*/ ;
            if (l[1].Target.charAt(0) != "#") {
                rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
                rel["r:id"] = "rId" + rId;
            }
            if ((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));
            if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
            o[o.length] = writextag("hyperlink", null, rel);
        });
        o[o.length] = "</hyperlinks>";
    }
    delete ws["!links"];
    /* printOptions */ if (ws["!margins"] != null) o[o.length] = write_ws_xml_margins(ws["!margins"]);
    /* pageSetup */ /* headerFooter */ /* rowBreaks */ /* colBreaks */ /* customProperties */ /* cellWatches */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, {
        numberStoredAsText: 1,
        sqref: ref
    }));
    /* smartTags */ if (_drawing.length > 0) {
        rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
        o[o.length] = writextag("drawing", null, {
            "r:id": "rId" + rId
        });
        ws["!drawing"] = _drawing;
    }
    if (ws["!comments"].length > 0) {
        rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
        o[o.length] = writextag("legacyDrawing", null, {
            "r:id": "rId" + rId
        });
        ws["!legacy"] = rId;
    }
    /* legacyDrawingHF */ /* picture */ /* oleObjects */ /* controls */ /* webPublishItems */ /* tableParts */ /* extLst */ if (o.length > 1) {
        o[o.length] = "</worksheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.726 BrtRowHdr */ function parse_BrtRowHdr(data, length) {
    var z = {} /*:any*/ ;
    var tgt = data.l + length;
    z.r = data.read_shift(4);
    data.l += 4; // TODO: ixfe
    var miyRw = data.read_shift(2);
    data.l += 1; // TODO: top/bot padding
    var flags = data.read_shift(1);
    data.l = tgt;
    if (flags & 0x07) z.level = flags & 0x07;
    if (flags & 0x10) z.hidden = true;
    if (flags & 0x20) z.hpt = miyRw / 20;
    return z;
}
function write_BrtRowHdr(R /*:number*/ , range, ws) {
    var o = new_buf(145);
    var row = (ws["!rows"] || [])[R] || {};
    o.write_shift(4, R);
    o.write_shift(4, 0); /* TODO: ixfe */ 
    var miyRw = 0x0140;
    if (row.hpx) miyRw = px2pt(row.hpx) * 20;
    else if (row.hpt) miyRw = row.hpt * 20;
    o.write_shift(2, miyRw);
    o.write_shift(1, 0); /* top/bot padding */ 
    var flags = 0x0;
    if (row.level) flags |= row.level;
    if (row.hidden) flags |= 0x10;
    if (row.hpx || row.hpt) flags |= 0x20;
    o.write_shift(1, flags);
    o.write_shift(1, 0); /* phonetic guide */ 
    /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */ var ncolspan = 0, lcs = o.l;
    o.l += 4;
    var caddr = {
        r: R,
        c: 0
    };
    for(var i = 0; i < 16; ++i){
        if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;
        var first = -1, last = -1;
        for(var j = i << 10; j < i + 1 << 10; ++j){
            caddr.c = j;
            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
            if (cell) {
                if (first < 0) first = j;
                last = j;
            }
        }
        if (first < 0) continue;
        ++ncolspan;
        o.write_shift(4, first);
        o.write_shift(4, last);
    }
    var l = o.l;
    o.l = lcs;
    o.write_shift(4, ncolspan);
    o.l = l;
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function write_row_header(ba, ws, range, R) {
    var o = write_BrtRowHdr(R, range, ws);
    if (o.length > 17 || (ws["!rows"] || [])[R]) write_record(ba, 0x0000 /* BrtRowHdr */ , o);
}
/* [MS-XLSB] 2.4.820 BrtWsDim */ var parse_BrtWsDim = parse_UncheckedRfX;
var write_BrtWsDim = write_UncheckedRfX;
/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */ function parse_BrtWsFmtInfo() {}
//function write_BrtWsFmtInfo(ws, o) { }
/* [MS-XLSB] 2.4.823 BrtWsProp */ function parse_BrtWsProp(data, length) {
    var z = {};
    var f = data[data.l];
    ++data.l;
    z.above = !(f & 0x40);
    z.left = !(f & 0x80);
    /* TODO: pull flags */ data.l += 18;
    z.name = parse_XLSBCodeName(data, length - 19);
    return z;
}
function write_BrtWsProp(str, outl, o) {
    if (o == null) o = new_buf(84 + 4 * str.length);
    var f = 0xC0;
    if (outl) {
        if (outl.above) f &= -65;
        if (outl.left) f &= -129;
    }
    o.write_shift(1, f);
    for(var i = 1; i < 3; ++i)o.write_shift(1, 0);
    write_BrtColor({
        auto: 1
    }, o);
    o.write_shift(-4, -1);
    o.write_shift(-4, -1);
    write_XLSBCodeName(str, o);
    return o.slice(0, o.l);
}
/* [MS-XLSB] 2.4.306 BrtCellBlank */ function parse_BrtCellBlank(data) {
    var cell = parse_XLSBCell(data);
    return [
        cell
    ];
}
function write_BrtCellBlank(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    return write_XLSBCell(ncell, o);
}
function parse_BrtShortBlank(data) {
    var cell = parse_XLSBShortCell(data);
    return [
        cell
    ];
}
function write_BrtShortBlank(cell, ncell, o) {
    if (o == null) o = new_buf(4);
    return write_XLSBShortCell(ncell, o);
}
/* [MS-XLSB] 2.4.307 BrtCellBool */ function parse_BrtCellBool(data) {
    var cell = parse_XLSBCell(data);
    var fBool = data.read_shift(1);
    return [
        cell,
        fBool,
        "b"
    ];
}
function write_BrtCellBool(cell, ncell, o) {
    if (o == null) o = new_buf(9);
    write_XLSBCell(ncell, o);
    o.write_shift(1, cell.v ? 1 : 0);
    return o;
}
function parse_BrtShortBool(data) {
    var cell = parse_XLSBShortCell(data);
    var fBool = data.read_shift(1);
    return [
        cell,
        fBool,
        "b"
    ];
}
function write_BrtShortBool(cell, ncell, o) {
    if (o == null) o = new_buf(5);
    write_XLSBShortCell(ncell, o);
    o.write_shift(1, cell.v ? 1 : 0);
    return o;
}
/* [MS-XLSB] 2.4.308 BrtCellError */ function parse_BrtCellError(data) {
    var cell = parse_XLSBCell(data);
    var bError = data.read_shift(1);
    return [
        cell,
        bError,
        "e"
    ];
}
function write_BrtCellError(cell, ncell, o) {
    if (o == null) o = new_buf(9);
    write_XLSBCell(ncell, o);
    o.write_shift(1, cell.v);
    return o;
}
function parse_BrtShortError(data) {
    var cell = parse_XLSBShortCell(data);
    var bError = data.read_shift(1);
    return [
        cell,
        bError,
        "e"
    ];
}
function write_BrtShortError(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    o.write_shift(1, cell.v);
    o.write_shift(2, 0);
    o.write_shift(1, 0);
    return o;
}
/* [MS-XLSB] 2.4.311 BrtCellIsst */ function parse_BrtCellIsst(data) {
    var cell = parse_XLSBCell(data);
    var isst = data.read_shift(4);
    return [
        cell,
        isst,
        "s"
    ];
}
function write_BrtCellIsst(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    o.write_shift(4, ncell.v);
    return o;
}
function parse_BrtShortIsst(data) {
    var cell = parse_XLSBShortCell(data);
    var isst = data.read_shift(4);
    return [
        cell,
        isst,
        "s"
    ];
}
function write_BrtShortIsst(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    o.write_shift(4, ncell.v);
    return o;
}
/* [MS-XLSB] 2.4.313 BrtCellReal */ function parse_BrtCellReal(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_Xnum(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtCellReal(cell, ncell, o) {
    if (o == null) o = new_buf(16);
    write_XLSBCell(ncell, o);
    write_Xnum(cell.v, o);
    return o;
}
function parse_BrtShortReal(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_Xnum(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtShortReal(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBShortCell(ncell, o);
    write_Xnum(cell.v, o);
    return o;
}
/* [MS-XLSB] 2.4.314 BrtCellRk */ function parse_BrtCellRk(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_RkNumber(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtCellRk(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    write_RkNumber(cell.v, o);
    return o;
}
function parse_BrtShortRk(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_RkNumber(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtShortRk(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    write_RkNumber(cell.v, o);
    return o;
}
/* [MS-XLSB] 2.4.323 BrtCellRString */ function parse_BrtCellRString(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_RichStr(data);
    return [
        cell,
        value,
        "is"
    ];
}
/* [MS-XLSB] 2.4.317 BrtCellSt */ function parse_BrtCellSt(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_XLWideString(data);
    return [
        cell,
        value,
        "str"
    ];
}
function write_BrtCellSt(cell, ncell, o) {
    if (o == null) o = new_buf(12 + 4 * cell.v.length);
    write_XLSBCell(ncell, o);
    write_XLWideString(cell.v, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function parse_BrtShortSt(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_XLWideString(data);
    return [
        cell,
        value,
        "str"
    ];
}
function write_BrtShortSt(cell, ncell, o) {
    if (o == null) o = new_buf(8 + 4 * cell.v.length);
    write_XLSBShortCell(ncell, o);
    write_XLWideString(cell.v, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.653 BrtFmlaBool */ function parse_BrtFmlaBool(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = data.read_shift(1);
    var o = [
        cell,
        value,
        "b"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.654 BrtFmlaError */ function parse_BrtFmlaError(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = data.read_shift(1);
    var o = [
        cell,
        value,
        "e"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.655 BrtFmlaNum */ function parse_BrtFmlaNum(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = parse_Xnum(data);
    var o = [
        cell,
        value,
        "n"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.656 BrtFmlaString */ function parse_BrtFmlaString(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = parse_XLWideString(data);
    var o = [
        cell,
        value,
        "str"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.682 BrtMergeCell */ var parse_BrtMergeCell = parse_UncheckedRfX;
var write_BrtMergeCell = write_UncheckedRfX;
/* [MS-XLSB] 2.4.107 BrtBeginMergeCells */ function write_BrtBeginMergeCells(cnt, o) {
    if (o == null) o = new_buf(4);
    o.write_shift(4, cnt);
    return o;
}
/* [MS-XLSB] 2.4.662 BrtHLink */ function parse_BrtHLink(data, length /*::, opts*/ ) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var relId = parse_XLNullableWideString(data);
    var loc = parse_XLWideString(data);
    var tooltip = parse_XLWideString(data);
    var display = parse_XLWideString(data);
    data.l = end;
    var o = {
        rfx: rfx,
        relId: relId,
        loc: loc,
        display: display
    } /*:any*/ ;
    if (tooltip) o.Tooltip = tooltip;
    return o;
}
function write_BrtHLink(l, rId) {
    var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
    write_UncheckedRfX({
        s: decode_cell(l[0]),
        e: decode_cell(l[0])
    }, o);
    write_RelID("rId" + rId, o);
    var locidx = l[1].Target.indexOf("#");
    var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
    write_XLWideString(loc || "", o);
    write_XLWideString(l[1].Tooltip || "", o);
    write_XLWideString("", o);
    return o.slice(0, o.l);
}
/* [MS-XLSB] 2.4.692 BrtPane */ function parse_BrtPane() {}
/* [MS-XLSB] 2.4.6 BrtArrFmla */ function parse_BrtArrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_RfX(data, 16);
    var fAlwaysCalc = data.read_shift(1);
    var o = [
        rfx
    ];
    o[2] = fAlwaysCalc;
    if (opts.cellFormula) {
        var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
        o[1] = formula;
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.750 BrtShrFmla */ function parse_BrtShrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var o = [
        rfx
    ];
    if (opts.cellFormula) {
        var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
        o[1] = formula;
        data.l = end;
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.323 BrtColInfo */ /* TODO: once XLS ColInfo is set, combine the functions */ function write_BrtColInfo(C /*:number*/ , col, o) {
    if (o == null) o = new_buf(18);
    var p = col_obj_w(C, col);
    o.write_shift(-4, C);
    o.write_shift(-4, C);
    o.write_shift(4, (p.width || 10) * 256);
    o.write_shift(4, 0 /*ixfe*/ ); // style
    var flags = 0;
    if (col.hidden) flags |= 0x01;
    if (typeof p.width == "number") flags |= 0x02;
    if (col.level) flags |= col.level << 8;
    o.write_shift(2, flags); // bit flag
    return o;
}
/* [MS-XLSB] 2.4.678 BrtMargins */ var BrtMarginKeys = [
    "left",
    "right",
    "top",
    "bottom",
    "header",
    "footer"
];
function parse_BrtMargins(data /*::, length, opts*/ ) /*:Margins*/ {
    var margins = {} /*:any*/ ;
    BrtMarginKeys.forEach(function(k) {
        margins[k] = parse_Xnum(data, 8);
    });
    return margins;
}
function write_BrtMargins(margins /*:Margins*/ , o) {
    if (o == null) o = new_buf(48);
    default_margins(margins);
    BrtMarginKeys.forEach(function(k) {
        write_Xnum(margins /*:any*/ [k], o);
    });
    return o;
}
/* [MS-XLSB] 2.4.299 BrtBeginWsView */ function parse_BrtBeginWsView(data /*::, length, opts*/ ) {
    var f = data.read_shift(2);
    data.l += 28;
    return {
        RTL: f & 0x20
    };
}
function write_BrtBeginWsView(ws, Workbook, o) {
    if (o == null) o = new_buf(30);
    var f = 0x39c;
    if ((((Workbook || {}).Views || [])[0] || {}).RTL) f |= 0x20;
    o.write_shift(2, f); // bit flag
    o.write_shift(4, 0);
    o.write_shift(4, 0); // view first row
    o.write_shift(4, 0); // view first col
    o.write_shift(1, 0); // gridline color ICV
    o.write_shift(1, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 100); // zoom scale
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(4, 0); // workbook view id
    return o;
}
/* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */ function write_BrtCellIgnoreEC(ref) {
    var o = new_buf(24);
    o.write_shift(4, 4);
    o.write_shift(4, 1);
    write_UncheckedRfX(ref, o);
    return o;
}
/* [MS-XLSB] 2.4.748 BrtSheetProtection */ function write_BrtSheetProtection(sp, o) {
    if (o == null) o = new_buf(66);
    o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
    o.write_shift(4, 1); // this record should not be written if no protection
    [
        [
            "objects",
            false
        ],
        [
            "scenarios",
            false
        ],
        [
            "formatCells",
            true
        ],
        [
            "formatColumns",
            true
        ],
        [
            "formatRows",
            true
        ],
        [
            "insertColumns",
            true
        ],
        [
            "insertRows",
            true
        ],
        [
            "insertHyperlinks",
            true
        ],
        [
            "deleteColumns",
            true
        ],
        [
            "deleteRows",
            true
        ],
        [
            "selectLockedCells",
            false
        ],
        [
            "sort",
            true
        ],
        [
            "autoFilter",
            true
        ],
        [
            "pivotTables",
            true
        ],
        [
            "selectUnlockedCells",
            false
        ] // fSelUnlockedCells
    ].forEach(function(n) {
        /*:: if(o == null) throw "unreachable"; */ if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
        else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
    });
    return o;
}
function parse_BrtDVal() {}
function parse_BrtDVal14() {}
/* [MS-XLSB] 2.1.7.61 Worksheet */ function parse_ws_bin(data, _opts, idx, rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {
    if (!data) return data;
    var opts = _opts || {};
    if (!rels) rels = {
        "!id": {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var s /*:Worksheet*/  = opts.dense ? [] : {};
    var ref;
    var refguess = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var state /*:Array<string>*/  = [];
    var pass = false, end = false;
    var row, p, cf, R, C, addr, sstr, rr, cell /*:Cell*/ ;
    var merges /*:Array<Range>*/  = [];
    opts.biff = 12;
    opts["!row"] = 0;
    var ai = 0, af = false;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var sharedf = {};
    var supbooks = opts.supbooks || /*::(*/ wb /*:: :any)*/ .supbooks || [
        []
    ];
    supbooks.sharedf = sharedf;
    supbooks.arrayf = arrayf;
    supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
        return x.name;
    });
    if (!opts.supbooks) {
        opts.supbooks = supbooks;
        if (wb.Names) for(var i = 0; i < wb.Names.length; ++i)supbooks[0][i + 1] = wb.Names[i];
    }
    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];
    var seencol = false;
    XLSBRecordEnum[0x0010] = {
        n: "BrtShortReal",
        f: parse_BrtShortReal
    };
    var cm, vm;
    recordhopper(data, function ws_parse(val, RR, RT) {
        if (end) return;
        switch(RT){
            case 0x0094:
                /* 'BrtWsDim' */ ref = val;
                break;
            case 0x0000:
                /* 'BrtRowHdr' */ row = val;
                if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
                rr = encode_row(R = row.r);
                opts["!row"] = row.r;
                if (val.hidden || val.hpt || val.level != null) {
                    if (val.hpt) val.hpx = pt2px(val.hpt);
                    rowinfo[val.r] = val;
                }
                break;
            case 0x0002:
            /* 'BrtCellRk' */ case 0x0003:
            /* 'BrtCellError' */ case 0x0004:
            /* 'BrtCellBool' */ case 0x0005:
            /* 'BrtCellReal' */ case 0x0006:
            /* 'BrtCellSt' */ case 0x0007:
            /* 'BrtCellIsst' */ case 0x0008:
            /* 'BrtFmlaString' */ case 0x0009:
            /* 'BrtFmlaNum' */ case 0x000A:
            /* 'BrtFmlaBool' */ case 0x000B:
            /* 'BrtFmlaError' */ case 0x000D:
            /* 'BrtShortRk' */ case 0x000E:
            /* 'BrtShortError' */ case 0x000F:
            /* 'BrtShortBool' */ case 0x0010:
            /* 'BrtShortReal' */ case 0x0011:
            /* 'BrtShortSt' */ case 0x0012:
            /* 'BrtShortIsst' */ case 0x003E:
                /* 'BrtCellRString' */ p = {
                    t: val[2]
                } /*:any*/ ;
                switch(val[2]){
                    case "n":
                        p.v = val[1];
                        break;
                    case "s":
                        sstr = strs[val[1]];
                        p.v = sstr.t;
                        p.r = sstr.r;
                        break;
                    case "b":
                        p.v = val[1] ? true : false;
                        break;
                    case "e":
                        p.v = val[1];
                        if (opts.cellText !== false) p.w = BErr[p.v];
                        break;
                    case "str":
                        p.t = "s";
                        p.v = val[1];
                        break;
                    case "is":
                        p.t = "s";
                        p.v = val[1].t;
                        break;
                }
                if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);
                C = val[0].c == -1 ? C + 1 : val[0].c;
                if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    s[R][C] = p;
                } else s[encode_col(C) + rr] = p;
                if (opts.cellFormula) {
                    af = false;
                    for(ai = 0; ai < arrayf.length; ++ai){
                        var aii = arrayf[ai];
                        if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                            if (C >= aii[0].s.c && C <= aii[0].e.c) {
                                p.F = encode_range(aii[0]);
                                af = true;
                            }
                        }
                    }
                    if (!af && val.length > 3) p.f = val[3];
                }
                if (refguess.s.r > row.r) refguess.s.r = row.r;
                if (refguess.s.c > C) refguess.s.c = C;
                if (refguess.e.r < row.r) refguess.e.r = row.r;
                if (refguess.e.c < C) refguess.e.c = C;
                if (opts.cellDates && cf && p.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
                    var _d = SSF_parse_date_code(p.v);
                    if (_d) {
                        p.t = "d";
                        p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
                    }
                }
                if (cm) {
                    if (cm.type == "XLDAPR") p.D = true;
                    cm = void 0;
                }
                if (vm) vm = void 0;
                break;
            case 0x0001:
            /* 'BrtCellBlank' */ case 0x000C:
                /* 'BrtShortBlank' */ if (!opts.sheetStubs || pass) break;
                p = {
                    t: "z",
                    v: void 0
                } /*:any*/ ;
                C = val[0].c == -1 ? C + 1 : val[0].c;
                if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    s[R][C] = p;
                } else s[encode_col(C) + rr] = p;
                if (refguess.s.r > row.r) refguess.s.r = row.r;
                if (refguess.s.c > C) refguess.s.c = C;
                if (refguess.e.r < row.r) refguess.e.r = row.r;
                if (refguess.e.c < C) refguess.e.c = C;
                if (cm) {
                    if (cm.type == "XLDAPR") p.D = true;
                    cm = void 0;
                }
                if (vm) vm = void 0;
                break;
            case 0x00B0:
                /* 'BrtMergeCell' */ merges.push(val);
                break;
            case 0x0031:
                cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
                break;
            case 0x01EE:
                /* 'BrtHLink' */ var rel = rels["!id"][val.relId];
                if (rel) {
                    val.Target = rel.Target;
                    if (val.loc) val.Target += "#" + val.loc;
                    val.Rel = rel;
                } else if (val.relId == "") val.Target = "#" + val.loc;
                for(R = val.rfx.s.r; R <= val.rfx.e.r; ++R)for(C = val.rfx.s.c; C <= val.rfx.e.c; ++C)if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    if (!s[R][C]) s[R][C] = {
                        t: "z",
                        v: undefined
                    };
                    s[R][C].l = val;
                } else {
                    addr = encode_cell({
                        c: C,
                        r: R
                    });
                    if (!s[addr]) s[addr] = {
                        t: "z",
                        v: undefined
                    };
                    s[addr].l = val;
                }
                break;
            case 0x01AA:
                /* 'BrtArrFmla' */ if (!opts.cellFormula) break;
                arrayf.push(val);
                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
                cell.f = stringify_formula(val[1], refguess, {
                    r: row.r,
                    c: C
                }, supbooks, opts);
                cell.F = encode_range(val[0]);
                break;
            case 0x01AB:
                /* 'BrtShrFmla' */ if (!opts.cellFormula) break;
                sharedf[encode_cell(val[0].s)] = val[1];
                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
                cell.f = stringify_formula(val[1], refguess, {
                    r: row.r,
                    c: C
                }, supbooks, opts);
                break;
            /* identical to 'ColInfo' in XLS */ case 0x003C:
                /* 'BrtColInfo' */ if (!opts.cellStyles) break;
                while(val.e >= val.s){
                    colinfo[val.e--] = {
                        width: val.w / 256,
                        hidden: !!(val.flags & 0x01),
                        level: val.level
                    };
                    if (!seencol) {
                        seencol = true;
                        find_mdw_colw(val.w / 256);
                    }
                    process_col(colinfo[val.e + 1]);
                }
                break;
            case 0x00A1:
                /* 'BrtBeginAFilter' */ s["!autofilter"] = {
                    ref: encode_range(val)
                };
                break;
            case 0x01DC:
                /* 'BrtMargins' */ s["!margins"] = val;
                break;
            case 0x0093:
                /* 'BrtWsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                if (val.name) wb.Sheets[idx].CodeName = val.name;
                if (val.above || val.left) s["!outline"] = {
                    above: val.above,
                    left: val.left
                };
                break;
            case 0x0089:
                /* 'BrtBeginWsView' */ if (!wb.Views) wb.Views = [
                    {}
                ];
                if (!wb.Views[0]) wb.Views[0] = {};
                if (val.RTL) wb.Views[0].RTL = true;
                break;
            case 0x01E5:
                break;
            case 0x0040:
            /* 'BrtDVal' */ case 0x041D:
                break;
            case 0x0097:
                break;
            case 0x0098:
            /* 'BrtSel' */ case 0x00AF:
            /* 'BrtAFilterDateGroupItem' */ case 0x0284:
            /* 'BrtActiveX' */ case 0x0271:
            /* 'BrtBigName' */ case 0x0232:
            /* 'BrtBkHim' */ case 0x018C:
            /* 'BrtBrk' */ case 0x0458:
            /* 'BrtCFIcon' */ case 0x047A:
            /* 'BrtCFRuleExt' */ case 0x01D7:
            /* 'BrtCFVO' */ case 0x041A:
            /* 'BrtCFVO14' */ case 0x0289:
            /* 'BrtCellIgnoreEC' */ case 0x0451:
            /* 'BrtCellIgnoreEC14' */ case 0x024D:
            /* 'BrtCellSmartTagProperty' */ case 0x025F:
            /* 'BrtCellWatch' */ case 0x0234:
            /* 'BrtColor' */ case 0x041F:
            /* 'BrtColor14' */ case 0x00A8:
            /* 'BrtColorFilter' */ case 0x00AE:
            /* 'BrtCustomFilter' */ case 0x049C:
            /* 'BrtCustomFilter14' */ case 0x01F3:
            /* 'BrtDRef' */ case 0x01FB:
            /* 'BrtDXF' */ case 0x0226:
            /* 'BrtDrawing' */ case 0x00AB:
            /* 'BrtDynamicFilter' */ case 0x00A7:
            /* 'BrtFilter' */ case 0x0499:
            /* 'BrtFilter14' */ case 0x00A9:
            /* 'BrtIconFilter' */ case 0x049D:
            /* 'BrtIconFilter14' */ case 0x0227:
            /* 'BrtLegacyDrawing' */ case 0x0228:
            /* 'BrtLegacyDrawingHF' */ case 0x0295:
            /* 'BrtListPart' */ case 0x027F:
            /* 'BrtOleObject' */ case 0x01DE:
            /* 'BrtPageSetup' */ case 0x0219:
            /* 'BrtPhoneticInfo' */ case 0x01DD:
            /* 'BrtPrintOptions' */ case 0x0218:
            /* 'BrtRangeProtection' */ case 0x044F:
            /* 'BrtRangeProtection14' */ case 0x02A8:
            /* 'BrtRangeProtectionIso' */ case 0x0450:
            /* 'BrtRangeProtectionIso14' */ case 0x0400:
            /* 'BrtRwDescent' */ case 0x0297:
            /* 'BrtSheetCalcProp' */ case 0x0217:
            /* 'BrtSheetProtection' */ case 0x02A6:
            /* 'BrtSheetProtectionIso' */ case 0x01F8:
            /* 'BrtSlc' */ case 0x0413:
            /* 'BrtSparkline' */ case 0x01AC:
            /* 'BrtTable' */ case 0x00AA:
            /* 'BrtTop10Filter' */ case 0x0C00:
            /* 'BrtUid' */ case 0x0032:
            /* 'BrtValueMeta' */ case 0x0816:
            /* 'BrtWebExtension' */ case 0x0415:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                pass = false;
                break;
            default:
                if (RR.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    delete opts.supbooks;
    delete opts["!row"];
    if (!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
    if (opts.sheetRows && s["!ref"]) {
        var tmpref = safe_decode_range(s["!ref"]);
        if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
        }
    }
    if (merges.length > 0) s["!merges"] = merges;
    if (colinfo.length > 0) s["!cols"] = colinfo;
    if (rowinfo.length > 0) s["!rows"] = rowinfo;
    return s;
}
/* TODO: something useful -- this is a stub */ function write_ws_bin_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, ws /*:Worksheet*/ , last_seen /*:boolean*/ ) /*:boolean*/ {
    if (cell.v === undefined) return false;
    var vv = "";
    switch(cell.t){
        case "b":
            vv = cell.v ? "1" : "0";
            break;
        case "d":
            cell = dup(cell);
            cell.z = cell.z || table_fmt[14];
            cell.v = datenum(parseDate(cell.v));
            cell.t = "n";
            break;
        /* falls through */ case "n":
        case "e":
            vv = "" + cell.v;
            break;
        default:
            vv = cell.v;
            break;
    }
    var o /*:any*/  = {
        r: R,
        c: C
    } /*:any*/ ;
    /* TODO: cell style */ o.s = get_cell_style(opts.cellXfs, cell, opts);
    if (cell.l) ws["!links"].push([
        encode_cell(o),
        cell.l
    ]);
    if (cell.c) ws["!comments"].push([
        encode_cell(o),
        cell.c
    ]);
    switch(cell.t){
        case "s":
        case "str":
            if (opts.bookSST) {
                vv = get_sst_id(opts.Strings, cell.v /*:any*/ , opts.revStrings);
                o.t = "s";
                o.v = vv;
                if (last_seen) write_record(ba, 0x0012 /* BrtShortIsst */ , write_BrtShortIsst(cell, o));
                else write_record(ba, 0x0007 /* BrtCellIsst */ , write_BrtCellIsst(cell, o));
            } else {
                o.t = "str";
                if (last_seen) write_record(ba, 0x0011 /* BrtShortSt */ , write_BrtShortSt(cell, o));
                else write_record(ba, 0x0006 /* BrtCellSt */ , write_BrtCellSt(cell, o));
            }
            return true;
        case "n":
            /* TODO: determine threshold for Real vs RK */ if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {
                if (last_seen) write_record(ba, 0x000D /* BrtShortRk */ , write_BrtShortRk(cell, o));
                else write_record(ba, 0x0002 /* BrtCellRk */ , write_BrtCellRk(cell, o));
            } else if (last_seen) write_record(ba, 0x0010 /* BrtShortReal */ , write_BrtShortReal(cell, o));
            else write_record(ba, 0x0005 /* BrtCellReal */ , write_BrtCellReal(cell, o));
            return true;
        case "b":
            o.t = "b";
            if (last_seen) write_record(ba, 0x000F /* BrtShortBool */ , write_BrtShortBool(cell, o));
            else write_record(ba, 0x0004 /* BrtCellBool */ , write_BrtCellBool(cell, o));
            return true;
        case "e":
            o.t = "e";
            if (last_seen) write_record(ba, 0x000E /* BrtShortError */ , write_BrtShortError(cell, o));
            else write_record(ba, 0x0003 /* BrtCellError */ , write_BrtCellError(cell, o));
            return true;
    }
    if (last_seen) write_record(ba, 0x000C /* BrtShortBlank */ , write_BrtShortBlank(cell, o));
    else write_record(ba, 0x0001 /* BrtCellBlank */ , write_BrtCellBlank(cell, o));
    return true;
}
function write_CELLTABLE(ba, ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {
    var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols /*:Array<string>*/  = [];
    write_record(ba, 0x0091 /* BrtBeginSheetData */ );
    var dense = Array.isArray(ws);
    var cap = range.e.r;
    if (ws["!rows"]) cap = Math.max(range.e.r, ws["!rows"].length - 1);
    for(var R = range.s.r; R <= cap; ++R){
        rr = encode_row(R);
        /* [ACCELLTABLE] */ /* BrtRowHdr */ write_row_header(ba, ws, range, R);
        var last_seen = false;
        if (R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C){
            /* *16384CELL */ if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) {
                last_seen = false;
                continue;
            }
            /* write cell */ last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
        }
    }
    write_record(ba, 0x0092 /* BrtEndSheetData */ );
}
function write_MERGECELLS(ba, ws /*:Worksheet*/ ) {
    if (!ws || !ws["!merges"]) return;
    write_record(ba, 0x00B1 /* BrtBeginMergeCells */ , write_BrtBeginMergeCells(ws["!merges"].length));
    ws["!merges"].forEach(function(m) {
        write_record(ba, 0x00B0 /* BrtMergeCell */ , write_BrtMergeCell(m));
    });
    write_record(ba, 0x00B2 /* BrtEndMergeCells */ );
}
function write_COLINFOS(ba, ws /*:Worksheet*/  /*::, idx:number, opts, wb:Workbook*/ ) {
    if (!ws || !ws["!cols"]) return;
    write_record(ba, 0x0186 /* BrtBeginColInfos */ );
    ws["!cols"].forEach(function(m, i) {
        if (m) write_record(ba, 0x003C /* 'BrtColInfo' */ , write_BrtColInfo(i, m));
    });
    write_record(ba, 0x0187 /* BrtEndColInfos */ );
}
function write_IGNOREECS(ba, ws /*:Worksheet*/ ) {
    if (!ws || !ws["!ref"]) return;
    write_record(ba, 0x0288 /* BrtBeginCellIgnoreECs */ );
    write_record(ba, 0x0289 /* BrtCellIgnoreEC */ , write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
    write_record(ba, 0x028A /* BrtEndCellIgnoreECs */ );
}
function write_HLINKS(ba, ws /*:Worksheet*/ , rels) {
    /* *BrtHLink */ ws["!links"].forEach(function(l) {
        if (!l[1].Target) return;
        var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
        write_record(ba, 0x01EE /* BrtHLink */ , write_BrtHLink(l, rId));
    });
    delete ws["!links"];
}
function write_LEGACYDRAWING(ba, ws /*:Worksheet*/ , idx /*:number*/ , rels) {
    /* [BrtLegacyDrawing] */ if (ws["!comments"].length > 0) {
        var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
        write_record(ba, 0x0227 /* BrtLegacyDrawing */ , write_RelID("rId" + rId));
        ws["!legacy"] = rId;
    }
}
function write_AUTOFILTER(ba, ws, wb, idx) {
    if (!ws["!autofilter"]) return;
    var data = ws["!autofilter"];
    var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
    /* Update FilterDatabase defined name for the worksheet */ if (!wb.Workbook) wb.Workbook = {
        Sheets: []
    } /*:any*/ ;
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names /*: Array<any> */  = wb.Workbook.Names;
    var range = decode_range(ref);
    if (range.s.r == range.e.r) {
        range.e.r = decode_range(ws["!ref"]).e.r;
        ref = encode_range(range);
    }
    for(var i = 0; i < names.length; ++i){
        var name = names[i];
        if (name.Name != "_xlnm._FilterDatabase") continue;
        if (name.Sheet != idx) continue;
        name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
        break;
    }
    if (i == names.length) names.push({
        Name: "_xlnm._FilterDatabase",
        Sheet: idx,
        Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    write_record(ba, 0x00A1 /* BrtBeginAFilter */ , write_UncheckedRfX(safe_decode_range(ref)));
    /* *FILTERCOLUMN */ /* [SORTSTATE] */ /* BrtEndAFilter */ write_record(ba, 0x00A2 /* BrtEndAFilter */ );
}
function write_WSVIEWS2(ba, ws, Workbook) {
    write_record(ba, 0x0085 /* BrtBeginWsViews */ );
    /* [ACUID] */ write_record(ba, 0x0089 /* BrtBeginWsView */ , write_BrtBeginWsView(ws, Workbook));
    /* [BrtPane] */ /* *4BrtSel */ /* *4SXSELECT */ /* *FRT */ write_record(ba, 0x008A /* BrtEndWsView */ );
    /* *FRT */ write_record(ba, 0x0086 /* BrtEndWsViews */ );
}
function write_WSFMTINFO() {
/* [ACWSFMTINFO] */ // write_record(ba, 0x01E5 /* BrtWsFmtInfo */, write_BrtWsFmtInfo(ws));
}
function write_SHEETPROTECT(ba, ws) {
    if (!ws["!protect"]) return;
    /* [BrtSheetProtectionIso] */ write_record(ba, 0x0217 /* BrtSheetProtection */ , write_BrtSheetProtection(ws["!protect"]));
}
function write_ws_bin(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) {
    var ba = buf_array();
    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    var c /*:string*/  = s;
    try {
        if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;
    } catch (e) {}
    var r = safe_decode_range(ws["!ref"] || "A1");
    if (r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
        r.e.c = Math.min(r.e.c, 0x3FFF);
        r.e.r = Math.min(r.e.c, 0xFFFFF);
    }
    ws["!links"] = [];
    /* passed back to write_zip and removed there */ ws["!comments"] = [];
    write_record(ba, 0x0081 /* BrtBeginSheet */ );
    if (wb.vbaraw || ws["!outline"]) write_record(ba, 0x0093 /* BrtWsProp */ , write_BrtWsProp(c, ws["!outline"]));
    write_record(ba, 0x0094 /* BrtWsDim */ , write_BrtWsDim(r));
    write_WSVIEWS2(ba, ws, wb.Workbook);
    write_WSFMTINFO(ba, ws);
    write_COLINFOS(ba, ws, idx, opts, wb);
    write_CELLTABLE(ba, ws, idx, opts, wb);
    /* [BrtSheetCalcProp] */ write_SHEETPROTECT(ba, ws);
    /* *([BrtRangeProtectionIso] BrtRangeProtection) */ /* [SCENMAN] */ write_AUTOFILTER(ba, ws, wb, idx);
    /* [SORTSTATE] */ /* [DCON] */ /* [USERSHVIEWS] */ write_MERGECELLS(ba, ws);
    /* [BrtPhoneticInfo] */ /* *CONDITIONALFORMATTING */ /* [DVALS] */ write_HLINKS(ba, ws, rels);
    /* [BrtPrintOptions] */ if (ws["!margins"]) write_record(ba, 0x01DC /* BrtMargins */ , write_BrtMargins(ws["!margins"]));
    /* [BrtPageSetup] */ /* [HEADERFOOTER] */ /* [RWBRK] */ /* [COLBRK] */ /* *BrtBigName */ /* [CELLWATCHES] */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);
    /* [SMARTTAGS] */ /* [BrtDrawing] */ write_LEGACYDRAWING(ba, ws, idx, rels);
    /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [OLEOBJECTS] */ /* [ACTIVEXCONTROLS] */ /* [WEBPUBITEMS] */ /* [LISTPARTS] */ /* FRTWORKSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );
    return ba.end();
}
function parse_Cache(data /*:string*/ ) /*:[Array<number|string>, string, ?string]*/ {
    var col /*:Array<number|string>*/  = [];
    var num = data.match(/^<c:numCache>/);
    var f;
    /* 21.2.2.150 pt CT_NumVal */ (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt) {
        var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
        if (!q) return;
        col[+q[1]] = num ? +q[2] : q[2];
    });
    /* 21.2.2.71 formatCode CT_Xstring */ var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || [
        "",
        "General"
    ])[1]);
    (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F) {
        f = F.replace(/<.*?>/g, "");
    });
    return [
        col,
        nf,
        f
    ];
}
/* 21.2 DrawingML - Charts */ function parse_chart(data /*:?string*/ , name /*:string*/ , opts, rels, wb, csheet) {
    var cs /*:Worksheet*/  = csheet || {
        "!type": "chart"
    };
    if (!data) return csheet;
    /* 21.2.2.27 chart CT_Chart */ var C = 0, R = 0, col = "A";
    var refguess = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    /* 21.2.2.120 numCache CT_NumData */ (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
        var cache = parse_Cache(nc);
        refguess.s.r = refguess.s.c = 0;
        refguess.e.c = C;
        col = encode_col(C);
        cache[0].forEach(function(n, i) {
            cs[col + encode_row(i)] = {
                t: "n",
                v: n,
                z: cache[1]
            };
            R = i;
        });
        if (refguess.e.r < R) refguess.e.r = R;
        ++C;
    });
    if (C > 0) cs["!ref"] = encode_range(refguess);
    return cs;
}
/* 18.3 Worksheets also covers Chartsheets */ function parse_cs_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {
    if (!data) return data;
    /* 18.3.1.12 chartsheet CT_ChartSheet */ if (!rels) rels = {
        "!id": {}
    };
    var s = {
        "!type": "chart",
        "!drawel": null,
        "!rel": ""
    } /*:any*/ ;
    var m;
    /* 18.3.1.83 sheetPr CT_ChartsheetPr */ var sheetPr = data.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    /* 18.3.1.36 drawing CT_Drawing */ if (m = data.match(/drawing r:id="(.*?)"/)) s["!rel"] = m[1];
    if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
    return s;
}
function write_cs_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("chartsheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
        })
    ];
    o[o.length] = writextag("drawing", null, {
        "r:id": "rId1"
    });
    add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
    if (o.length > 2) {
        o[o.length] = "</chartsheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.331 BrtCsProp */ function parse_BrtCsProp(data, length /*:number*/ ) {
    data.l += 10;
    var name = parse_XLWideString(data, length - 10);
    return {
        name: name
    };
}
/* [MS-XLSB] 2.1.7.7 Chart Sheet */ function parse_cs_bin(data, opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {
    if (!data) return data;
    if (!rels) rels = {
        "!id": {}
    };
    var s = {
        "!type": "chart",
        "!drawel": null,
        "!rel": ""
    };
    var state /*:Array<string>*/  = [];
    var pass = false;
    recordhopper(data, function cs_parse(val, R, RT) {
        switch(RT){
            case 0x0226:
                /* 'BrtDrawing' */ s["!rel"] = val;
                break;
            case 0x028B:
                /* 'BrtCsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                if (val.name) wb.Sheets[idx].CodeName = val.name;
                break;
            case 0x0232:
            /* 'BrtBkHim' */ case 0x028C:
            /* 'BrtCsPageSetup' */ case 0x029D:
            /* 'BrtCsProtection' */ case 0x02A7:
            /* 'BrtCsProtectionIso' */ case 0x0227:
            /* 'BrtLegacyDrawing' */ case 0x0228:
            /* 'BrtLegacyDrawingHF' */ case 0x01DC:
            /* 'BrtMargins' */ case 0x0C00:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                break;
            default:
                if (R.T > 0) state.push(RT);
                else if (R.T < 0) state.pop();
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
    return s;
}
function write_cs_bin() {
    var ba = buf_array();
    write_record(ba, 0x0081 /* BrtBeginSheet */ );
    /* [BrtCsProp] */ /* CSVIEWS */ /* [[BrtCsProtectionIso] BrtCsProtection] */ /* [USERCSVIEWS] */ /* [BrtMargins] */ /* [BrtCsPageSetup] */ /* [HEADERFOOTER] */ /* BrtDrawing */ /* [BrtLegacyDrawing] */ /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [WEBPUBITEMS] */ /* FRTCHARTSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );
    return ba.end();
}
/* 18.2.28 (CT_WorkbookProtection) Defaults */ var WBPropsDef = [
    [
        "allowRefreshQuery",
        false,
        "bool"
    ],
    [
        "autoCompressPictures",
        true,
        "bool"
    ],
    [
        "backupFile",
        false,
        "bool"
    ],
    [
        "checkCompatibility",
        false,
        "bool"
    ],
    [
        "CodeName",
        ""
    ],
    [
        "date1904",
        false,
        "bool"
    ],
    [
        "defaultThemeVersion",
        0,
        "int"
    ],
    [
        "filterPrivacy",
        false,
        "bool"
    ],
    [
        "hidePivotFieldList",
        false,
        "bool"
    ],
    [
        "promptedSolutions",
        false,
        "bool"
    ],
    [
        "publishItems",
        false,
        "bool"
    ],
    [
        "refreshAllConnections",
        false,
        "bool"
    ],
    [
        "saveExternalLinkValues",
        true,
        "bool"
    ],
    [
        "showBorderUnselectedTables",
        true,
        "bool"
    ],
    [
        "showInkAnnotation",
        true,
        "bool"
    ],
    [
        "showObjects",
        "all"
    ],
    [
        "showPivotChartFilter",
        false,
        "bool"
    ],
    [
        "updateLinks",
        "userSet"
    ]
];
/* 18.2.30 (CT_BookView) Defaults */ var WBViewDef = [
    [
        "activeTab",
        0,
        "int"
    ],
    [
        "autoFilterDateGrouping",
        true,
        "bool"
    ],
    [
        "firstSheet",
        0,
        "int"
    ],
    [
        "minimized",
        false,
        "bool"
    ],
    [
        "showHorizontalScroll",
        true,
        "bool"
    ],
    [
        "showSheetTabs",
        true,
        "bool"
    ],
    [
        "showVerticalScroll",
        true,
        "bool"
    ],
    [
        "tabRatio",
        600,
        "int"
    ],
    [
        "visibility",
        "visible"
    ]
];
/* 18.2.19 (CT_Sheet) Defaults */ var SheetDef = [];
/* 18.2.2  (CT_CalcPr) Defaults */ var CalcPrDef = [
    [
        "calcCompleted",
        "true"
    ],
    [
        "calcMode",
        "auto"
    ],
    [
        "calcOnSave",
        "true"
    ],
    [
        "concurrentCalc",
        "true"
    ],
    [
        "fullCalcOnLoad",
        "false"
    ],
    [
        "fullPrecision",
        "true"
    ],
    [
        "iterate",
        "false"
    ],
    [
        "iterateCount",
        "100"
    ],
    [
        "iterateDelta",
        "0.001"
    ],
    [
        "refMode",
        "A1"
    ]
];
/* 18.2.3 (CT_CustomWorkbookView) Defaults */ /*var CustomWBViewDef = [
	['autoUpdate', 'false'],
	['changesSavedWin', 'false'],
	['includeHiddenRowCol', 'true'],
	['includePrintSettings', 'true'],
	['maximized', 'false'],
	['minimized', 'false'],
	['onlySync', 'false'],
	['personalView', 'false'],
	['showComments', 'commIndicator'],
	['showFormulaBar', 'true'],
	['showHorizontalScroll', 'true'],
	['showObjects', 'all'],
	['showSheetTabs', 'true'],
	['showStatusbar', 'true'],
	['showVerticalScroll', 'true'],
	['tabRatio', '600'],
	['xWindow', '0'],
	['yWindow', '0']
];*/ function push_defaults_array(target, defaults) {
    for(var j = 0; j != target.length; ++j){
        var w = target[j];
        for(var i = 0; i != defaults.length; ++i){
            var z = defaults[i];
            if (w[z[0]] == null) w[z[0]] = z[1];
            else switch(z[2]){
                case "bool":
                    if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]);
                    break;
                case "int":
                    if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10);
                    break;
            }
        }
    }
}
function push_defaults(target, defaults) {
    for(var i = 0; i != defaults.length; ++i){
        var z = defaults[i];
        if (target[z[0]] == null) target[z[0]] = z[1];
        else switch(z[2]){
            case "bool":
                if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]);
                break;
            case "int":
                if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10);
                break;
        }
    }
}
function parse_wb_defaults(wb) {
    push_defaults(wb.WBProps, WBPropsDef);
    push_defaults(wb.CalcPr, CalcPrDef);
    push_defaults_array(wb.WBView, WBViewDef);
    push_defaults_array(wb.Sheets, SheetDef);
    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
}
function safe1904(wb /*:Workbook*/ ) /*:string*/ {
    /* TODO: store date1904 somewhere else */ if (!wb.Workbook) return "false";
    if (!wb.Workbook.WBProps) return "false";
    return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
}
var badchars = /*#__PURE__*/ "][*?/\\".split("");
function check_ws_name(n /*:string*/ , safe /*:?boolean*/ ) /*:boolean*/ {
    if (n.length > 31) {
        if (safe) return false;
        throw new Error("Sheet names cannot exceed 31 chars");
    }
    var _good = true;
    badchars.forEach(function(c) {
        if (n.indexOf(c) == -1) return;
        if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
        _good = false;
    });
    return _good;
}
function check_wb_names(N, S, codes) {
    N.forEach(function(n, i) {
        check_ws_name(n);
        for(var j = 0; j < i; ++j)if (n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
        if (codes) {
            var cn = S && S[i] && S[i].CodeName || n;
            if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
        }
    });
}
function check_wb(wb) {
    if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
    if (!wb.SheetNames.length) throw new Error("Workbook is empty");
    var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
    check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
    for(var i = 0; i < wb.SheetNames.length; ++i)check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
/* TODO: validate workbook */ }
/* 18.2 Workbook */ var wbnsregex = /<\w+:workbook/;
function parse_wb_xml(data, opts) /*:WorkbookFile*/ {
    if (!data) throw new Error("Could not find file");
    var wb = /*::(*/ {
        AppVersion: {},
        WBProps: {},
        WBView: [],
        Sheets: [],
        CalcPr: {},
        Names: [],
        xmlns: ""
    } /*::)*/ ;
    var pass = false, xmlns = "xmlns";
    var dname = {}, dnstart = 0;
    data.replace(tagregex, function xml_wb(x, idx) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 18.2.27 workbook CT_Workbook 1 */ case "<workbook":
                if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
                wb.xmlns = y[xmlns];
                break;
            case "</workbook>":
                break;
            /* 18.2.13 fileVersion CT_FileVersion ? */ case "<fileVersion":
                delete y[0];
                wb.AppVersion = y;
                break;
            case "<fileVersion/>":
            case "</fileVersion>":
                break;
            /* 18.2.12 fileSharing CT_FileSharing ? */ case "<fileSharing":
                break;
            case "<fileSharing/>":
                break;
            /* 18.2.28 workbookPr CT_WorkbookPr ? */ case "<workbookPr":
            case "<workbookPr/>":
                WBPropsDef.forEach(function(w) {
                    if (y[w[0]] == null) return;
                    switch(w[2]){
                        case "bool":
                            wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                            break;
                        case "int":
                            wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                            break;
                        default:
                            wb.WBProps[w[0]] = y[w[0]];
                    }
                });
                if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
                break;
            case "</workbookPr>":
                break;
            /* 18.2.29 workbookProtection CT_WorkbookProtection ? */ case "<workbookProtection":
                break;
            case "<workbookProtection/>":
                break;
            /* 18.2.1  bookViews CT_BookViews ? */ case "<bookViews":
            case "<bookViews>":
            case "</bookViews>":
                break;
            /* 18.2.30   workbookView CT_BookView + */ case "<workbookView":
            case "<workbookView/>":
                delete y[0];
                wb.WBView.push(y);
                break;
            case "</workbookView>":
                break;
            /* 18.2.20 sheets CT_Sheets 1 */ case "<sheets":
            case "<sheets>":
            case "</sheets>":
                break; // aggregate sheet
            /* 18.2.19   sheet CT_Sheet + */ case "<sheet":
                switch(y.state){
                    case "hidden":
                        y.Hidden = 1;
                        break;
                    case "veryHidden":
                        y.Hidden = 2;
                        break;
                    default:
                        y.Hidden = 0;
                }
                delete y.state;
                y.name = unescapexml(utf8read(y.name));
                delete y[0];
                wb.Sheets.push(y);
                break;
            case "</sheet>":
                break;
            /* 18.2.15 functionGroups CT_FunctionGroups ? */ case "<functionGroups":
            case "<functionGroups/>":
                break;
            /* 18.2.14   functionGroup CT_FunctionGroup + */ case "<functionGroup":
                break;
            /* 18.2.9  externalReferences CT_ExternalReferences ? */ case "<externalReferences":
            case "</externalReferences>":
            case "<externalReferences>":
                break;
            /* 18.2.8    externalReference CT_ExternalReference + */ case "<externalReference":
                break;
            /* 18.2.6  definedNames CT_DefinedNames ? */ case "<definedNames/>":
                break;
            case "<definedNames>":
            case "<definedNames":
                pass = true;
                break;
            case "</definedNames>":
                pass = false;
                break;
            /* 18.2.5    definedName CT_DefinedName + */ case "<definedName":
                dname = {};
                dname.Name = utf8read(y.name);
                if (y.comment) dname.Comment = y.comment;
                if (y.localSheetId) dname.Sheet = +y.localSheetId;
                if (parsexmlbool(y.hidden || "0")) dname.Hidden = true;
                dnstart = idx + x.length;
                break;
            case "</definedName>":
                dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                wb.Names.push(dname);
                break;
            case "<definedName/>":
                break;
            /* 18.2.2  calcPr CT_CalcPr ? */ case "<calcPr":
                delete y[0];
                wb.CalcPr = y;
                break;
            case "<calcPr/>":
                delete y[0];
                wb.CalcPr = y;
                break;
            case "</calcPr>":
                break;
            /* 18.2.16 oleSize CT_OleSize ? (ref required) */ case "<oleSize":
                break;
            /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */ case "<customWorkbookViews>":
            case "</customWorkbookViews>":
            case "<customWorkbookViews":
                break;
            /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */ case "<customWorkbookView":
            case "</customWorkbookView>":
                break;
            /* 18.2.18 pivotCaches CT_PivotCaches ? */ case "<pivotCaches>":
            case "</pivotCaches>":
            case "<pivotCaches":
                break;
            /* 18.2.17 pivotCache CT_PivotCache ? */ case "<pivotCache":
                break;
            /* 18.2.21 smartTagPr CT_SmartTagPr ? */ case "<smartTagPr":
            case "<smartTagPr/>":
                break;
            /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */ case "<smartTagTypes":
            case "<smartTagTypes>":
            case "</smartTagTypes>":
                break;
            /* 18.2.22 smartTagType CT_SmartTagType ? */ case "<smartTagType":
                break;
            /* 18.2.24 webPublishing CT_WebPublishing ? */ case "<webPublishing":
            case "<webPublishing/>":
                break;
            /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */ case "<fileRecoveryPr":
            case "<fileRecoveryPr/>":
                break;
            /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */ case "<webPublishObjects>":
            case "<webPublishObjects":
            case "</webPublishObjects>":
                break;
            /* 18.2.25 webPublishObject CT_WebPublishObject ? */ case "<webPublishObject":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break; //TODO: check with versions of excel
            case "</ext>":
                pass = false;
                break;
            /* Others */ case "<ArchID":
                break;
            case "<AlternateContent":
            case "<AlternateContent>":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* TODO */ case "<revisionPtr":
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in workbook");
        }
        return x;
    });
    if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
    parse_wb_defaults(wb);
    return wb;
}
function write_wb_xml(wb /*:Workbook*/  /*::, opts:?WriteOpts*/ ) /*:string*/ {
    var o = [
        XML_HEADER
    ];
    o[o.length] = writextag("workbook", null, {
        "xmlns": XMLNS_main[0],
        //'xmlns:mx': XMLNS.mx,
        //'xmlns:s': XMLNS_main[0],
        "xmlns:r": XMLNS.r
    });
    var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
    /* fileVersion */ /* fileSharing */ var workbookPr /*:any*/  = {
        codeName: "ThisWorkbook"
    } /*:any*/ ;
    if (wb.Workbook && wb.Workbook.WBProps) {
        WBPropsDef.forEach(function(x) {
            /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */ if (wb.Workbook.WBProps[x[0]] == null) return;
            if (wb.Workbook.WBProps[x[0]] == x[1]) return;
            workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
        });
        /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */ if (wb.Workbook.WBProps.CodeName) {
            workbookPr.codeName = wb.Workbook.WBProps.CodeName;
            delete workbookPr.CodeName;
        }
    }
    o[o.length] = writextag("workbookPr", null, workbookPr);
    /* workbookProtection */ var sheets = wb.Workbook && wb.Workbook.Sheets || [];
    var i = 0;
    /* bookViews only written if first worksheet is hidden */ if (sheets && sheets[0] && !!sheets[0].Hidden) {
        o[o.length] = "<bookViews>";
        for(i = 0; i != wb.SheetNames.length; ++i){
            if (!sheets[i]) break;
            if (!sheets[i].Hidden) break;
        }
        if (i == wb.SheetNames.length) i = 0;
        o[o.length] = '<workbookView firstSheet="' + i + '" activeTab="' + i + '"/>';
        o[o.length] = "</bookViews>";
    }
    o[o.length] = "<sheets>";
    for(i = 0; i != wb.SheetNames.length; ++i){
        var sht = {
            name: escapexml(wb.SheetNames[i].slice(0, 31))
        } /*:any*/ ;
        sht.sheetId = "" + (i + 1);
        sht["r:id"] = "rId" + (i + 1);
        if (sheets[i]) switch(sheets[i].Hidden){
            case 1:
                sht.state = "hidden";
                break;
            case 2:
                sht.state = "veryHidden";
                break;
        }
        o[o.length] = writextag("sheet", null, sht);
    }
    o[o.length] = "</sheets>";
    /* functionGroups */ /* externalReferences */ if (write_names) {
        o[o.length] = "<definedNames>";
        if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {
            var d /*:any*/  = {
                name: n.Name
            };
            if (n.Comment) d.comment = n.Comment;
            if (n.Sheet != null) d.localSheetId = "" + n.Sheet;
            if (n.Hidden) d.hidden = "1";
            if (!n.Ref) return;
            o[o.length] = writextag("definedName", escapexml(n.Ref), d);
        });
        o[o.length] = "</definedNames>";
    }
    /* calcPr */ /* oleSize */ /* customWorkbookViews */ /* pivotCaches */ /* smartTagPr */ /* smartTagTypes */ /* webPublishing */ /* fileRecoveryPr */ /* webPublishObjects */ /* extLst */ if (o.length > 2) {
        o[o.length] = "</workbook>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.304 BrtBundleSh */ function parse_BrtBundleSh(data, length /*:number*/ ) {
    var z = {};
    z.Hidden = data.read_shift(4); //hsState ST_SheetState
    z.iTabID = data.read_shift(4);
    z.strRelID = parse_RelID(data, length - 8);
    z.name = parse_XLWideString(data);
    return z;
}
function write_BrtBundleSh(data, o) {
    if (!o) o = new_buf(127);
    o.write_shift(4, data.Hidden);
    o.write_shift(4, data.iTabID);
    write_RelID(data.strRelID, o);
    write_XLWideString(data.name.slice(0, 31), o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.815 BrtWbProp */ function parse_BrtWbProp(data, length) /*:WBProps*/ {
    var o /*:WBProps*/  = {} /*:any*/ ;
    var flags = data.read_shift(4);
    o.defaultThemeVersion = data.read_shift(4);
    var strName = length > 8 ? parse_XLWideString(data) : "";
    if (strName.length > 0) o.CodeName = strName;
    o.autoCompressPictures = !!(flags & 0x10000);
    o.backupFile = !!(flags & 0x40);
    o.checkCompatibility = !!(flags & 0x1000);
    o.date1904 = !!(flags & 0x01);
    o.filterPrivacy = !!(flags & 0x08);
    o.hidePivotFieldList = !!(flags & 0x400);
    o.promptedSolutions = !!(flags & 0x10);
    o.publishItems = !!(flags & 0x800);
    o.refreshAllConnections = !!(flags & 0x40000);
    o.saveExternalLinkValues = !!(flags & 0x80);
    o.showBorderUnselectedTables = !!(flags & 0x04);
    o.showInkAnnotation = !!(flags & 0x20);
    o.showObjects = [
        "all",
        "placeholders",
        "none"
    ][flags >> 13 & 0x03];
    o.showPivotChartFilter = !!(flags & 0x8000);
    o.updateLinks = [
        "userSet",
        "never",
        "always"
    ][flags >> 8 & 0x03];
    return o;
}
function write_BrtWbProp(data /*:?WBProps*/ , o) {
    if (!o) o = new_buf(72);
    var flags = 0;
    if (data) /* TODO: mirror parse_BrtWbProp fields */ {
        if (data.filterPrivacy) flags |= 0x08;
    }
    o.write_shift(4, flags);
    o.write_shift(4, 0);
    write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
    return o.slice(0, o.l);
}
function parse_BrtFRTArchID$(data, length) {
    var o = {};
    data.read_shift(4);
    o.ArchID = data.read_shift(4);
    data.l += length - 8;
    return o;
}
/* [MS-XLSB] 2.4.687 BrtName */ function parse_BrtName(data, length, opts) {
    var end = data.l + length;
    data.l += 4; //var flags = data.read_shift(4);
    data.l += 1; //var chKey = data.read_shift(1);
    var itab = data.read_shift(4);
    var name = parse_XLNameWideString(data);
    var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    var comment = parse_XLNullableWideString(data);
    //if(0 /* fProc */) {
    // unusedstring1: XLNullableWideString
    // description: XLNullableWideString
    // helpTopic: XLNullableWideString
    // unusedstring2: XLNullableWideString
    //}
    data.l = end;
    var out = {
        Name: name,
        Ptg: formula
    } /*:any*/ ;
    if (itab < 0xFFFFFFF) out.Sheet = itab;
    if (comment) out.Comment = comment;
    return out;
}
/* [MS-XLSB] 2.1.7.61 Workbook */ function parse_wb_bin(data, opts) /*:WorkbookFile*/ {
    var wb = {
        AppVersion: {},
        WBProps: {},
        WBView: [],
        Sheets: [],
        CalcPr: {},
        xmlns: ""
    };
    var state /*:Array<string>*/  = [];
    var pass = false;
    if (!opts) opts = {};
    opts.biff = 12;
    var Names = [];
    var supbooks = [
        []
    ];
    supbooks.SheetNames = [];
    supbooks.XTI = [];
    XLSBRecordEnum[0x0010] = {
        n: "BrtFRTArchID$",
        f: parse_BrtFRTArchID$
    };
    recordhopper(data, function hopper_wb(val, R, RT) {
        switch(RT){
            case 0x009C:
                /* 'BrtBundleSh' */ supbooks.SheetNames.push(val.name);
                wb.Sheets.push(val);
                break;
            case 0x0099:
                /* 'BrtWbProp' */ wb.WBProps = val;
                break;
            case 0x0027:
                /* 'BrtName' */ if (val.Sheet != null) opts.SID = val.Sheet;
                val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
                delete opts.SID;
                delete val.Ptg;
                Names.push(val);
                break;
            case 0x040C:
                break;
            case 0x0165:
            /* 'BrtSupSelf' */ case 0x0166:
            /* 'BrtSupSame' */ case 0x0163:
            /* 'BrtSupBookSrc' */ case 0x029B:
                /* 'BrtSupAddin' */ if (!supbooks[0].length) supbooks[0] = [
                    RT,
                    val
                ];
                else supbooks.push([
                    RT,
                    val
                ]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
            case 0x016A:
                /* 'BrtExternSheet' */ if (supbooks.length === 0) {
                    supbooks[0] = [];
                    supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                supbooks.XTI = supbooks.XTI.concat(val);
                break;
            case 0x0169:
                break;
            case 0x0817:
            /* 'BrtAbsPath15' */ case 0x009E:
            /* 'BrtBookView' */ case 0x008F:
            /* 'BrtBeginBundleShs' */ case 0x0298:
            /* 'BrtBeginFnGroup' */ case 0x0161:
                break;
            /* case 'BrtModelTimeGroupingCalcCol' */ case 0x0C00:
            /* 'BrtUid' */ case 0x0C01:
            /* 'BrtRevisionPtr' */ case 0x0216:
            /* 'BrtBookProtection' */ case 0x02A5:
            /* 'BrtBookProtectionIso' */ case 0x009D:
            /* 'BrtCalcProp' */ case 0x0262:
            /* 'BrtCrashRecErr' */ case 0x0802:
            /* 'BrtDecoupledPivotCacheID' */ case 0x009B:
            /* 'BrtFileRecover' */ case 0x0224:
            /* 'BrtFileSharing' */ case 0x02A4:
            /* 'BrtFileSharingIso' */ case 0x0080:
            /* 'BrtFileVersion' */ case 0x0299:
            /* 'BrtFnGroup' */ case 0x0850:
            /* 'BrtModelRelationship' */ case 0x084D:
            /* 'BrtModelTable' */ case 0x0225:
            /* 'BrtOleSize' */ case 0x0805:
            /* 'BrtPivotTableRef' */ case 0x0254:
            /* 'BrtSmartTagType' */ case 0x081C:
            /* 'BrtTableSlicerCacheID' */ case 0x081B:
            /* 'BrtTableSlicerCacheIDs' */ case 0x0822:
            /* 'BrtTimelineCachePivotCacheID' */ case 0x018D:
            /* 'BrtUserBookView' */ case 0x009A:
            /* 'BrtWbFactoid' */ case 0x045D:
            /* 'BrtWbProp14' */ case 0x0229:
            /* 'BrtWebOpt' */ case 0x082B:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ state.pop();
                pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                pass = false;
                break;
            case 0x0010:
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */  && state[state.length - 1] != 0x0023 /* BrtFRTBegin */ ) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    parse_wb_defaults(wb);
    // $FlowIgnore
    wb.Names = Names;
    wb /*:any*/ .supbooks = supbooks;
    return wb;
}
function write_BUNDLESHS(ba, wb /*::, opts*/ ) {
    write_record(ba, 0x008F /* BrtBeginBundleShs */ );
    for(var idx = 0; idx != wb.SheetNames.length; ++idx){
        var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
        var d = {
            Hidden: viz,
            iTabID: idx + 1,
            strRelID: "rId" + (idx + 1),
            name: wb.SheetNames[idx]
        };
        write_record(ba, 0x009C /* BrtBundleSh */ , write_BrtBundleSh(d));
    }
    write_record(ba, 0x0090 /* BrtEndBundleShs */ );
}
/* [MS-XLSB] 2.4.649 BrtFileVersion */ function write_BrtFileVersion(data, o) {
    if (!o) o = new_buf(127);
    for(var i = 0; i != 4; ++i)o.write_shift(4, 0);
    write_XLWideString("SheetJS", o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString("7262", o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.301 BrtBookView */ function write_BrtBookView(idx, o) {
    if (!o) o = new_buf(29);
    o.write_shift(-4, 0);
    o.write_shift(-4, 460);
    o.write_shift(4, 28800);
    o.write_shift(4, 17600);
    o.write_shift(4, 500);
    o.write_shift(4, idx);
    o.write_shift(4, idx);
    var flags = 0x78;
    o.write_shift(1, flags);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function write_BOOKVIEWS(ba, wb /*::, opts*/ ) {
    /* required if hidden tab appears before visible tab */ if (!wb.Workbook || !wb.Workbook.Sheets) return;
    var sheets = wb.Workbook.Sheets;
    var i = 0, vistab = -1, hidden = -1;
    for(; i < sheets.length; ++i){
        if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;
        else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;
    }
    if (hidden > vistab) return;
    write_record(ba, 0x0087 /* BrtBeginBookViews */ );
    write_record(ba, 0x009E /* BrtBookView */ , write_BrtBookView(vistab));
    /* 1*(BrtBookView *FRT) */ write_record(ba, 0x0088 /* BrtEndBookViews */ );
}
/* [MS-XLSB] 2.4.305 BrtCalcProp */ /*function write_BrtCalcProp(data, o) {
	if(!o) o = new_buf(26);
	o.write_shift(4,0); // force recalc
	o.write_shift(4,1);
	o.write_shift(4,0);
	write_Xnum(0, o);
	o.write_shift(-4, 1023);
	o.write_shift(1, 0x33);
	o.write_shift(1, 0x00);
	return o;
}*/ /* [MS-XLSB] 2.4.646 BrtFileRecover */ /*function write_BrtFileRecover(data, o) {
	if(!o) o = new_buf(1);
	o.write_shift(1,0);
	return o;
}*/ /* [MS-XLSB] 2.1.7.61 Workbook */ function write_wb_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, 0x0083 /* BrtBeginBook */ );
    write_record(ba, 0x0080 /* BrtFileVersion */ , write_BrtFileVersion());
    /* [[BrtFileSharingIso] BrtFileSharing] */ write_record(ba, 0x0099 /* BrtWbProp */ , write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
    /* [ACABSPATH] */ /* [[BrtBookProtectionIso] BrtBookProtection] */ write_BOOKVIEWS(ba, wb, opts);
    write_BUNDLESHS(ba, wb, opts);
    /* [FNGROUP] */ /* [EXTERNALS] */ /* *BrtName */ /* write_record(ba, 0x009D BrtCalcProp, write_BrtCalcProp()); */ /* [BrtOleSize] */ /* *(BrtUserBookView *FRT) */ /* [PIVOTCACHEIDS] */ /* [BrtWbFactoid] */ /* [SMARTTAGTYPES] */ /* [BrtWebOpt] */ /* write_record(ba, 0x009B BrtFileRecover, write_BrtFileRecover()); */ /* [WEBPUBITEMS] */ /* [CRERRS] */ /* FRTWORKBOOK */ write_record(ba, 0x0084 /* BrtEndBook */ );
    return ba.end();
}
function parse_wb(data, name /*:string*/ , opts) /*:WorkbookFile*/ {
    if (name.slice(-4) === ".bin") return parse_wb_bin(data /*:any*/ , opts);
    return parse_wb_xml(data /*:any*/ , opts);
}
function parse_ws(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ws_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ws_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_cs(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_cs_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_cs_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_ms(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ms_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ms_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_ds(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ds_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ds_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_sty(data, name /*:string*/ , themes, opts) {
    if (name.slice(-4) === ".bin") return parse_sty_bin(data /*:any*/ , themes, opts);
    return parse_sty_xml(data /*:any*/ , themes, opts);
}
function parse_theme(data /*:string*/ , name /*:string*/ , opts) {
    return parse_theme_xml(data, opts);
}
function parse_sst(data, name /*:string*/ , opts) /*:SST*/ {
    if (name.slice(-4) === ".bin") return parse_sst_bin(data /*:any*/ , opts);
    return parse_sst_xml(data /*:any*/ , opts);
}
function parse_cmnt(data, name /*:string*/ , opts) /*:Array<RawComment>*/ {
    if (name.slice(-4) === ".bin") return parse_comments_bin(data /*:any*/ , opts);
    return parse_comments_xml(data /*:any*/ , opts);
}
function parse_cc(data, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_cc_bin(data /*:any*/ , name, opts);
    return parse_cc_xml(data /*:any*/ , name, opts);
}
function parse_xlink(data, rel, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_xlink_bin(data /*:any*/ , rel, name, opts);
    return parse_xlink_xml(data /*:any*/ , rel, name, opts);
}
function parse_xlmeta(data, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_xlmeta_bin(data /*:any*/ , name, opts);
    return parse_xlmeta_xml(data /*:any*/ , name, opts);
}
function write_wb(wb, name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
}
function write_ws(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {
    return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
}
// eslint-disable-next-line no-unused-vars
function write_cs(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {
    return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
}
function write_sty(data, name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
}
function write_sst(data /*:SST*/ , name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
}
function write_cmnt(data /*:Array<any>*/ , name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
}
/*
function write_cc(data, name:string, opts) {
	return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
}
*/ function write_xlmeta(name /*:string*/ ) {
    return (name.slice(-4) === ".bin" ? write_xlmeta_bin : write_xlmeta_xml)();
}
var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
function xlml_parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ ) {
    var words = tag.split(/\s+/);
    var z /*:any*/  = [];
    if (!skip_root) z[0] = words[0];
    if (words.length === 1) return z;
    var m = tag.match(attregexg2), y, j, w, i;
    if (m) for(i = 0; i != m.length; ++i){
        y = m[i].match(attregex2);
        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
        else {
            if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
            else w = y[1].slice(j + 1);
            z[w] = y[2].slice(1, y[2].length - 1);
        }
    }
    return z;
}
function xlml_parsexmltagobj(tag /*:string*/ ) {
    var words = tag.split(/\s+/);
    var z = {};
    if (words.length === 1) return z;
    var m = tag.match(attregexg2), y, j, w, i;
    if (m) for(i = 0; i != m.length; ++i){
        y = m[i].match(attregex2);
        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
        else {
            if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
            else w = y[1].slice(j + 1);
            z[w] = y[2].slice(1, y[2].length - 1);
        }
    }
    return z;
}
// ----
/* map from xlml named formats to SSF TODO: localize */ var XLMLFormatMap /*: {[string]:string}*/ ;
function xlml_format(format, value) /*:string*/ {
    var fmt = XLMLFormatMap[format] || unescapexml(format);
    if (fmt === "General") return SSF_general(value);
    return SSF_format(fmt, value);
}
function xlml_set_custprop(Custprops, key, cp, val /*:string*/ ) {
    var oval /*:any*/  = val;
    switch((cp[0].match(/dt:dt="([\w.]+)"/) || [
        "",
        ""
    ])[1]){
        case "boolean":
            oval = parsexmlbool(val);
            break;
        case "i2":
        case "int":
            oval = parseInt(val, 10);
            break;
        case "r4":
        case "float":
            oval = parseFloat(val);
            break;
        case "date":
        case "dateTime.tz":
            oval = parseDate(val);
            break;
        case "i8":
        case "string":
        case "fixed":
        case "uuid":
        case "bin.base64":
            break;
        default:
            throw new Error("bad custprop:" + cp[0]);
    }
    Custprops[unescapexml(key)] = oval;
}
function safe_format_xlml(cell /*:Cell*/ , nf, o) {
    if (cell.t === "z") return;
    if (!o || o.cellText !== false) try {
        if (cell.t === "e") cell.w = cell.w || BErr[cell.v];
        else if (nf === "General") {
            if (cell.t === "n") {
                if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);
                else cell.w = SSF_general_num(cell.v);
            } else cell.w = SSF_general(cell.v);
        } else cell.w = xlml_format(nf || "General", cell.v);
    } catch (e) {
        if (o.WTF) throw e;
    }
    try {
        var z = XLMLFormatMap[nf] || nf || "General";
        if (o.cellNF) cell.z = z;
        if (o.cellDates && cell.t == "n" && fmt_is_date(z)) {
            var _d = SSF_parse_date_code(cell.v);
            if (_d) {
                cell.t = "d";
                cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
        }
    } catch (e) {
        if (o.WTF) throw e;
    }
}
function process_style_xlml(styles, stag, opts) {
    if (opts.cellStyles) {
        if (stag.Interior) {
            var I = stag.Interior;
            if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
        }
    }
    styles[stag.ID] = stag;
}
/* TODO: there must exist some form of OSP-blessed spec */ function parse_xlml_data(xml, ss, data, cell /*:any*/ , base, styles, csty, row, arrayf, o) {
    var nf = "General", sid = cell.StyleID, S = {};
    o = o || {};
    var interiors = [];
    var i = 0;
    if (sid === undefined && row) sid = row.StyleID;
    if (sid === undefined && csty) sid = csty.StyleID;
    while(styles[sid] !== undefined){
        if (styles[sid].nf) nf = styles[sid].nf;
        if (styles[sid].Interior) interiors.push(styles[sid].Interior);
        if (!styles[sid].Parent) break;
        sid = styles[sid].Parent;
    }
    switch(data.Type){
        case "Boolean":
            cell.t = "b";
            cell.v = parsexmlbool(xml);
            break;
        case "String":
            cell.t = "s";
            cell.r = xlml_fixstr(unescapexml(xml));
            cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r; // todo: BR etc
            break;
        case "DateTime":
            if (xml.slice(-1) != "Z") xml += "Z";
            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / 86400000;
            if (cell.v !== cell.v) cell.v = unescapexml(xml);
            else if (cell.v < 60) cell.v = cell.v - 1;
            if (!nf || nf == "General") nf = "yyyy-mm-dd";
        /* falls through */ case "Number":
            if (cell.v === undefined) cell.v = +xml;
            if (!cell.t) cell.t = "n";
            break;
        case "Error":
            cell.t = "e";
            cell.v = RBErr[xml];
            if (o.cellText !== false) cell.w = xml;
            break;
        default:
            if (xml == "" && ss == "") cell.t = "z";
            else {
                cell.t = "s";
                cell.v = xlml_fixstr(ss || xml);
            }
            break;
    }
    safe_format_xlml(cell, nf, o);
    if (o.cellFormula !== false) {
        if (cell.Formula) {
            var fstr = unescapexml(cell.Formula);
            /* strictly speaking, the leading = is required but some writers omit */ if (fstr.charCodeAt(0) == 61 /* = */ ) fstr = fstr.slice(1);
            cell.f = rc_to_a1(fstr, base);
            delete cell.Formula;
            if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
            else if (cell.ArrayRange) {
                cell.F = rc_to_a1(cell.ArrayRange, base);
                arrayf.push([
                    safe_decode_range(cell.F),
                    cell.F
                ]);
            }
        } else {
            for(i = 0; i < arrayf.length; ++i)if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) {
                if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];
            }
        }
    }
    if (o.cellStyles) {
        interiors.forEach(function(x) {
            if (!S.patternType && x.patternType) S.patternType = x.patternType;
        });
        cell.s = S;
    }
    if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
}
function xlml_clean_comment(comment /*:any*/ ) {
    comment.t = comment.v || "";
    comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    comment.v = comment.w = comment.ixfe = undefined;
}
/* TODO: Everything */ function parse_xlml_xml(d, _opts) /*:Workbook*/ {
    var opts = _opts || {};
    make_ssf();
    var str = debom(xlml_normalize(d));
    if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
        if (typeof $cptable !== "undefined") str = $cptable.utils.decode(65001, char_codes(str));
        else str = utf8read(str);
    }
    var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
    opening = opening.replace(/".*?"/g, "");
    if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
        var _o = dup(opts);
        _o.type = "string";
        return PRN.to_workbook(str, _o);
    }
    if (opening.indexOf("<?xml") == -1) [
        "html",
        "table",
        "head",
        "meta",
        "script",
        "style",
        "div"
    ].forEach(function(tag) {
        if (opening.indexOf("<" + tag) >= 0) ishtml = true;
    });
    if (ishtml) return html_to_workbook(str, opts);
    XLMLFormatMap = {
        "General Number": "General",
        "General Date": table_fmt[22],
        "Long Date": "dddd, mmmm dd, yyyy",
        "Medium Date": table_fmt[15],
        "Short Date": table_fmt[14],
        "Long Time": table_fmt[19],
        "Medium Time": table_fmt[18],
        "Short Time": table_fmt[20],
        "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "Fixed": table_fmt[2],
        "Standard": table_fmt[4],
        "Percent": table_fmt[10],
        "Scientific": table_fmt[11],
        "Yes/No": '"Yes";"Yes";"No";@',
        "True/False": '"True";"True";"False";@',
        "On/Off": '"Yes";"Yes";"No";@'
    } /*:any*/ ;
    var Rn;
    var state = [], tmp;
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var sheets = {}, sheetnames /*:Array<string>*/  = [], cursheet /*:Worksheet*/  = opts.dense ? [] : {}, sheetname = "";
    var cell = {} /*:any*/ , row = {}; // eslint-disable-line no-unused-vars
    var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
    var c = 0, r = 0;
    var refguess /*:Range*/  = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var styles = {}, stag = {};
    var ss = "", fidx = 0;
    var merges /*:Array<Range>*/  = [];
    var Props = {}, Custprops = {}, pidx = 0, cp = [];
    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;
    var cstys = [], csty, seencol = false;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var rowinfo /*:Array<RowInfo>*/  = [], rowobj = {}, cc = 0, rr = 0;
    var Workbook /*:WBWBProps*/  = {
        Sheets: [],
        WBProps: {
            date1904: false
        }
    } /*:any*/ , wsprops = {};
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "");
    var raw_Rn3 = "";
    while(Rn = xlmlregex.exec(str))switch(Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()){
        case "data" /*case 'Data'*/ :
            if (raw_Rn3 == "data") {
                if (Rn[1] === "/") {
                    if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                    Rn[3],
                    true
                ]);
                break;
            }
            if (state[state.length - 1][1]) break;
            if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == /*"Comment"*/ "comment" ? comment : cell, {
                c: c,
                r: r
            }, styles, cstys[c], row, arrayf, opts);
            else {
                ss = "";
                dtag = xlml_parsexmltag(Rn[0]);
                didx = Rn.index + Rn[0].length;
            }
            break;
        case "cell" /*case 'Cell'*/ :
            if (Rn[1] === "/") {
                if (comments.length > 0) cell.c = comments;
                if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
                    if (opts.dense) {
                        if (!cursheet[r]) cursheet[r] = [];
                        cursheet[r][c] = cell;
                    } else cursheet[encode_col(c) + encode_row(r)] = cell;
                }
                if (cell.HRef) {
                    cell.l = {
                        Target: unescapexml(cell.HRef)
                    } /*:any*/ ;
                    if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
                    delete cell.HRef;
                    delete cell.HRefScreenTip;
                }
                if (cell.MergeAcross || cell.MergeDown) {
                    cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                    rr = r + (parseInt(cell.MergeDown, 10) | 0);
                    merges.push({
                        s: {
                            c: c,
                            r: r
                        },
                        e: {
                            c: cc,
                            r: rr
                        }
                    });
                }
                if (!opts.sheetStubs) {
                    if (cell.MergeAcross) c = cc + 1;
                    else ++c;
                } else if (cell.MergeAcross || cell.MergeDown) {
                    /*:: if(!cc) cc = 0; if(!rr) rr = 0; */ for(var cma = c; cma <= cc; ++cma){
                        for(var cmd = r; cmd <= rr; ++cmd)if (cma > c || cmd > r) {
                            if (opts.dense) {
                                if (!cursheet[cmd]) cursheet[cmd] = [];
                                cursheet[cmd][cma] = {
                                    t: "z"
                                };
                            } else cursheet[encode_col(cma) + encode_row(cmd)] = {
                                t: "z"
                            };
                        }
                    }
                    c = cc + 1;
                } else ++c;
            } else {
                cell = xlml_parsexmltagobj(Rn[0]);
                if (cell.Index) c = +cell.Index - 1;
                if (c < refguess.s.c) refguess.s.c = c;
                if (c > refguess.e.c) refguess.e.c = c;
                if (Rn[0].slice(-2) === "/>") ++c;
                comments = [];
            }
            break;
        case "row" /*case 'Row'*/ :
            if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
                if (r < refguess.s.r) refguess.s.r = r;
                if (r > refguess.e.r) refguess.e.r = r;
                if (Rn[0].slice(-2) === "/>") {
                    row = xlml_parsexmltag(Rn[0]);
                    if (row.Index) r = +row.Index - 1;
                }
                c = 0;
                ++r;
            } else {
                row = xlml_parsexmltag(Rn[0]);
                if (row.Index) r = +row.Index - 1;
                rowobj = {};
                if (row.AutoFitHeight == "0" || row.Height) {
                    rowobj.hpx = parseInt(row.Height, 10);
                    rowobj.hpt = px2pt(rowobj.hpx);
                    rowinfo[r] = rowobj;
                }
                if (row.Hidden == "1") {
                    rowobj.hidden = true;
                    rowinfo[r] = rowobj;
                }
            }
            break;
        case "worksheet" /*case 'Worksheet'*/ :
            /* TODO: read range from FullRows/FullColumns */ if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                sheetnames.push(sheetname);
                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                    cursheet["!ref"] = encode_range(refguess);
                    if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                        cursheet["!fullref"] = cursheet["!ref"];
                        refguess.e.r = opts.sheetRows - 1;
                        cursheet["!ref"] = encode_range(refguess);
                    }
                }
                if (merges.length) cursheet["!merges"] = merges;
                if (cstys.length > 0) cursheet["!cols"] = cstys;
                if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
                sheets[sheetname] = cursheet;
            } else {
                refguess = {
                    s: {
                        r: 2000000,
                        c: 2000000
                    },
                    e: {
                        r: 0,
                        c: 0
                    }
                };
                r = c = 0;
                state.push([
                    Rn[3],
                    false
                ]);
                tmp = xlml_parsexmltag(Rn[0]);
                sheetname = unescapexml(tmp.Name);
                cursheet = opts.dense ? [] : {};
                merges = [];
                arrayf = [];
                rowinfo = [];
                wsprops = {
                    name: sheetname,
                    Hidden: 0
                };
                Workbook.Sheets.push(wsprops);
            }
            break;
        case "table" /*case 'Table'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].slice(-2) == "/>") break;
            else {
                state.push([
                    Rn[3],
                    false
                ]);
                cstys = [];
                seencol = false;
            }
            break;
        case "style" /*case 'Style'*/ :
            if (Rn[1] === "/") process_style_xlml(styles, stag, opts);
            else stag = xlml_parsexmltag(Rn[0]);
            break;
        case "numberformat" /*case 'NumberFormat'*/ :
            stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
            if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
            for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == stag.nf) break;
            if (ssfidx == 0x188) {
                for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == null) {
                    SSF_load(stag.nf, ssfidx);
                    break;
                }
            }
            break;
        case "column" /*case 'Column'*/ :
            if (state[state.length - 1][0] !== /*'Table'*/ "table") break;
            csty = xlml_parsexmltag(Rn[0]);
            if (csty.Hidden) {
                csty.hidden = true;
                delete csty.Hidden;
            }
            if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
            if (!seencol && csty.wpx > 10) {
                seencol = true;
                MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
                for(var _col = 0; _col < cstys.length; ++_col)if (cstys[_col]) process_col(cstys[_col]);
            }
            if (seencol) process_col(csty);
            cstys[csty.Index - 1 || cstys.length] = csty;
            for(var i = 0; i < +csty.Span; ++i)cstys[cstys.length] = dup(csty);
            break;
        case "namedrange" /*case 'NamedRange'*/ :
            if (Rn[1] === "/") break;
            if (!Workbook.Names) Workbook.Names = [];
            var _NamedRange = parsexmltag(Rn[0]);
            var _DefinedName /*:DefinedName*/  = {
                Name: _NamedRange.Name,
                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {
                    r: 0,
                    c: 0
                })
            } /*:any*/ ;
            if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
            /*:: if(Workbook.Names) */ Workbook.Names.push(_DefinedName);
            break;
        case "namedcell" /*case 'NamedCell'*/ :
            break;
        case "b" /*case 'B'*/ :
            break;
        case "i" /*case 'I'*/ :
            break;
        case "u" /*case 'U'*/ :
            break;
        case "s" /*case 'S'*/ :
            break;
        case "em" /*case 'EM'*/ :
            break;
        case "h2" /*case 'H2'*/ :
            break;
        case "h3" /*case 'H3'*/ :
            break;
        case "sub" /*case 'Sub'*/ :
            break;
        case "sup" /*case 'Sup'*/ :
            break;
        case "span" /*case 'Span'*/ :
            break;
        case "alignment" /*case 'Alignment'*/ :
            break;
        case "borders" /*case 'Borders'*/ :
            break;
        case "border" /*case 'Border'*/ :
            break;
        case "font" /*case 'Font'*/ :
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index);
            else fidx = Rn.index + Rn[0].length;
            break;
        case "interior" /*case 'Interior'*/ :
            if (!opts.cellStyles) break;
            stag.Interior = xlml_parsexmltag(Rn[0]);
            break;
        case "protection" /*case 'Protection'*/ :
            break;
        case "author" /*case 'Author'*/ :
        case "title" /*case 'Title'*/ :
        case "description" /*case 'Description'*/ :
        case "created" /*case 'Created'*/ :
        case "keywords" /*case 'Keywords'*/ :
        case "subject" /*case 'Subject'*/ :
        case "category" /*case 'Category'*/ :
        case "company" /*case 'Company'*/ :
        case "lastauthor" /*case 'LastAuthor'*/ :
        case "lastsaved" /*case 'LastSaved'*/ :
        case "lastprinted" /*case 'LastPrinted'*/ :
        case "version" /*case 'Version'*/ :
        case "revision" /*case 'Revision'*/ :
        case "totaltime" /*case 'TotalTime'*/ :
        case "hyperlinkbase" /*case 'HyperlinkBase'*/ :
        case "manager" /*case 'Manager'*/ :
        case "contentstatus" /*case 'ContentStatus'*/ :
        case "identifier" /*case 'Identifier'*/ :
        case "language" /*case 'Language'*/ :
        case "appname" /*case 'AppName'*/ :
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
            else pidx = Rn.index + Rn[0].length;
            break;
        case "paragraphs" /*case 'Paragraphs'*/ :
            break;
        case "styles" /*case 'Styles'*/ :
        case "workbook" /*case 'Workbook'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else state.push([
                Rn[3],
                false
            ]);
            break;
        case "comment" /*case 'Comment'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                xlml_clean_comment(comment);
                comments.push(comment);
            } else {
                state.push([
                    Rn[3],
                    false
                ]);
                tmp = xlml_parsexmltag(Rn[0]);
                comment = {
                    a: tmp.Author
                } /*:any*/ ;
            }
            break;
        case "autofilter" /*case 'AutoFilter'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                var AutoFilter = xlml_parsexmltag(Rn[0]);
                cursheet["!autofilter"] = {
                    ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "")
                };
                state.push([
                    Rn[3],
                    true
                ]);
            }
            break;
        case "name" /*case 'Name'*/ :
            break;
        case "datavalidation" /*case 'DataValidation'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "pixelsperinch" /*case 'PixelsPerInch'*/ :
            break;
        case "componentoptions" /*case 'ComponentOptions'*/ :
        case "documentproperties" /*case 'DocumentProperties'*/ :
        case "customdocumentproperties" /*case 'CustomDocumentProperties'*/ :
        case "officedocumentsettings" /*case 'OfficeDocumentSettings'*/ :
        case "pivottable" /*case 'PivotTable'*/ :
        case "pivotcache" /*case 'PivotCache'*/ :
        case "names" /*case 'Names'*/ :
        case "mapinfo" /*case 'MapInfo'*/ :
        case "pagebreaks" /*case 'PageBreaks'*/ :
        case "querytable" /*case 'QueryTable'*/ :
        case "sorting" /*case 'Sorting'*/ :
        case "schema" /*case 'Schema'*/ :
        case "conditionalformatting" /*case 'ConditionalFormatting'*/ :
        case "smarttagtype" /*case 'SmartTagType'*/ :
        case "smarttags" /*case 'SmartTags'*/ :
        case "excelworkbook" /*case 'ExcelWorkbook'*/ :
        case "workbookoptions" /*case 'WorkbookOptions'*/ :
        case "worksheetoptions" /*case 'WorksheetOptions'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "null" /*case 'Null'*/ :
            break;
        default:
            /* FODS file root is <office:document> */ if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
            /* UOS file root is <uof:UOF> */ if (state.length == 0 && Rn[3] == "uof" /*"UOF"*/ ) return parse_fods(str, opts);
            var seen = true;
            switch(state[state.length - 1][0]){
                /* OfficeDocumentSettings */ case "officedocumentsettings" /*case 'OfficeDocumentSettings'*/ :
                    switch(Rn[3]){
                        case "allowpng" /*case 'AllowPNG'*/ :
                            break;
                        case "removepersonalinformation" /*case 'RemovePersonalInformation'*/ :
                            break;
                        case "downloadcomponents" /*case 'DownloadComponents'*/ :
                            break;
                        case "locationofcomponents" /*case 'LocationOfComponents'*/ :
                            break;
                        case "colors" /*case 'Colors'*/ :
                            break;
                        case "color" /*case 'Color'*/ :
                            break;
                        case "index" /*case 'Index'*/ :
                            break;
                        case "rgb" /*case 'RGB'*/ :
                            break;
                        case "targetscreensize" /*case 'TargetScreenSize'*/ :
                            break;
                        case "readonlyrecommended" /*case 'ReadOnlyRecommended'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* ComponentOptions */ case "componentoptions" /*case 'ComponentOptions'*/ :
                    switch(Rn[3]){
                        case "toolbar" /*case 'Toolbar'*/ :
                            break;
                        case "hideofficelogo" /*case 'HideOfficeLogo'*/ :
                            break;
                        case "spreadsheetautofit" /*case 'SpreadsheetAutoFit'*/ :
                            break;
                        case "label" /*case 'Label'*/ :
                            break;
                        case "caption" /*case 'Caption'*/ :
                            break;
                        case "maxheight" /*case 'MaxHeight'*/ :
                            break;
                        case "maxwidth" /*case 'MaxWidth'*/ :
                            break;
                        case "nextsheetnumber" /*case 'NextSheetNumber'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* ExcelWorkbook */ case "excelworkbook" /*case 'ExcelWorkbook'*/ :
                    switch(Rn[3]){
                        case "date1904" /*case 'Date1904'*/ :
                            /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ Workbook.WBProps.date1904 = true;
                            break;
                        case "windowheight" /*case 'WindowHeight'*/ :
                            break;
                        case "windowwidth" /*case 'WindowWidth'*/ :
                            break;
                        case "windowtopx" /*case 'WindowTopX'*/ :
                            break;
                        case "windowtopy" /*case 'WindowTopY'*/ :
                            break;
                        case "tabratio" /*case 'TabRatio'*/ :
                            break;
                        case "protectstructure" /*case 'ProtectStructure'*/ :
                            break;
                        case "protectwindow" /*case 'ProtectWindow'*/ :
                            break;
                        case "protectwindows" /*case 'ProtectWindows'*/ :
                            break;
                        case "activesheet" /*case 'ActiveSheet'*/ :
                            break;
                        case "displayinknotes" /*case 'DisplayInkNotes'*/ :
                            break;
                        case "firstvisiblesheet" /*case 'FirstVisibleSheet'*/ :
                            break;
                        case "supbook" /*case 'SupBook'*/ :
                            break;
                        case "sheetname" /*case 'SheetName'*/ :
                            break;
                        case "sheetindex" /*case 'SheetIndex'*/ :
                            break;
                        case "sheetindexfirst" /*case 'SheetIndexFirst'*/ :
                            break;
                        case "sheetindexlast" /*case 'SheetIndexLast'*/ :
                            break;
                        case "dll" /*case 'Dll'*/ :
                            break;
                        case "acceptlabelsinformulas" /*case 'AcceptLabelsInFormulas'*/ :
                            break;
                        case "donotsavelinkvalues" /*case 'DoNotSaveLinkValues'*/ :
                            break;
                        case "iteration" /*case 'Iteration'*/ :
                            break;
                        case "maxiterations" /*case 'MaxIterations'*/ :
                            break;
                        case "maxchange" /*case 'MaxChange'*/ :
                            break;
                        case "path" /*case 'Path'*/ :
                            break;
                        case "xct" /*case 'Xct'*/ :
                            break;
                        case "count" /*case 'Count'*/ :
                            break;
                        case "selectedsheets" /*case 'SelectedSheets'*/ :
                            break;
                        case "calculation" /*case 'Calculation'*/ :
                            break;
                        case "uncalced" /*case 'Uncalced'*/ :
                            break;
                        case "startupprompt" /*case 'StartupPrompt'*/ :
                            break;
                        case "crn" /*case 'Crn'*/ :
                            break;
                        case "externname" /*case 'ExternName'*/ :
                            break;
                        case "formula" /*case 'Formula'*/ :
                            break;
                        case "colfirst" /*case 'ColFirst'*/ :
                            break;
                        case "collast" /*case 'ColLast'*/ :
                            break;
                        case "wantadvise" /*case 'WantAdvise'*/ :
                            break;
                        case "boolean" /*case 'Boolean'*/ :
                            break;
                        case "error" /*case 'Error'*/ :
                            break;
                        case "text" /*case 'Text'*/ :
                            break;
                        case "ole" /*case 'OLE'*/ :
                            break;
                        case "noautorecover" /*case 'NoAutoRecover'*/ :
                            break;
                        case "publishobjects" /*case 'PublishObjects'*/ :
                            break;
                        case "donotcalculatebeforesave" /*case 'DoNotCalculateBeforeSave'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "refmoder1c1" /*case 'RefModeR1C1'*/ :
                            break;
                        case "embedsavesmarttags" /*case 'EmbedSaveSmartTags'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* WorkbookOptions */ case "workbookoptions" /*case 'WorkbookOptions'*/ :
                    switch(Rn[3]){
                        case "owcversion" /*case 'OWCVersion'*/ :
                            break;
                        case "height" /*case 'Height'*/ :
                            break;
                        case "width" /*case 'Width'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* WorksheetOptions */ case "worksheetoptions" /*case 'WorksheetOptions'*/ :
                    switch(Rn[3]){
                        case "visible" /*case 'Visible'*/ :
                            if (Rn[0].slice(-2) === "/>") ;
                            else if (Rn[1] === "/") switch(str.slice(pidx, Rn.index)){
                                case "SheetHidden":
                                    wsprops.Hidden = 1;
                                    break;
                                case "SheetVeryHidden":
                                    wsprops.Hidden = 2;
                                    break;
                            }
                            else pidx = Rn.index + Rn[0].length;
                            break;
                        case "header" /*case 'Header'*/ :
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
                            break;
                        case "footer" /*case 'Footer'*/ :
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
                            break;
                        case "pagemargins" /*case 'PageMargins'*/ :
                            var pagemargins = parsexmltag(Rn[0]);
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+pagemargins.Top)) cursheet["!margins"].top = +pagemargins.Top;
                            if (!isNaN(+pagemargins.Left)) cursheet["!margins"].left = +pagemargins.Left;
                            if (!isNaN(+pagemargins.Right)) cursheet["!margins"].right = +pagemargins.Right;
                            if (!isNaN(+pagemargins.Bottom)) cursheet["!margins"].bottom = +pagemargins.Bottom;
                            break;
                        case "displayrighttoleft" /*case 'DisplayRightToLeft'*/ :
                            if (!Workbook.Views) Workbook.Views = [];
                            if (!Workbook.Views[0]) Workbook.Views[0] = {};
                            Workbook.Views[0].RTL = true;
                            break;
                        case "freezepanes" /*case 'FreezePanes'*/ :
                            break;
                        case "frozennosplit" /*case 'FrozenNoSplit'*/ :
                            break;
                        case "splithorizontal" /*case 'SplitHorizontal'*/ :
                        case "splitvertical" /*case 'SplitVertical'*/ :
                            break;
                        case "donotdisplaygridlines" /*case 'DoNotDisplayGridlines'*/ :
                            break;
                        case "activerow" /*case 'ActiveRow'*/ :
                            break;
                        case "activecol" /*case 'ActiveCol'*/ :
                            break;
                        case "toprowbottompane" /*case 'TopRowBottomPane'*/ :
                            break;
                        case "leftcolumnrightpane" /*case 'LeftColumnRightPane'*/ :
                            break;
                        case "unsynced" /*case 'Unsynced'*/ :
                            break;
                        case "print" /*case 'Print'*/ :
                            break;
                        case "printerrors" /*case 'PrintErrors'*/ :
                            break;
                        case "panes" /*case 'Panes'*/ :
                            break;
                        case "scale" /*case 'Scale'*/ :
                            break;
                        case "pane" /*case 'Pane'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "layout" /*case 'Layout'*/ :
                            break;
                        case "pagesetup" /*case 'PageSetup'*/ :
                            break;
                        case "selected" /*case 'Selected'*/ :
                            break;
                        case "protectobjects" /*case 'ProtectObjects'*/ :
                            break;
                        case "enableselection" /*case 'EnableSelection'*/ :
                            break;
                        case "protectscenarios" /*case 'ProtectScenarios'*/ :
                            break;
                        case "validprinterinfo" /*case 'ValidPrinterInfo'*/ :
                            break;
                        case "horizontalresolution" /*case 'HorizontalResolution'*/ :
                            break;
                        case "verticalresolution" /*case 'VerticalResolution'*/ :
                            break;
                        case "numberofcopies" /*case 'NumberofCopies'*/ :
                            break;
                        case "activepane" /*case 'ActivePane'*/ :
                            break;
                        case "toprowvisible" /*case 'TopRowVisible'*/ :
                            break;
                        case "leftcolumnvisible" /*case 'LeftColumnVisible'*/ :
                            break;
                        case "fittopage" /*case 'FitToPage'*/ :
                            break;
                        case "rangeselection" /*case 'RangeSelection'*/ :
                            break;
                        case "papersizeindex" /*case 'PaperSizeIndex'*/ :
                            break;
                        case "pagelayoutzoom" /*case 'PageLayoutZoom'*/ :
                            break;
                        case "pagebreakzoom" /*case 'PageBreakZoom'*/ :
                            break;
                        case "filteron" /*case 'FilterOn'*/ :
                            break;
                        case "fitwidth" /*case 'FitWidth'*/ :
                            break;
                        case "fitheight" /*case 'FitHeight'*/ :
                            break;
                        case "commentslayout" /*case 'CommentsLayout'*/ :
                            break;
                        case "zoom" /*case 'Zoom'*/ :
                            break;
                        case "lefttoright" /*case 'LeftToRight'*/ :
                            break;
                        case "gridlines" /*case 'Gridlines'*/ :
                            break;
                        case "allowsort" /*case 'AllowSort'*/ :
                            break;
                        case "allowfilter" /*case 'AllowFilter'*/ :
                            break;
                        case "allowinsertrows" /*case 'AllowInsertRows'*/ :
                            break;
                        case "allowdeleterows" /*case 'AllowDeleteRows'*/ :
                            break;
                        case "allowinsertcols" /*case 'AllowInsertCols'*/ :
                            break;
                        case "allowdeletecols" /*case 'AllowDeleteCols'*/ :
                            break;
                        case "allowinserthyperlinks" /*case 'AllowInsertHyperlinks'*/ :
                            break;
                        case "allowformatcells" /*case 'AllowFormatCells'*/ :
                            break;
                        case "allowsizecols" /*case 'AllowSizeCols'*/ :
                            break;
                        case "allowsizerows" /*case 'AllowSizeRows'*/ :
                            break;
                        case "nosummaryrowsbelowdetail" /*case 'NoSummaryRowsBelowDetail'*/ :
                            if (!cursheet["!outline"]) cursheet["!outline"] = {};
                            cursheet["!outline"].above = true;
                            break;
                        case "tabcolorindex" /*case 'TabColorIndex'*/ :
                            break;
                        case "donotdisplayheadings" /*case 'DoNotDisplayHeadings'*/ :
                            break;
                        case "showpagelayoutzoom" /*case 'ShowPageLayoutZoom'*/ :
                            break;
                        case "nosummarycolumnsrightdetail" /*case 'NoSummaryColumnsRightDetail'*/ :
                            if (!cursheet["!outline"]) cursheet["!outline"] = {};
                            cursheet["!outline"].left = true;
                            break;
                        case "blackandwhite" /*case 'BlackAndWhite'*/ :
                            break;
                        case "donotdisplayzeros" /*case 'DoNotDisplayZeros'*/ :
                            break;
                        case "displaypagebreak" /*case 'DisplayPageBreak'*/ :
                            break;
                        case "rowcolheadings" /*case 'RowColHeadings'*/ :
                            break;
                        case "donotdisplayoutline" /*case 'DoNotDisplayOutline'*/ :
                            break;
                        case "noorientation" /*case 'NoOrientation'*/ :
                            break;
                        case "allowusepivottables" /*case 'AllowUsePivotTables'*/ :
                            break;
                        case "zeroheight" /*case 'ZeroHeight'*/ :
                            break;
                        case "viewablerange" /*case 'ViewableRange'*/ :
                            break;
                        case "selection" /*case 'Selection'*/ :
                            break;
                        case "protectcontents" /*case 'ProtectContents'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* PivotTable */ case "pivottable" /*case 'PivotTable'*/ :
                case "pivotcache" /*case 'PivotCache'*/ :
                    switch(Rn[3]){
                        case "immediateitemsondrop" /*case 'ImmediateItemsOnDrop'*/ :
                            break;
                        case "showpagemultipleitemlabel" /*case 'ShowPageMultipleItemLabel'*/ :
                            break;
                        case "compactrowindent" /*case 'CompactRowIndent'*/ :
                            break;
                        case "location" /*case 'Location'*/ :
                            break;
                        case "pivotfield" /*case 'PivotField'*/ :
                            break;
                        case "orientation" /*case 'Orientation'*/ :
                            break;
                        case "layoutform" /*case 'LayoutForm'*/ :
                            break;
                        case "layoutsubtotallocation" /*case 'LayoutSubtotalLocation'*/ :
                            break;
                        case "layoutcompactrow" /*case 'LayoutCompactRow'*/ :
                            break;
                        case "position" /*case 'Position'*/ :
                            break;
                        case "pivotitem" /*case 'PivotItem'*/ :
                            break;
                        case "datatype" /*case 'DataType'*/ :
                            break;
                        case "datafield" /*case 'DataField'*/ :
                            break;
                        case "sourcename" /*case 'SourceName'*/ :
                            break;
                        case "parentfield" /*case 'ParentField'*/ :
                            break;
                        case "ptlineitems" /*case 'PTLineItems'*/ :
                            break;
                        case "ptlineitem" /*case 'PTLineItem'*/ :
                            break;
                        case "countofsameitems" /*case 'CountOfSameItems'*/ :
                            break;
                        case "item" /*case 'Item'*/ :
                            break;
                        case "itemtype" /*case 'ItemType'*/ :
                            break;
                        case "ptsource" /*case 'PTSource'*/ :
                            break;
                        case "cacheindex" /*case 'CacheIndex'*/ :
                            break;
                        case "consolidationreference" /*case 'ConsolidationReference'*/ :
                            break;
                        case "filename" /*case 'FileName'*/ :
                            break;
                        case "reference" /*case 'Reference'*/ :
                            break;
                        case "nocolumngrand" /*case 'NoColumnGrand'*/ :
                            break;
                        case "norowgrand" /*case 'NoRowGrand'*/ :
                            break;
                        case "blanklineafteritems" /*case 'BlankLineAfterItems'*/ :
                            break;
                        case "hidden" /*case 'Hidden'*/ :
                            break;
                        case "subtotal" /*case 'Subtotal'*/ :
                            break;
                        case "basefield" /*case 'BaseField'*/ :
                            break;
                        case "mapchilditems" /*case 'MapChildItems'*/ :
                            break;
                        case "function" /*case 'Function'*/ :
                            break;
                        case "refreshonfileopen" /*case 'RefreshOnFileOpen'*/ :
                            break;
                        case "printsettitles" /*case 'PrintSetTitles'*/ :
                            break;
                        case "mergelabels" /*case 'MergeLabels'*/ :
                            break;
                        case "defaultversion" /*case 'DefaultVersion'*/ :
                            break;
                        case "refreshname" /*case 'RefreshName'*/ :
                            break;
                        case "refreshdate" /*case 'RefreshDate'*/ :
                            break;
                        case "refreshdatecopy" /*case 'RefreshDateCopy'*/ :
                            break;
                        case "versionlastrefresh" /*case 'VersionLastRefresh'*/ :
                            break;
                        case "versionlastupdate" /*case 'VersionLastUpdate'*/ :
                            break;
                        case "versionupdateablemin" /*case 'VersionUpdateableMin'*/ :
                            break;
                        case "versionrefreshablemin" /*case 'VersionRefreshableMin'*/ :
                            break;
                        case "calculation" /*case 'Calculation'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* PageBreaks */ case "pagebreaks" /*case 'PageBreaks'*/ :
                    switch(Rn[3]){
                        case "colbreaks" /*case 'ColBreaks'*/ :
                            break;
                        case "colbreak" /*case 'ColBreak'*/ :
                            break;
                        case "rowbreaks" /*case 'RowBreaks'*/ :
                            break;
                        case "rowbreak" /*case 'RowBreak'*/ :
                            break;
                        case "colstart" /*case 'ColStart'*/ :
                            break;
                        case "colend" /*case 'ColEnd'*/ :
                            break;
                        case "rowend" /*case 'RowEnd'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* AutoFilter */ case "autofilter" /*case 'AutoFilter'*/ :
                    switch(Rn[3]){
                        case "autofiltercolumn" /*case 'AutoFilterColumn'*/ :
                            break;
                        case "autofiltercondition" /*case 'AutoFilterCondition'*/ :
                            break;
                        case "autofilterand" /*case 'AutoFilterAnd'*/ :
                            break;
                        case "autofilteror" /*case 'AutoFilterOr'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* QueryTable */ case "querytable" /*case 'QueryTable'*/ :
                    switch(Rn[3]){
                        case "id" /*case 'Id'*/ :
                            break;
                        case "autoformatfont" /*case 'AutoFormatFont'*/ :
                            break;
                        case "autoformatpattern" /*case 'AutoFormatPattern'*/ :
                            break;
                        case "querysource" /*case 'QuerySource'*/ :
                            break;
                        case "querytype" /*case 'QueryType'*/ :
                            break;
                        case "enableredirections" /*case 'EnableRedirections'*/ :
                            break;
                        case "refreshedinxl9" /*case 'RefreshedInXl9'*/ :
                            break;
                        case "urlstring" /*case 'URLString'*/ :
                            break;
                        case "htmltables" /*case 'HTMLTables'*/ :
                            break;
                        case "connection" /*case 'Connection'*/ :
                            break;
                        case "commandtext" /*case 'CommandText'*/ :
                            break;
                        case "refreshinfo" /*case 'RefreshInfo'*/ :
                            break;
                        case "notitles" /*case 'NoTitles'*/ :
                            break;
                        case "nextid" /*case 'NextId'*/ :
                            break;
                        case "columninfo" /*case 'ColumnInfo'*/ :
                            break;
                        case "overwritecells" /*case 'OverwriteCells'*/ :
                            break;
                        case "donotpromptforfile" /*case 'DoNotPromptForFile'*/ :
                            break;
                        case "textwizardsettings" /*case 'TextWizardSettings'*/ :
                            break;
                        case "source" /*case 'Source'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "decimal" /*case 'Decimal'*/ :
                            break;
                        case "thousandseparator" /*case 'ThousandSeparator'*/ :
                            break;
                        case "trailingminusnumbers" /*case 'TrailingMinusNumbers'*/ :
                            break;
                        case "formatsettings" /*case 'FormatSettings'*/ :
                            break;
                        case "fieldtype" /*case 'FieldType'*/ :
                            break;
                        case "delimiters" /*case 'Delimiters'*/ :
                            break;
                        case "tab" /*case 'Tab'*/ :
                            break;
                        case "comma" /*case 'Comma'*/ :
                            break;
                        case "autoformatname" /*case 'AutoFormatName'*/ :
                            break;
                        case "versionlastedit" /*case 'VersionLastEdit'*/ :
                            break;
                        case "versionlastrefresh" /*case 'VersionLastRefresh'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                case "datavalidation" /*case 'DataValidation'*/ :
                    switch(Rn[3]){
                        case "range" /*case 'Range'*/ :
                            break;
                        case "type" /*case 'Type'*/ :
                            break;
                        case "min" /*case 'Min'*/ :
                            break;
                        case "max" /*case 'Max'*/ :
                            break;
                        case "sort" /*case 'Sort'*/ :
                            break;
                        case "descending" /*case 'Descending'*/ :
                            break;
                        case "order" /*case 'Order'*/ :
                            break;
                        case "casesensitive" /*case 'CaseSensitive'*/ :
                            break;
                        case "value" /*case 'Value'*/ :
                            break;
                        case "errorstyle" /*case 'ErrorStyle'*/ :
                            break;
                        case "errormessage" /*case 'ErrorMessage'*/ :
                            break;
                        case "errortitle" /*case 'ErrorTitle'*/ :
                            break;
                        case "inputmessage" /*case 'InputMessage'*/ :
                            break;
                        case "inputtitle" /*case 'InputTitle'*/ :
                            break;
                        case "combohide" /*case 'ComboHide'*/ :
                            break;
                        case "inputhide" /*case 'InputHide'*/ :
                            break;
                        case "condition" /*case 'Condition'*/ :
                            break;
                        case "qualifier" /*case 'Qualifier'*/ :
                            break;
                        case "useblank" /*case 'UseBlank'*/ :
                            break;
                        case "value1" /*case 'Value1'*/ :
                            break;
                        case "value2" /*case 'Value2'*/ :
                            break;
                        case "format" /*case 'Format'*/ :
                            break;
                        case "cellrangelist" /*case 'CellRangeList'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                case "sorting" /*case 'Sorting'*/ :
                case "conditionalformatting" /*case 'ConditionalFormatting'*/ :
                    switch(Rn[3]){
                        case "range" /*case 'Range'*/ :
                            break;
                        case "type" /*case 'Type'*/ :
                            break;
                        case "min" /*case 'Min'*/ :
                            break;
                        case "max" /*case 'Max'*/ :
                            break;
                        case "sort" /*case 'Sort'*/ :
                            break;
                        case "descending" /*case 'Descending'*/ :
                            break;
                        case "order" /*case 'Order'*/ :
                            break;
                        case "casesensitive" /*case 'CaseSensitive'*/ :
                            break;
                        case "value" /*case 'Value'*/ :
                            break;
                        case "errorstyle" /*case 'ErrorStyle'*/ :
                            break;
                        case "errormessage" /*case 'ErrorMessage'*/ :
                            break;
                        case "errortitle" /*case 'ErrorTitle'*/ :
                            break;
                        case "cellrangelist" /*case 'CellRangeList'*/ :
                            break;
                        case "inputmessage" /*case 'InputMessage'*/ :
                            break;
                        case "inputtitle" /*case 'InputTitle'*/ :
                            break;
                        case "combohide" /*case 'ComboHide'*/ :
                            break;
                        case "inputhide" /*case 'InputHide'*/ :
                            break;
                        case "condition" /*case 'Condition'*/ :
                            break;
                        case "qualifier" /*case 'Qualifier'*/ :
                            break;
                        case "useblank" /*case 'UseBlank'*/ :
                            break;
                        case "value1" /*case 'Value1'*/ :
                            break;
                        case "value2" /*case 'Value2'*/ :
                            break;
                        case "format" /*case 'Format'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* MapInfo (schema) */ case "mapinfo" /*case 'MapInfo'*/ :
                case "schema" /*case 'Schema'*/ :
                case "data" /*case 'data'*/ :
                    switch(Rn[3]){
                        case "map" /*case 'Map'*/ :
                            break;
                        case "entry" /*case 'Entry'*/ :
                            break;
                        case "range" /*case 'Range'*/ :
                            break;
                        case "xpath" /*case 'XPath'*/ :
                            break;
                        case "field" /*case 'Field'*/ :
                            break;
                        case "xsdtype" /*case 'XSDType'*/ :
                            break;
                        case "filteron" /*case 'FilterOn'*/ :
                            break;
                        case "aggregate" /*case 'Aggregate'*/ :
                            break;
                        case "elementtype" /*case 'ElementType'*/ :
                            break;
                        case "attributetype" /*case 'AttributeType'*/ :
                            break;
                        /* These are from xsd (XML Schema Definition) */ case "schema" /*case 'schema'*/ :
                        case "element" /*case 'element'*/ :
                        case "complextype" /*case 'complexType'*/ :
                        case "datatype" /*case 'datatype'*/ :
                        case "all" /*case 'all'*/ :
                        case "attribute" /*case 'attribute'*/ :
                        case "extends" /*case 'extends'*/ :
                            break;
                        case "row" /*case 'row'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* SmartTags (can be anything) */ case "smarttags" /*case 'SmartTags'*/ :
                    break;
                default:
                    seen = false;
                    break;
            }
            if (seen) break;
            /* CustomDocumentProperties */ if (Rn[3].match(/!\[CDATA/)) break;
            if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
            if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/ "customdocumentproperties") {
                if (Rn[0].slice(-2) === "/>") break;
                else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
                else {
                    cp = Rn;
                    pidx = Rn.index + Rn[0].length;
                }
                break;
            }
            if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
    }
    var out = {} /*:any*/ ;
    if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
    out.SheetNames = sheetnames;
    out.Workbook = Workbook;
    out.SSF = dup(table_fmt);
    out.Props = Props;
    out.Custprops = Custprops;
    return out;
}
function parse_xlml(data /*:RawBytes|string*/ , opts) /*:Workbook*/ {
    fix_read_opts(opts = opts || {});
    switch(opts.type || "base64"){
        case "base64":
            return parse_xlml_xml(Base64_decode(data), opts);
        case "binary":
        case "buffer":
        case "file":
            return parse_xlml_xml(data, opts);
        case "array":
            return parse_xlml_xml(a2s(data), opts);
    }
/*:: throw new Error("unsupported type " + opts.type); */ }
/* TODO */ function write_props_xlml(wb /*:Workbook*/ , opts) /*:string*/ {
    var o /*:Array<string>*/  = [];
    /* DocumentProperties */ if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
    /* CustomDocumentProperties */ if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
    return o.join("");
}
/* TODO */ function write_wb_xlml() /*:string*/ {
    /* OfficeDocumentSettings */ /* ExcelWorkbook */ return "";
}
/* TODO */ function write_sty_xlml(wb, opts) /*:string*/ {
    /* Styles */ var styles /*:Array<string>*/  = [
        '<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'
    ];
    opts.cellXfs.forEach(function(xf, id) {
        var payload /*:Array<string>*/  = [];
        payload.push(writextag("NumberFormat", null, {
            "ss:Format": escapexml(table_fmt[xf.numFmtId])
        }));
        var o = /*::(*/ {
            "ss:ID": "s" + (21 + id)
        } /*:: :any)*/ ;
        styles.push(writextag("Style", payload.join(""), o));
    });
    return writextag("Styles", styles.join(""));
}
function write_name_xlml(n) {
    return writextag("NamedRange", null, {
        "ss:Name": n.Name,
        "ss:RefersTo": "=" + a1_to_rc(n.Ref, {
            r: 0,
            c: 0
        })
    });
}
function write_names_xlml(wb /*::, opts*/ ) /*:string*/ {
    if (!((wb || {}).Workbook || {}).Names) return "";
    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */ var names /*:Array<any>*/  = wb.Workbook.Names;
    var out /*:Array<string>*/  = [];
    for(var i = 0; i < names.length; ++i){
        var n = names[i];
        if (n.Sheet != null) continue;
        if (n.Name.match(/^_xlfn\./)) continue;
        out.push(write_name_xlml(n));
    }
    return writextag("Names", out.join(""));
}
function write_ws_xlml_names(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws) return "";
    if (!((wb || {}).Workbook || {}).Names) return "";
    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */ var names /*:Array<any>*/  = wb.Workbook.Names;
    var out /*:Array<string>*/  = [];
    for(var i = 0; i < names.length; ++i){
        var n = names[i];
        if (n.Sheet != idx) continue;
        /*switch(n.Name) {
			case "_": continue;
		}*/ if (n.Name.match(/^_xlfn\./)) continue;
        out.push(write_name_xlml(n));
    }
    return out.join("");
}
/* WorksheetOptions */ function write_ws_xlml_wsopts(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws) return "";
    var o /*:Array<string>*/  = [];
    /* NOTE: spec technically allows any order, but stick with implied order */ /* FitToPage */ /* DoNotDisplayColHeaders */ /* DoNotDisplayRowHeaders */ /* ViewableRange */ /* Selection */ /* GridlineColor */ /* Name */ /* ExcelWorksheetType */ /* IntlMacro */ /* Unsynced */ /* Selected */ /* CodeName */ if (ws["!margins"]) {
        o.push("<PageSetup>");
        if (ws["!margins"].header) o.push(writextag("Header", null, {
            "x:Margin": ws["!margins"].header
        }));
        if (ws["!margins"].footer) o.push(writextag("Footer", null, {
            "x:Margin": ws["!margins"].footer
        }));
        o.push(writextag("PageMargins", null, {
            "x:Bottom": ws["!margins"].bottom || "0.75",
            "x:Left": ws["!margins"].left || "0.7",
            "x:Right": ws["!margins"].right || "0.7",
            "x:Top": ws["!margins"].top || "0.75"
        }));
        o.push("</PageSetup>");
    }
    /* PageSetup */ /* DisplayPageBreak */ /* TransitionExpressionEvaluation */ /* TransitionFormulaEntry */ /* Print */ /* Zoom */ /* PageLayoutZoom */ /* PageBreakZoom */ /* ShowPageBreakZoom */ /* DefaultRowHeight */ /* DefaultColumnWidth */ /* StandardWidth */ if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
        /* Visible */ if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
        else {
            /* Selected */ for(var i = 0; i < idx; ++i)if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
            if (i == idx) o.push("<Selected/>");
        }
    }
    /* LeftColumnVisible */ if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o.push("<DisplayRightToLeft/>");
    /* GridlineColorIndex */ /* DisplayFormulas */ /* DoNotDisplayGridlines */ /* DoNotDisplayHeadings */ /* DoNotDisplayOutline */ /* ApplyAutomaticOutlineStyles */ /* NoSummaryRowsBelowDetail */ /* NoSummaryColumnsRightDetail */ /* DoNotDisplayZeros */ /* ActiveRow */ /* ActiveColumn */ /* FilterOn */ /* RangeSelection */ /* TopRowVisible */ /* TopRowBottomPane */ /* LeftColumnRightPane */ /* ActivePane */ /* SplitHorizontal */ /* SplitVertical */ /* FreezePanes */ /* FrozenNoSplit */ /* TabColorIndex */ /* Panes */ /* NOTE: Password not supported in XLML Format */ if (ws["!protect"]) {
        o.push(writetag("ProtectContents", "True"));
        if (ws["!protect"].objects) o.push(writetag("ProtectObjects", "True"));
        if (ws["!protect"].scenarios) o.push(writetag("ProtectScenarios", "True"));
        if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));
        else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
        [
            [
                "formatCells",
                "AllowFormatCells"
            ],
            [
                "formatColumns",
                "AllowSizeCols"
            ],
            [
                "formatRows",
                "AllowSizeRows"
            ],
            [
                "insertColumns",
                "AllowInsertCols"
            ],
            [
                "insertRows",
                "AllowInsertRows"
            ],
            [
                "insertHyperlinks",
                "AllowInsertHyperlinks"
            ],
            [
                "deleteColumns",
                "AllowDeleteCols"
            ],
            [
                "deleteRows",
                "AllowDeleteRows"
            ],
            [
                "sort",
                "AllowSort"
            ],
            [
                "autoFilter",
                "AllowFilter"
            ],
            [
                "pivotTables",
                "AllowUsePivotTables"
            ]
        ].forEach(function(x) {
            if (ws["!protect"][x[0]]) o.push("<" + x[1] + "/>");
        });
    }
    if (o.length == 0) return "";
    return writextag("WorksheetOptions", o.join(""), {
        xmlns: XLMLNS.x
    });
}
function write_ws_xlml_comment(comments /*:Array<any>*/ ) /*:string*/ {
    return comments.map(function(c) {
        // TODO: formatted text
        var t = xlml_unfixstr(c.t || "");
        var d = writextag("ss:Data", t, {
            "xmlns": "http://www.w3.org/TR/REC-html40"
        });
        return writextag("Comment", d, {
            "ss:Author": c.a
        });
    }).join("");
}
function write_ws_xlml_cell(cell, ref /*:string*/ , ws, opts, idx /*:number*/ , wb, addr) /*:string*/ {
    if (!cell || cell.v == undefined && cell.f == undefined) return "";
    var attr = {};
    if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
    if (cell.F && cell.F.slice(0, ref.length) == ref) {
        var end = decode_cell(cell.F.slice(ref.length + 1));
        attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
    }
    if (cell.l && cell.l.Target) {
        attr["ss:HRef"] = escapexml(cell.l.Target);
        if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
    }
    if (ws["!merges"]) {
        var marr = ws["!merges"];
        for(var mi = 0; mi != marr.length; ++mi){
            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
            if (marr[mi].e.c > marr[mi].s.c) attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
            if (marr[mi].e.r > marr[mi].s.r) attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
        }
    }
    var t = "", p = "";
    switch(cell.t){
        case "z":
            if (!opts.sheetStubs) return "";
            break;
        case "n":
            t = "Number";
            p = String(cell.v);
            break;
        case "b":
            t = "Boolean";
            p = cell.v ? "1" : "0";
            break;
        case "e":
            t = "Error";
            p = BErr[cell.v];
            break;
        case "d":
            t = "DateTime";
            p = new Date(cell.v).toISOString();
            if (cell.z == null) cell.z = cell.z || table_fmt[14];
            break;
        case "s":
            t = "String";
            p = escapexlml(cell.v || "");
            break;
    }
    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);
    attr["ss:StyleID"] = "s" + (21 + os);
    attr["ss:Index"] = addr.c + 1;
    var _v = cell.v != null ? p : "";
    var m = cell.t == "z" ? "" : '<Data ss:Type="' + t + '">' + _v + "</Data>";
    if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);
    return writextag("Cell", m, attr);
}
function write_ws_xlml_row(R /*:number*/ , row) /*:string*/ {
    var o = '<Row ss:Index="' + (R + 1) + '"';
    if (row) {
        if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
        if (row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
        if (row.hidden) o += ' ss:Hidden="1"';
    }
    return o + ">";
}
/* TODO */ function write_ws_xlml_table(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws["!ref"]) return "";
    var range /*:Range*/  = safe_decode_range(ws["!ref"]);
    var marr /*:Array<Range>*/  = ws["!merges"] || [], mi = 0;
    var o /*:Array<string>*/  = [];
    if (ws["!cols"]) ws["!cols"].forEach(function(n, i) {
        process_col(n);
        var w = !!n.width;
        var p = col_obj_w(i, n);
        var k /*:any*/  = {
            "ss:Index": i + 1
        };
        if (w) k["ss:Width"] = width2px(p.width);
        if (n.hidden) k["ss:Hidden"] = "1";
        o.push(writextag("Column", null, k));
    });
    var dense = Array.isArray(ws);
    for(var R = range.s.r; R <= range.e.r; ++R){
        var row = [
            write_ws_xlml_row(R, (ws["!rows"] || [])[R])
        ];
        for(var C = range.s.c; C <= range.e.c; ++C){
            var skip = false;
            for(mi = 0; mi != marr.length; ++mi){
                if (marr[mi].s.c > C) continue;
                if (marr[mi].s.r > R) continue;
                if (marr[mi].e.c < C) continue;
                if (marr[mi].e.r < R) continue;
                if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                break;
            }
            if (skip) continue;
            var addr = {
                r: R,
                c: C
            };
            var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref];
            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
        }
        row.push("</Row>");
        if (row.length > 2) o.push(row.join(""));
    }
    return o.join("");
}
function write_ws_xlml(idx /*:number*/ , opts, wb /*:Workbook*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    var s = wb.SheetNames[idx];
    var ws = wb.Sheets[s];
    var t /*:string*/  = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Names>" + t + "</Names>");
    /* Table */ t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Table>" + t + "</Table>");
    /* WorksheetOptions */ o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
    return o.join("");
}
function write_xlml(wb, opts) /*:string*/ {
    if (!opts) opts = {};
    if (!wb.SSF) wb.SSF = dup(table_fmt);
    if (wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, {
            revssf: {
                "General": 0
            }
        });
    }
    var d /*:Array<string>*/  = [];
    d.push(write_props_xlml(wb, opts));
    d.push(write_wb_xlml(wb, opts));
    d.push("");
    d.push("");
    for(var i = 0; i < wb.SheetNames.length; ++i)d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {
        "ss:Name": escapexml(wb.SheetNames[i])
    }));
    d[2] = write_sty_xlml(wb, opts);
    d[3] = write_names_xlml(wb, opts);
    return XML_HEADER + writextag("Workbook", d.join(""), {
        "xmlns": XLMLNS.ss,
        "xmlns:o": XLMLNS.o,
        "xmlns:x": XLMLNS.x,
        "xmlns:ss": XLMLNS.ss,
        "xmlns:dt": XLMLNS.dt,
        "xmlns:html": XLMLNS.html
    });
}
/* [MS-OLEDS] 2.3.8 CompObjStream */ function parse_compobj(obj /*:CFBEntry*/ ) {
    var v = {};
    var o = obj.content;
    /*:: if(o == null) return; */ /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */ o.l = 28;
    v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
    v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
    if (o.length - o.l <= 4) return v;
    var m /*:number*/  = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved1 = o.read_shift(0, "lpstr-ansi");
    if (o.length - o.l <= 4) return v;
    m = o.read_shift(4);
    if (m !== 0x71b239f4) return v;
    v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
    m = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved2 = o.read_shift(0, "lpwstr");
}
/*
	Continue logic for:
	- 2.4.58 Continue          0x003c
	- 2.4.59 ContinueBigName   0x043c
	- 2.4.60 ContinueFrt       0x0812
	- 2.4.61 ContinueFrt11     0x0875
	- 2.4.62 ContinueFrt12     0x087f
*/ var CONTINUE_RT = [
    0x003c,
    0x043c,
    0x0812,
    0x0875,
    0x087f
];
function slurp(RecordType, R, blob, length /*:number*/ , opts) /*:any*/ {
    var l = length;
    var bufs = [];
    var d = blob.slice(blob.l, blob.l + l);
    if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType){
        case 0x0009:
        case 0x0209:
        case 0x0409:
        case 0x0809 /* BOF */ :
        case 0x002f /* FilePass */ :
        case 0x0195 /* FileLock */ :
        case 0x00e1 /* InterfaceHdr */ :
        case 0x0196 /* RRDInfo */ :
        case 0x0138 /* RRDHead */ :
        case 0x0194 /* UsrExcl */ :
        case 0x000a /* EOF */ :
            break;
        case 0x0085 /* BoundSheet8 */ :
            break;
        default:
            opts.enc.insitu(d);
    }
    bufs.push(d);
    blob.l += l;
    var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
    var start = 0;
    while(next != null && CONTINUE_RT.indexOf(nextrt) > -1){
        l = __readUInt16LE(blob, blob.l + 2);
        start = blob.l + 4;
        if (nextrt == 0x0812 /* ContinueFrt */ ) start += 4;
        else if (nextrt == 0x0875 || nextrt == 0x087f) start += 12;
        d = blob.slice(start, blob.l + 4 + l);
        bufs.push(d);
        blob.l += 4 + l;
        next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
    }
    var b = bconcat(bufs);
    prep_blob(b, 0);
    var ll = 0;
    b.lens = [];
    for(var j = 0; j < bufs.length; ++j){
        b.lens.push(ll);
        ll += bufs[j].length;
    }
    if (b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
    return R.f(b, b.length, opts);
}
function safe_format_xf(p /*:any*/ , opts /*:ParseOpts*/ , date1904 /*:?boolean*/ ) {
    if (p.t === "z") return;
    if (!p.XF) return;
    var fmtid = 0;
    try {
        fmtid = p.z || p.XF.numFmtId || 0;
        if (opts.cellNF) p.z = table_fmt[fmtid];
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (!opts || opts.cellText !== false) try {
        if (p.t === "e") p.w = p.w || BErr[p.v];
        else if (fmtid === 0 || fmtid == "General") {
            if (p.t === "n") {
                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                else p.w = SSF_general_num(p.v);
            } else p.w = SSF_general(p.v);
        } else p.w = SSF_format(fmtid, p.v, {
            date1904: !!date1904,
            dateNF: opts && opts.dateNF
        });
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (opts.cellDates && fmtid && p.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
        var _d = SSF_parse_date_code(p.v);
        if (_d) {
            p.t = "d";
            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
        }
    }
}
function make_cell(val, ixfe, t) /*:Cell*/ {
    return {
        v: val,
        ixfe: ixfe,
        t: t
    } /*:any*/ ;
}
// 2.3.2
function parse_workbook(blob, options /*:ParseOpts*/ ) /*:Workbook*/ {
    var wb = {
        opts: {}
    } /*:any*/ ;
    var Sheets = {};
    if (DENSE != null && options.dense == null) options.dense = DENSE;
    var out /*:Worksheet*/  = options.dense ? [] : {};
    var Directory = {};
    var range /*:Range*/  = {} /*:any*/ ;
    var last_formula = null;
    var sst /*:SST*/  = [];
    var cur_sheet = "";
    var Preamble = {};
    var lastcell, last_cell = "", cc /*:Cell*/ , cmnt, rngC, rngR;
    var sharedf = {};
    var arrayf /*:Array<[Range, string]>*/  = [];
    var temp_val /*:Cell*/ ;
    var country;
    var XFs = []; /* XF records */ 
    var palette /*:Array<[number, number, number]>*/  = [];
    var Workbook /*:WBWBProps*/  = {
        Sheets: [],
        WBProps: {
            date1904: false
        },
        Views: [
            {}
        ]
    } /*:any*/ , wsprops = {};
    var get_rgb = function getrgb(icv /*:number*/ ) /*:[number, number, number]*/ {
        if (icv < 8) return XLSIcv[icv];
        if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
        return XLSIcv[icv];
    };
    var process_cell_style = function pcs(cell, line /*:any*/ , options) {
        var xfd = line.XF.data;
        if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;
        line.s = {} /*:any*/ ;
        line.s.patternType = xfd.patternType;
        var t;
        if (t = rgb2Hex(get_rgb(xfd.icvFore))) line.s.fgColor = {
            rgb: t
        };
        if (t = rgb2Hex(get_rgb(xfd.icvBack))) line.s.bgColor = {
            rgb: t
        };
    };
    var addcell = function addcell(cell /*:any*/ , line /*:any*/ , options /*:any*/ ) {
        if (file_depth > 1) return;
        if (options.sheetRows && cell.r >= options.sheetRows) return;
        if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
        delete line.ixfe;
        delete line.XF;
        lastcell = cell;
        last_cell = encode_cell(cell);
        if (!range || !range.s || !range.e) range = {
            s: {
                r: 0,
                c: 0
            },
            e: {
                r: 0,
                c: 0
            }
        };
        if (cell.r < range.s.r) range.s.r = cell.r;
        if (cell.c < range.s.c) range.s.c = cell.c;
        if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
        if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
        if (options.cellFormula && line.f) for(var afi = 0; afi < arrayf.length; ++afi){
            if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
            if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
            line.F = encode_range(arrayf[afi][0]);
            if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
            if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
            break;
        }
        if (options.dense) {
            if (!out[cell.r]) out[cell.r] = [];
            out[cell.r][cell.c] = line;
        } else out[last_cell] = line;
    };
    var opts = {
        enc: false,
        sbcch: 0,
        snames: [],
        sharedf: sharedf,
        arrayf: arrayf,
        rrtabid: [],
        lastuser: "",
        biff: 8,
        codepage: 0,
        winlocked: 0,
        cellStyles: !!options && !!options.cellStyles,
        WTF: !!options && !!options.wtf
    } /*:any*/ ;
    if (options.password) opts.password = options.password;
    var themes;
    var merges /*:Array<Range>*/  = [];
    var objects = [];
    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];
    var seencol = false;
    var supbooks = []; // 1-indexed, will hold extern names
    supbooks.SheetNames = opts.snames;
    supbooks.sharedf = opts.sharedf;
    supbooks.arrayf = opts.arrayf;
    supbooks.names = [];
    supbooks.XTI = [];
    var last_RT = 0;
    var file_depth = 0; /* TODO: make a real stack */ 
    var BIFF2Fmt = 0, BIFF2FmtTable /*:Array<string>*/  = [];
    var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */ 
    var last_lbl /*:?DefinedName*/ ;
    /* explicit override for some broken writers */ opts.codepage = 1200;
    set_cp(1200);
    var seen_codepage = false;
    while(blob.l < blob.length - 1){
        var s = blob.l;
        var RecordType = blob.read_shift(2);
        if (RecordType === 0 && last_RT === 0x000a /* EOF */ ) break;
        var length = blob.l === blob.length ? 0 : blob.read_shift(2);
        var R = XLSRecordEnum[RecordType];
        //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
        //if(!R) console.log(blob.slice(blob.l, blob.l + length));
        if (R && R.f) {
            if (options.bookSheets) {
                if (last_RT === 0x0085 /* BoundSheet8 */  && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */ ) break;
            }
            last_RT = RecordType;
            if (R.r === 2 || R.r == 12) {
                var rt = blob.read_shift(2);
                length -= 2;
                if (!opts.enc && rt !== RecordType && ((rt & 0xFF) << 8 | rt >> 8) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
                if (R.r == 12) {
                    blob.l += 10;
                    length -= 10;
                } // skip FRT
            }
            //console.error(R,blob.l,length,blob.length);
            var val /*:any*/  = {} /*:any*/ ;
            if (RecordType === 0x000a /* EOF */ ) val = /*::(*/ R.f(blob, length, opts) /*:: :any)*/ ;
            else val = /*::(*/ slurp(RecordType, R, blob, length, opts) /*:: :any)*/ ;
            /*:: val = (val:any); */ if (file_depth == 0 && [
                0x0009,
                0x0209,
                0x0409,
                0x0809
            ].indexOf(last_RT) === -1 /* 'BOF' */ ) continue;
            switch(RecordType){
                case 0x0022 /* Date1904 */ :
                    /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
                    break;
                case 0x0086 /* WriteProtect */ :
                    wb.opts.WriteProtect = true;
                    break;
                case 0x002f /* FilePass */ :
                    if (!opts.enc) blob.l = 0;
                    opts.enc = val;
                    if (!options.password) throw new Error("File is password-protected");
                    if (val.valid == null) throw new Error("Encryption scheme unsupported");
                    if (!val.valid) throw new Error("Password is incorrect");
                    break;
                case 0x005c /* WriteAccess */ :
                    opts.lastuser = val;
                    break;
                case 0x0042 /* CodePage */ :
                    var cpval = Number(val);
                    /* overrides based on test cases */ switch(cpval){
                        case 0x5212:
                            cpval = 1200;
                            break;
                        case 0x8000:
                            cpval = 10000;
                            break;
                        case 0x8001:
                            cpval = 1252;
                            break;
                    }
                    set_cp(opts.codepage = cpval);
                    seen_codepage = true;
                    break;
                case 0x013d /* RRTabId */ :
                    opts.rrtabid = val;
                    break;
                case 0x0019 /* WinProtect */ :
                    opts.winlocked = val;
                    break;
                case 0x01b7 /* RefreshAll */ :
                    wb.opts["RefreshAll"] = val;
                    break;
                case 0x000c /* CalcCount */ :
                    wb.opts["CalcCount"] = val;
                    break;
                case 0x0010 /* CalcDelta */ :
                    wb.opts["CalcDelta"] = val;
                    break;
                case 0x0011 /* CalcIter */ :
                    wb.opts["CalcIter"] = val;
                    break;
                case 0x000d /* CalcMode */ :
                    wb.opts["CalcMode"] = val;
                    break;
                case 0x000e /* CalcPrecision */ :
                    wb.opts["CalcPrecision"] = val;
                    break;
                case 0x005f /* CalcSaveRecalc */ :
                    wb.opts["CalcSaveRecalc"] = val;
                    break;
                case 0x000f /* CalcRefMode */ :
                    opts.CalcRefMode = val;
                    break; // TODO: implement R1C1
                case 0x08a3 /* ForceFullCalculation */ :
                    wb.opts.FullCalc = val;
                    break;
                case 0x0081 /* WsBool */ :
                    if (val.fDialog) out["!type"] = "dialog";
                    if (!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
                    if (!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
                    break; // TODO
                case 0x00e0 /* XF */ :
                    XFs.push(val);
                    break;
                case 0x01ae /* SupBook */ :
                    supbooks.push([
                        val
                    ]);
                    supbooks[supbooks.length - 1].XTI = [];
                    break;
                case 0x0023:
                case 0x0223 /* ExternName */ :
                    supbooks[supbooks.length - 1].push(val);
                    break;
                case 0x0018:
                case 0x0218 /* Lbl */ :
                    last_lbl = {
                        Name: val.Name,
                        Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
                    } /*:DefinedName*/ ;
                    if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
                    supbooks.names.push(last_lbl);
                    if (!supbooks[0]) {
                        supbooks[0] = [];
                        supbooks[0].XTI = [];
                    }
                    supbooks[supbooks.length - 1].push(val);
                    if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
                        if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d") FilterDatabases[val.itab - 1] = {
                            ref: encode_range(val.rgce[0][0][1][2])
                        };
                    }
                    break;
                case 0x0016 /* ExternCount */ :
                    opts.ExternCount = val;
                    break;
                case 0x0017 /* ExternSheet */ :
                    if (supbooks.length == 0) {
                        supbooks[0] = [];
                        supbooks[0].XTI = [];
                    }
                    supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                    supbooks.XTI = supbooks.XTI.concat(val);
                    break;
                case 0x0894 /* NameCmt */ :
                    /* TODO: search for correct name */ if (opts.biff < 8) break;
                    if (last_lbl != null) last_lbl.Comment = val[1];
                    break;
                case 0x0012 /* Protect */ :
                    out["!protect"] = val;
                    break; /* for sheet or book */ 
                case 0x0013 /* Password */ :
                    if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
                    break;
                case 0x0085 /* BoundSheet8 */ :
                    Directory[val.pos] = val;
                    opts.snames.push(val.name);
                    break;
                case 0x000a /* EOF */ :
                    if (--file_depth) break;
                    if (range.e) {
                        if (range.e.r > 0 && range.e.c > 0) {
                            range.e.r--;
                            range.e.c--;
                            out["!ref"] = encode_range(range);
                            if (options.sheetRows && options.sheetRows <= range.e.r) {
                                var tmpri = range.e.r;
                                range.e.r = options.sheetRows - 1;
                                out["!fullref"] = out["!ref"];
                                out["!ref"] = encode_range(range);
                                range.e.r = tmpri;
                            }
                            range.e.r++;
                            range.e.c++;
                        }
                        if (merges.length > 0) out["!merges"] = merges;
                        if (objects.length > 0) out["!objects"] = objects;
                        if (colinfo.length > 0) out["!cols"] = colinfo;
                        if (rowinfo.length > 0) out["!rows"] = rowinfo;
                        Workbook.Sheets.push(wsprops);
                    }
                    if (cur_sheet === "") Preamble = out;
                    else Sheets[cur_sheet] = out;
                    out = options.dense ? [] : {};
                    break;
                case 0x0009:
                case 0x0209:
                case 0x0409:
                case 0x0809 /* BOF */ :
                    if (opts.biff === 8) opts.biff = ({
                        /*::[*/ 0x0009: 2,
                        /*::[*/ 0x0209: 3,
                        /*::[*/ 0x0409: 4
                    })[RecordType] || ({
                        /*::[*/ 0x0200: 2,
                        /*::[*/ 0x0300: 3,
                        /*::[*/ 0x0400: 4,
                        /*::[*/ 0x0500: 5,
                        /*::[*/ 0x0600: 8,
                        /*::[*/ 0x0002: 2,
                        /*::[*/ 0x0007: 2
                    })[val.BIFFVer] || 8;
                    opts.biffguess = val.BIFFVer == 0;
                    if (val.BIFFVer == 0 && val.dt == 0x1000) {
                        opts.biff = 5;
                        seen_codepage = true;
                        set_cp(opts.codepage = 28591);
                    }
                    if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
                    if (file_depth++) break;
                    out = options.dense ? [] : {};
                    if (opts.biff < 8 && !seen_codepage) {
                        seen_codepage = true;
                        set_cp(opts.codepage = options.codepage || 1252);
                    }
                    if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {
                        if (cur_sheet === "") cur_sheet = "Sheet1";
                        range = {
                            s: {
                                r: 0,
                                c: 0
                            },
                            e: {
                                r: 0,
                                c: 0
                            }
                        };
                        /* fake BoundSheet8 */ var fakebs8 = {
                            pos: blob.l - length,
                            name: cur_sheet
                        };
                        Directory[fakebs8.pos] = fakebs8;
                        opts.snames.push(cur_sheet);
                    } else cur_sheet = (Directory[s] || {
                        name: ""
                    }).name;
                    if (val.dt == 0x20) out["!type"] = "chart";
                    if (val.dt == 0x40) out["!type"] = "macro";
                    merges = [];
                    objects = [];
                    opts.arrayf = arrayf = [];
                    colinfo = [];
                    rowinfo = [];
                    seencol = false;
                    wsprops = {
                        Hidden: (Directory[s] || {
                            hs: 0
                        }).hs,
                        name: cur_sheet
                    };
                    break;
                case 0x0203 /* Number */ :
                case 0x0003 /* BIFF2NUM */ :
                case 0x0002 /* BIFF2INT */ :
                    if (out["!type"] == "chart") {
                        if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({
                            c: val.c,
                            r: val.r
                        })]) ++val.c;
                    }
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe] || {},
                        v: val.val,
                        t: "n"
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0005:
                case 0x0205 /* BoolErr */ :
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe],
                        v: val.val,
                        t: val.t
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x027e /* RK */ :
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe],
                        v: val.rknum,
                        t: "n"
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x00bd /* MulRk */ :
                    for(var j = val.c; j <= val.C; ++j){
                        var ixfe = val.rkrec[j - val.c][0];
                        temp_val = {
                            ixfe: ixfe,
                            XF: XFs[ixfe],
                            v: val.rkrec[j - val.c][1],
                            t: "n"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: j,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x0006:
                case 0x0206:
                case 0x0406 /* Formula */ :
                    if (val.val == "String") {
                        last_formula = val;
                        break;
                    }
                    temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                        var _f = val.formula;
                        if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                            var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                            var _fe = encode_cell({
                                r: _fr,
                                c: _fc
                            });
                            if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                            else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                        } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(val.cell, temp_val, options);
                    last_formula = val;
                    break;
                case 0x0007:
                case 0x0207 /* String */ :
                    if (last_formula) {
                        last_formula.val = val;
                        temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                        temp_val.XF = XFs[temp_val.ixfe];
                        if (options.cellFormula) temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell(last_formula.cell, temp_val, options);
                        last_formula = null;
                    } else throw new Error("String record expects Formula");
                    break;
                case 0x0021:
                case 0x0221 /* Array */ :
                    arrayf.push(val);
                    var _arraystart = encode_cell(val[0].s);
                    cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
                    if (options.cellFormula && cc) {
                        if (!last_formula) break; /* technically unreachable */ 
                        if (!_arraystart || !cc) break;
                        cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                        cc.F = encode_range(val[0]);
                    }
                    break;
                case 0x04bc /* ShrFmla */ :
                    if (!options.cellFormula) break;
                    if (last_cell) {
                        /* TODO: capture range */ if (!last_formula) break; /* technically unreachable */ 
                        sharedf[encode_cell(last_formula.cell)] = val[0];
                        cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                        (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
                    }
                    break;
                case 0x00fd /* LabelSst */ :
                    temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
                    if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0201 /* Blank */ :
                    if (options.sheetStubs) {
                        temp_val = {
                            ixfe: val.ixfe,
                            XF: XFs[val.ixfe],
                            t: "z"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: val.c,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x00be /* MulBlank */ :
                    if (options.sheetStubs) for(var _j = val.c; _j <= val.C; ++_j){
                        var _ixfe = val.ixfe[_j - val.c];
                        temp_val = {
                            ixfe: _ixfe,
                            XF: XFs[_ixfe],
                            t: "z"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: _j,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x00d6 /* RString */ :
                case 0x0204 /* Label */ :
                case 0x0004 /* BIFF2STR */ :
                    temp_val = make_cell(val.val, val.ixfe, "s");
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0000:
                case 0x0200 /* Dimensions */ :
                    if (file_depth === 1) range = val; /* TODO: stack */ 
                    break;
                case 0x00fc /* SST */ :
                    sst = val;
                    break;
                case 0x041e /* Format */ :
                    if (opts.biff == 4) {
                        BIFF2FmtTable[BIFF2Fmt++] = val[1];
                        for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)if (table_fmt[b4idx] == val[1]) break;
                        if (b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
                    } else SSF_load(val[1], val[0]);
                    break;
                case 0x001e /* BIFF2FORMAT */ :
                    BIFF2FmtTable[BIFF2Fmt++] = val;
                    for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)if (table_fmt[b2idx] == val) break;
                    if (b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
                    break;
                case 0x00e5 /* MergeCells */ :
                    merges = merges.concat(val);
                    break;
                case 0x005d /* Obj */ :
                    objects[val.cmo[0]] = opts.lastobj = val;
                    break;
                case 0x01b6 /* TxO */ :
                    opts.lastobj.TxO = val;
                    break;
                case 0x007f /* ImData */ :
                    opts.lastobj.ImData = val;
                    break;
                case 0x01b8 /* HLink */ :
                    for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){
                        cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                            c: rngC,
                            r: rngR
                        })];
                        if (cc) cc.l = val[1];
                    }
                    break;
                case 0x0800 /* HLinkTooltip */ :
                    for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){
                        cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                            c: rngC,
                            r: rngR
                        })];
                        if (cc && cc.l) cc.l.Tooltip = val[1];
                    }
                    break;
                case 0x001c /* Note */ :
                    if (opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */ 
                    cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
                    var noteobj = objects[val[2]];
                    if (!cc) {
                        if (options.dense) {
                            if (!out[val[0].r]) out[val[0].r] = [];
                            cc = out[val[0].r][val[0].c] = {
                                t: "z"
                            } /*:any*/ ;
                        } else cc = out[encode_cell(val[0])] = {
                            t: "z"
                        } /*:any*/ ;
                        range.e.r = Math.max(range.e.r, val[0].r);
                        range.s.r = Math.min(range.s.r, val[0].r);
                        range.e.c = Math.max(range.e.c, val[0].c);
                        range.s.c = Math.min(range.s.c, val[0].c);
                    }
                    if (!cc.c) cc.c = [];
                    cmnt = {
                        a: val[1],
                        t: noteobj.TxO.t
                    };
                    cc.c.push(cmnt);
                    break;
                case 0x087d /* XFExt */ :
                    update_xfext(XFs[val.ixfe], val.ext);
                    break;
                case 0x007d /* ColInfo */ :
                    if (!opts.cellStyles) break;
                    while(val.e >= val.s){
                        colinfo[val.e--] = {
                            width: val.w / 256,
                            level: val.level || 0,
                            hidden: !!(val.flags & 1)
                        };
                        if (!seencol) {
                            seencol = true;
                            find_mdw_colw(val.w / 256);
                        }
                        process_col(colinfo[val.e + 1]);
                    }
                    break;
                case 0x0208 /* Row */ :
                    var rowobj = {};
                    if (val.level != null) {
                        rowinfo[val.r] = rowobj;
                        rowobj.level = val.level;
                    }
                    if (val.hidden) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hidden = true;
                    }
                    if (val.hpt) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hpt = val.hpt;
                        rowobj.hpx = pt2px(val.hpt);
                    }
                    break;
                case 0x0026 /* LeftMargin */ :
                case 0x0027 /* RightMargin */ :
                case 0x0028 /* TopMargin */ :
                case 0x0029 /* BottomMargin */ :
                    if (!out["!margins"]) default_margins(out["!margins"] = {});
                    out["!margins"][({
                        0x26: "left",
                        0x27: "right",
                        0x28: "top",
                        0x29: "bottom"
                    })[RecordType]] = val;
                    break;
                case 0x00a1 /* Setup */ :
                    if (!out["!margins"]) default_margins(out["!margins"] = {});
                    out["!margins"].header = val.header;
                    out["!margins"].footer = val.footer;
                    break;
                case 0x023e /* Window2 */ :
                    // $FlowIgnore
                    if (val.RTL) Workbook.Views[0].RTL = true;
                    break;
                case 0x0092 /* Palette */ :
                    palette = val;
                    break;
                case 0x0896 /* Theme */ :
                    themes = val;
                    break;
                case 0x008c /* Country */ :
                    country = val;
                    break;
                case 0x01ba /* CodeName */ :
                    /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
                    else wsprops.CodeName = val || wsprops.name;
                    break;
            }
        } else {
            if (!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
            blob.l += length;
        }
    }
    wb.SheetNames = keys(Directory).sort(function(a, b) {
        return Number(a) - Number(b);
    }).map(function(x) {
        return Directory[x].name;
    });
    if (!options.bookSheets) wb.Sheets = Sheets;
    if (!wb.SheetNames.length && Preamble["!ref"]) {
        wb.SheetNames.push("Sheet1");
        /*jshint -W069 */ if (wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
    /*jshint +W069 */ } else wb.Preamble = Preamble;
    if (wb.Sheets) FilterDatabases.forEach(function(r, i) {
        wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r;
    });
    wb.Strings = sst;
    wb.SSF = dup(table_fmt);
    if (opts.enc) wb.Encryption = opts.enc;
    if (themes) wb.Themes = themes;
    wb.Metadata = {};
    if (country !== undefined) wb.Metadata.Country = country;
    if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
    wb.Workbook = Workbook;
    return wb;
}
/* TODO: split props*/ var PSCLSID = {
    SI: "e0859ff2f94f6810ab9108002b27b3d9",
    DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
};
function parse_xls_props(cfb /*:CFBContainer*/ , props, o) {
    /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */ var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
    if (DSI && DSI.size > 0) try {
        var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
        for(var d in DocSummary)props[d] = DocSummary[d];
    } catch (e) {
        if (o.WTF) throw e; /* empty */ 
    }
    /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/ var SI = CFB.find(cfb, "/!SummaryInformation");
    if (SI && SI.size > 0) try {
        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
        for(var s in Summary)if (props[s] == null) props[s] = Summary[s];
    } catch (e) {
        if (o.WTF) throw e; /* empty */ 
    }
    if (props.HeadingPairs && props.TitlesOfParts) {
        load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
        delete props.HeadingPairs;
        delete props.TitlesOfParts;
    }
}
function write_xls_props(wb /*:Workbook*/ , cfb /*:CFBContainer*/ ) {
    var DSEntries = [], SEntries = [], CEntries = [];
    var i = 0, Keys;
    var DocSummaryRE /*:{[key:string]:string}*/  = evert_key(DocSummaryPIDDSI, "n");
    var SummaryRE /*:{[key:string]:string}*/  = evert_key(SummaryPIDSI, "n");
    if (wb.Props) {
        Keys = keys(wb.Props);
        // $FlowIgnore
        for(i = 0; i < Keys.length; ++i)(Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([
            Keys[i],
            wb.Props[Keys[i]]
        ]);
    }
    if (wb.Custprops) {
        Keys = keys(wb.Custprops);
        // $FlowIgnore
        for(i = 0; i < Keys.length; ++i)if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([
            Keys[i],
            wb.Custprops[Keys[i]]
        ]);
    }
    var CEntries2 = [];
    for(i = 0; i < CEntries.length; ++i){
        if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;
        if (CEntries[i][1] == null) continue;
        CEntries2.push(CEntries[i]);
    }
    if (SEntries.length) CFB.utils.cfb_add(cfb, "/\x05SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
    if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/\x05DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
}
function parse_xlscfb(cfb /*:any*/ , options /*:?ParseOpts*/ ) /*:Workbook*/ {
    if (!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if (options.codepage) set_ansi(options.codepage);
    var CompObj /*:?CFBEntry*/ , WB /*:?any*/ ;
    if (cfb.FullPaths) {
        if (CFB.find(cfb, "/encryption")) throw new Error("File is password-protected");
        CompObj = CFB.find(cfb, "!CompObj");
        WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
    } else {
        switch(options.type){
            case "base64":
                cfb = s2a(Base64_decode(cfb));
                break;
            case "binary":
                cfb = s2a(cfb);
                break;
            case "buffer":
                break;
            case "array":
                if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
                break;
        }
        prep_blob(cfb, 0);
        WB = {
            content: cfb
        } /*:any*/ ;
    }
    var /*::CompObjP, */ WorkbookP /*:: :Workbook = XLSX.utils.book_new(); */ ;
    var _data /*:?any*/ ;
    if (CompObj) /*::CompObjP = */ parse_compobj(CompObj);
    if (options.bookProps && !options.bookSheets) WorkbookP = {} /*:any*/ ;
    else /*:: if(cfb instanceof CFBContainer) */ {
        var T = has_buf ? "buffer" : "array";
        if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
        else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        else if ((_data = CFB.find(cfb, "MN0")) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
        else throw new Error("Cannot find Workbook stream");
        if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir")) WorkbookP.vbaraw = make_vba_xls(cfb);
    }
    var props = {};
    if (cfb.FullPaths) parse_xls_props(/*::((*/ cfb /*:: :any):CFBContainer)*/ , props, options);
    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */ 
    if (options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */ return WorkbookP;
}
function write_xlscfb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:CFBContainer*/ {
    var o = opts || {};
    var cfb = CFB.utils.cfb_new({
        root: "R"
    });
    var wbpath = "/Workbook";
    switch(o.bookType || "xls"){
        case "xls":
            o.bookType = "biff8";
        /* falls through */ case "xla":
            if (!o.bookType) o.bookType = "xla";
        /* falls through */ case "biff8":
            wbpath = "/Workbook";
            o.biff = 8;
            break;
        case "biff5":
            wbpath = "/Book";
            o.biff = 5;
            break;
        default:
            throw new Error("invalid type " + o.bookType + " for XLS CFB");
    }
    CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
    if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
    // TODO: SI, DSI, CO
    if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {
        type: typeof wb.vbaraw == "string" ? "binary" : "buffer"
    }));
    return cfb;
}
/* [MS-XLSB] 2.3 Record Enumeration */ var XLSBRecordEnum = {
    /*::[*/ 0x0000: {
        f: parse_BrtRowHdr
    },
    /*::[*/ 0x0001: {
        f: parse_BrtCellBlank
    },
    /*::[*/ 0x0002: {
        f: parse_BrtCellRk
    },
    /*::[*/ 0x0003: {
        f: parse_BrtCellError
    },
    /*::[*/ 0x0004: {
        f: parse_BrtCellBool
    },
    /*::[*/ 0x0005: {
        f: parse_BrtCellReal
    },
    /*::[*/ 0x0006: {
        f: parse_BrtCellSt
    },
    /*::[*/ 0x0007: {
        f: parse_BrtCellIsst
    },
    /*::[*/ 0x0008: {
        f: parse_BrtFmlaString
    },
    /*::[*/ 0x0009: {
        f: parse_BrtFmlaNum
    },
    /*::[*/ 0x000A: {
        f: parse_BrtFmlaBool
    },
    /*::[*/ 0x000B: {
        f: parse_BrtFmlaError
    },
    /*::[*/ 0x000C: {
        f: parse_BrtShortBlank
    },
    /*::[*/ 0x000D: {
        f: parse_BrtShortRk
    },
    /*::[*/ 0x000E: {
        f: parse_BrtShortError
    },
    /*::[*/ 0x000F: {
        f: parse_BrtShortBool
    },
    /*::[*/ 0x0010: {
        f: parse_BrtShortReal
    },
    /*::[*/ 0x0011: {
        f: parse_BrtShortSt
    },
    /*::[*/ 0x0012: {
        f: parse_BrtShortIsst
    },
    /*::[*/ 0x0013: {
        f: parse_RichStr
    },
    /*::[*/ 0x0014: {},
    /*::[*/ 0x0015: {},
    /*::[*/ 0x0016: {},
    /*::[*/ 0x0017: {},
    /*::[*/ 0x0018: {},
    /*::[*/ 0x0019: {},
    /*::[*/ 0x001A: {},
    /*::[*/ 0x001B: {},
    /*::[*/ 0x001C: {},
    /*::[*/ 0x001D: {},
    /*::[*/ 0x001E: {},
    /*::[*/ 0x001F: {},
    /*::[*/ 0x0020: {},
    /*::[*/ 0x0021: {},
    /*::[*/ 0x0022: {},
    /*::[*/ 0x0023: {
        T: 1
    },
    /*::[*/ 0x0024: {
        T: -1
    },
    /*::[*/ 0x0025: {
        T: 1
    },
    /*::[*/ 0x0026: {
        T: -1
    },
    /*::[*/ 0x0027: {
        f: parse_BrtName
    },
    /*::[*/ 0x0028: {},
    /*::[*/ 0x002A: {},
    /*::[*/ 0x002B: {
        f: parse_BrtFont
    },
    /*::[*/ 0x002C: {
        f: parse_BrtFmt
    },
    /*::[*/ 0x002D: {
        f: parse_BrtFill
    },
    /*::[*/ 0x002E: {
        f: parse_BrtBorder
    },
    /*::[*/ 0x002F: {
        f: parse_BrtXF
    },
    /*::[*/ 0x0030: {},
    /*::[*/ 0x0031: {
        f: parse_Int32LE
    },
    /*::[*/ 0x0032: {},
    /*::[*/ 0x0033: {
        f: parse_BrtMdb
    },
    /*::[*/ 0x0034: {
        T: 1
    },
    /*::[*/ 0x0035: {
        T: -1
    },
    /*::[*/ 0x0036: {
        T: 1
    },
    /*::[*/ 0x0037: {
        T: -1
    },
    /*::[*/ 0x0038: {
        T: 1
    },
    /*::[*/ 0x0039: {
        T: -1
    },
    /*::[*/ 0x003A: {},
    /*::[*/ 0x003B: {},
    /*::[*/ 0x003C: {
        f: parse_ColInfo
    },
    /*::[*/ 0x003E: {
        f: parse_BrtCellRString
    },
    /*::[*/ 0x003F: {
        f: parse_BrtCalcChainItem$
    },
    /*::[*/ 0x0040: {
        f: parse_BrtDVal
    },
    /*::[*/ 0x0041: {},
    /*::[*/ 0x0042: {},
    /*::[*/ 0x0043: {},
    /*::[*/ 0x0044: {},
    /*::[*/ 0x0045: {},
    /*::[*/ 0x0046: {},
    /*::[*/ 0x0080: {},
    /*::[*/ 0x0081: {
        T: 1
    },
    /*::[*/ 0x0082: {
        T: -1
    },
    /*::[*/ 0x0083: {
        T: 1,
        f: parsenoop,
        p: 0
    },
    /*::[*/ 0x0084: {
        T: -1
    },
    /*::[*/ 0x0085: {
        T: 1
    },
    /*::[*/ 0x0086: {
        T: -1
    },
    /*::[*/ 0x0087: {
        T: 1
    },
    /*::[*/ 0x0088: {
        T: -1
    },
    /*::[*/ 0x0089: {
        T: 1,
        f: parse_BrtBeginWsView
    },
    /*::[*/ 0x008A: {
        T: -1
    },
    /*::[*/ 0x008B: {
        T: 1
    },
    /*::[*/ 0x008C: {
        T: -1
    },
    /*::[*/ 0x008D: {
        T: 1
    },
    /*::[*/ 0x008E: {
        T: -1
    },
    /*::[*/ 0x008F: {
        T: 1
    },
    /*::[*/ 0x0090: {
        T: -1
    },
    /*::[*/ 0x0091: {
        T: 1
    },
    /*::[*/ 0x0092: {
        T: -1
    },
    /*::[*/ 0x0093: {
        f: parse_BrtWsProp
    },
    /*::[*/ 0x0094: {
        f: parse_BrtWsDim,
        p: 16
    },
    /*::[*/ 0x0097: {
        f: parse_BrtPane
    },
    /*::[*/ 0x0098: {},
    /*::[*/ 0x0099: {
        f: parse_BrtWbProp
    },
    /*::[*/ 0x009A: {},
    /*::[*/ 0x009B: {},
    /*::[*/ 0x009C: {
        f: parse_BrtBundleSh
    },
    /*::[*/ 0x009D: {},
    /*::[*/ 0x009E: {},
    /*::[*/ 0x009F: {
        T: 1,
        f: parse_BrtBeginSst
    },
    /*::[*/ 0x00A0: {
        T: -1
    },
    /*::[*/ 0x00A1: {
        T: 1,
        f: parse_UncheckedRfX
    },
    /*::[*/ 0x00A2: {
        T: -1
    },
    /*::[*/ 0x00A3: {
        T: 1
    },
    /*::[*/ 0x00A4: {
        T: -1
    },
    /*::[*/ 0x00A5: {
        T: 1
    },
    /*::[*/ 0x00A6: {
        T: -1
    },
    /*::[*/ 0x00A7: {},
    /*::[*/ 0x00A8: {},
    /*::[*/ 0x00A9: {},
    /*::[*/ 0x00AA: {},
    /*::[*/ 0x00AB: {},
    /*::[*/ 0x00AC: {
        T: 1
    },
    /*::[*/ 0x00AD: {
        T: -1
    },
    /*::[*/ 0x00AE: {},
    /*::[*/ 0x00AF: {},
    /*::[*/ 0x00B0: {
        f: parse_BrtMergeCell
    },
    /*::[*/ 0x00B1: {
        T: 1
    },
    /*::[*/ 0x00B2: {
        T: -1
    },
    /*::[*/ 0x00B3: {
        T: 1
    },
    /*::[*/ 0x00B4: {
        T: -1
    },
    /*::[*/ 0x00B5: {
        T: 1
    },
    /*::[*/ 0x00B6: {
        T: -1
    },
    /*::[*/ 0x00B7: {
        T: 1
    },
    /*::[*/ 0x00B8: {
        T: -1
    },
    /*::[*/ 0x00B9: {
        T: 1
    },
    /*::[*/ 0x00BA: {
        T: -1
    },
    /*::[*/ 0x00BB: {
        T: 1
    },
    /*::[*/ 0x00BC: {
        T: -1
    },
    /*::[*/ 0x00BD: {
        T: 1
    },
    /*::[*/ 0x00BE: {
        T: -1
    },
    /*::[*/ 0x00BF: {
        T: 1
    },
    /*::[*/ 0x00C0: {
        T: -1
    },
    /*::[*/ 0x00C1: {
        T: 1
    },
    /*::[*/ 0x00C2: {
        T: -1
    },
    /*::[*/ 0x00C3: {
        T: 1
    },
    /*::[*/ 0x00C4: {
        T: -1
    },
    /*::[*/ 0x00C5: {
        T: 1
    },
    /*::[*/ 0x00C6: {
        T: -1
    },
    /*::[*/ 0x00C7: {
        T: 1
    },
    /*::[*/ 0x00C8: {
        T: -1
    },
    /*::[*/ 0x00C9: {
        T: 1
    },
    /*::[*/ 0x00CA: {
        T: -1
    },
    /*::[*/ 0x00CB: {
        T: 1
    },
    /*::[*/ 0x00CC: {
        T: -1
    },
    /*::[*/ 0x00CD: {
        T: 1
    },
    /*::[*/ 0x00CE: {
        T: -1
    },
    /*::[*/ 0x00CF: {
        T: 1
    },
    /*::[*/ 0x00D0: {
        T: -1
    },
    /*::[*/ 0x00D1: {
        T: 1
    },
    /*::[*/ 0x00D2: {
        T: -1
    },
    /*::[*/ 0x00D3: {
        T: 1
    },
    /*::[*/ 0x00D4: {
        T: -1
    },
    /*::[*/ 0x00D5: {
        T: 1
    },
    /*::[*/ 0x00D6: {
        T: -1
    },
    /*::[*/ 0x00D7: {
        T: 1
    },
    /*::[*/ 0x00D8: {
        T: -1
    },
    /*::[*/ 0x00D9: {
        T: 1
    },
    /*::[*/ 0x00DA: {
        T: -1
    },
    /*::[*/ 0x00DB: {
        T: 1
    },
    /*::[*/ 0x00DC: {
        T: -1
    },
    /*::[*/ 0x00DD: {
        T: 1
    },
    /*::[*/ 0x00DE: {
        T: -1
    },
    /*::[*/ 0x00DF: {
        T: 1
    },
    /*::[*/ 0x00E0: {
        T: -1
    },
    /*::[*/ 0x00E1: {
        T: 1
    },
    /*::[*/ 0x00E2: {
        T: -1
    },
    /*::[*/ 0x00E3: {
        T: 1
    },
    /*::[*/ 0x00E4: {
        T: -1
    },
    /*::[*/ 0x00E5: {
        T: 1
    },
    /*::[*/ 0x00E6: {
        T: -1
    },
    /*::[*/ 0x00E7: {
        T: 1
    },
    /*::[*/ 0x00E8: {
        T: -1
    },
    /*::[*/ 0x00E9: {
        T: 1
    },
    /*::[*/ 0x00EA: {
        T: -1
    },
    /*::[*/ 0x00EB: {
        T: 1
    },
    /*::[*/ 0x00EC: {
        T: -1
    },
    /*::[*/ 0x00ED: {
        T: 1
    },
    /*::[*/ 0x00EE: {
        T: -1
    },
    /*::[*/ 0x00EF: {
        T: 1
    },
    /*::[*/ 0x00F0: {
        T: -1
    },
    /*::[*/ 0x00F1: {
        T: 1
    },
    /*::[*/ 0x00F2: {
        T: -1
    },
    /*::[*/ 0x00F3: {
        T: 1
    },
    /*::[*/ 0x00F4: {
        T: -1
    },
    /*::[*/ 0x00F5: {
        T: 1
    },
    /*::[*/ 0x00F6: {
        T: -1
    },
    /*::[*/ 0x00F7: {
        T: 1
    },
    /*::[*/ 0x00F8: {
        T: -1
    },
    /*::[*/ 0x00F9: {
        T: 1
    },
    /*::[*/ 0x00FA: {
        T: -1
    },
    /*::[*/ 0x00FB: {
        T: 1
    },
    /*::[*/ 0x00FC: {
        T: -1
    },
    /*::[*/ 0x00FD: {
        T: 1
    },
    /*::[*/ 0x00FE: {
        T: -1
    },
    /*::[*/ 0x00FF: {
        T: 1
    },
    /*::[*/ 0x0100: {
        T: -1
    },
    /*::[*/ 0x0101: {
        T: 1
    },
    /*::[*/ 0x0102: {
        T: -1
    },
    /*::[*/ 0x0103: {
        T: 1
    },
    /*::[*/ 0x0104: {
        T: -1
    },
    /*::[*/ 0x0105: {
        T: 1
    },
    /*::[*/ 0x0106: {
        T: -1
    },
    /*::[*/ 0x0107: {
        T: 1
    },
    /*::[*/ 0x0108: {
        T: -1
    },
    /*::[*/ 0x0109: {
        T: 1
    },
    /*::[*/ 0x010A: {
        T: -1
    },
    /*::[*/ 0x010B: {
        T: 1
    },
    /*::[*/ 0x010C: {
        T: -1
    },
    /*::[*/ 0x010D: {
        T: 1
    },
    /*::[*/ 0x010E: {
        T: -1
    },
    /*::[*/ 0x010F: {
        T: 1
    },
    /*::[*/ 0x0110: {
        T: -1
    },
    /*::[*/ 0x0111: {
        T: 1
    },
    /*::[*/ 0x0112: {
        T: -1
    },
    /*::[*/ 0x0113: {
        T: 1
    },
    /*::[*/ 0x0114: {
        T: -1
    },
    /*::[*/ 0x0115: {},
    /*::[*/ 0x0116: {
        T: 1
    },
    /*::[*/ 0x0117: {
        T: -1
    },
    /*::[*/ 0x0118: {
        T: 1
    },
    /*::[*/ 0x0119: {
        T: -1
    },
    /*::[*/ 0x011A: {
        T: 1
    },
    /*::[*/ 0x011B: {
        T: 1
    },
    /*::[*/ 0x011C: {
        T: -1
    },
    /*::[*/ 0x011D: {
        T: 1
    },
    /*::[*/ 0x011E: {
        T: -1
    },
    /*::[*/ 0x011F: {
        T: 1
    },
    /*::[*/ 0x0120: {
        T: -1
    },
    /*::[*/ 0x0121: {
        T: 1
    },
    /*::[*/ 0x0122: {
        T: -1
    },
    /*::[*/ 0x0123: {
        T: 1
    },
    /*::[*/ 0x0124: {
        T: -1
    },
    /*::[*/ 0x0125: {
        T: 1
    },
    /*::[*/ 0x0126: {
        T: -1
    },
    /*::[*/ 0x0127: {
        T: 1
    },
    /*::[*/ 0x0128: {
        T: -1
    },
    /*::[*/ 0x0129: {
        T: 1
    },
    /*::[*/ 0x012A: {
        T: -1
    },
    /*::[*/ 0x012B: {
        T: 1
    },
    /*::[*/ 0x012C: {
        T: -1
    },
    /*::[*/ 0x012D: {
        T: 1
    },
    /*::[*/ 0x012E: {
        T: -1
    },
    /*::[*/ 0x012F: {
        T: 1
    },
    /*::[*/ 0x0130: {
        T: -1
    },
    /*::[*/ 0x0131: {
        T: 1
    },
    /*::[*/ 0x0132: {
        T: -1
    },
    /*::[*/ 0x0133: {
        T: 1
    },
    /*::[*/ 0x0134: {
        T: -1
    },
    /*::[*/ 0x0135: {
        T: 1
    },
    /*::[*/ 0x0136: {
        T: -1
    },
    /*::[*/ 0x0137: {
        T: 1
    },
    /*::[*/ 0x0138: {
        T: -1
    },
    /*::[*/ 0x0139: {
        T: -1
    },
    /*::[*/ 0x013A: {
        T: 1
    },
    /*::[*/ 0x013B: {
        T: -1
    },
    /*::[*/ 0x013C: {
        T: 1
    },
    /*::[*/ 0x013D: {
        T: -1
    },
    /*::[*/ 0x013E: {
        T: 1
    },
    /*::[*/ 0x013F: {
        T: -1
    },
    /*::[*/ 0x0140: {
        T: 1
    },
    /*::[*/ 0x0141: {
        T: -1
    },
    /*::[*/ 0x0142: {
        T: 1
    },
    /*::[*/ 0x0143: {
        T: -1
    },
    /*::[*/ 0x0144: {
        T: 1
    },
    /*::[*/ 0x0145: {
        T: -1
    },
    /*::[*/ 0x0146: {
        T: 1
    },
    /*::[*/ 0x0147: {
        T: -1
    },
    /*::[*/ 0x0148: {
        T: 1
    },
    /*::[*/ 0x0149: {
        T: -1
    },
    /*::[*/ 0x014A: {
        T: 1
    },
    /*::[*/ 0x014B: {
        T: -1
    },
    /*::[*/ 0x014C: {
        T: 1
    },
    /*::[*/ 0x014D: {
        T: -1
    },
    /*::[*/ 0x014E: {
        T: 1
    },
    /*::[*/ 0x014F: {
        f: parse_BrtMdtinfo
    },
    /*::[*/ 0x0150: {
        T: -1
    },
    /*::[*/ 0x0151: {
        f: parse_BrtBeginEsmdb,
        T: 1
    },
    /*::[*/ 0x0152: {
        T: -1
    },
    /*::[*/ 0x0153: {
        T: 1
    },
    /*::[*/ 0x0154: {
        T: -1
    },
    /*::[*/ 0x0155: {
        T: 1
    },
    /*::[*/ 0x0156: {
        T: -1
    },
    /*::[*/ 0x0157: {
        T: 1
    },
    /*::[*/ 0x0158: {
        T: -1
    },
    /*::[*/ 0x0159: {
        T: 1
    },
    /*::[*/ 0x015A: {
        T: -1
    },
    /*::[*/ 0x015B: {
        T: 1
    },
    /*::[*/ 0x015C: {
        T: -1
    },
    /*::[*/ 0x015D: {
        T: 1
    },
    /*::[*/ 0x015E: {
        T: -1
    },
    /*::[*/ 0x015F: {},
    /*::[*/ 0x0160: {},
    /*::[*/ 0x0161: {
        T: 1
    },
    /*::[*/ 0x0162: {
        T: -1
    },
    /*::[*/ 0x0163: {
        f: parse_RelID
    },
    /*::[*/ 0x0165: {},
    /*::[*/ 0x0166: {},
    /*::[*/ 0x0167: {},
    /*::[*/ 0x0168: {
        T: 1
    },
    /*::[*/ 0x0169: {},
    /*::[*/ 0x016A: {
        f: parse_ExternSheet
    },
    /*::[*/ 0x016B: {},
    /*::[*/ 0x016C: {},
    /*::[*/ 0x016E: {},
    /*::[*/ 0x016F: {},
    /*::[*/ 0x0170: {},
    /*::[*/ 0x0171: {},
    /*::[*/ 0x0172: {},
    /*::[*/ 0x0173: {},
    /*::[*/ 0x0174: {
        T: 1
    },
    /*::[*/ 0x0175: {
        T: -1
    },
    /*::[*/ 0x0176: {
        T: 1
    },
    /*::[*/ 0x0177: {
        T: -1
    },
    /*::[*/ 0x0178: {
        T: 1
    },
    /*::[*/ 0x0179: {
        T: -1
    },
    /*::[*/ 0x017A: {
        T: 1
    },
    /*::[*/ 0x017B: {
        T: -1
    },
    /*::[*/ 0x017C: {
        T: 1
    },
    /*::[*/ 0x017D: {
        T: -1
    },
    /*::[*/ 0x017E: {
        T: 1
    },
    /*::[*/ 0x017F: {
        T: -1
    },
    /*::[*/ 0x0180: {
        T: 1
    },
    /*::[*/ 0x0181: {
        T: -1
    },
    /*::[*/ 0x0182: {
        T: 1
    },
    /*::[*/ 0x0183: {
        T: -1
    },
    /*::[*/ 0x0184: {
        T: 1
    },
    /*::[*/ 0x0185: {
        T: -1
    },
    /*::[*/ 0x0186: {
        T: 1
    },
    /*::[*/ 0x0187: {
        T: -1
    },
    /*::[*/ 0x0188: {
        T: 1
    },
    /*::[*/ 0x0189: {
        T: -1
    },
    /*::[*/ 0x018A: {
        T: 1
    },
    /*::[*/ 0x018B: {
        T: -1
    },
    /*::[*/ 0x018C: {},
    /*::[*/ 0x018D: {},
    /*::[*/ 0x018E: {},
    /*::[*/ 0x018F: {},
    /*::[*/ 0x0190: {},
    /*::[*/ 0x0191: {
        T: 1
    },
    /*::[*/ 0x0193: {},
    /*::[*/ 0x0194: {},
    /*::[*/ 0x0195: {},
    /*::[*/ 0x0196: {},
    /*::[*/ 0x0197: {},
    /*::[*/ 0x0198: {},
    /*::[*/ 0x0199: {},
    /*::[*/ 0x019A: {},
    /*::[*/ 0x019B: {},
    /*::[*/ 0x019C: {},
    /*::[*/ 0x019D: {},
    /*::[*/ 0x019E: {},
    /*::[*/ 0x019F: {},
    /*::[*/ 0x01A0: {},
    /*::[*/ 0x01A1: {},
    /*::[*/ 0x01A2: {},
    /*::[*/ 0x01A3: {},
    /*::[*/ 0x01A4: {},
    /*::[*/ 0x01A5: {},
    /*::[*/ 0x01A6: {
        T: 1
    },
    /*::[*/ 0x01A7: {
        T: 1
    },
    /*::[*/ 0x01A8: {
        T: -1
    },
    /*::[*/ 0x01A9: {
        T: -1
    },
    /*::[*/ 0x01AA: {
        f: parse_BrtArrFmla
    },
    /*::[*/ 0x01AB: {
        f: parse_BrtShrFmla
    },
    /*::[*/ 0x01AC: {},
    /*::[*/ 0x01AD: {
        T: 1
    },
    /*::[*/ 0x01AE: {
        T: -1
    },
    /*::[*/ 0x01AF: {
        T: 1
    },
    /*::[*/ 0x01B0: {
        T: -1
    },
    /*::[*/ 0x01B1: {
        T: 1
    },
    /*::[*/ 0x01B2: {
        T: -1
    },
    /*::[*/ 0x01B3: {
        T: 1
    },
    /*::[*/ 0x01B4: {
        T: -1
    },
    /*::[*/ 0x01B5: {
        T: 1
    },
    /*::[*/ 0x01B6: {
        T: -1
    },
    /*::[*/ 0x01B7: {
        T: 1
    },
    /*::[*/ 0x01B8: {
        T: -1
    },
    /*::[*/ 0x01B9: {
        T: 1
    },
    /*::[*/ 0x01BA: {
        T: -1
    },
    /*::[*/ 0x01BB: {
        T: 1
    },
    /*::[*/ 0x01BC: {
        T: -1
    },
    /*::[*/ 0x01BD: {
        T: 1
    },
    /*::[*/ 0x01BE: {
        T: -1
    },
    /*::[*/ 0x01BF: {
        T: 1
    },
    /*::[*/ 0x01C0: {
        T: -1
    },
    /*::[*/ 0x01C1: {
        T: 1
    },
    /*::[*/ 0x01C2: {
        T: -1
    },
    /*::[*/ 0x01C3: {
        T: 1
    },
    /*::[*/ 0x01C4: {
        T: -1
    },
    /*::[*/ 0x01C5: {
        T: 1
    },
    /*::[*/ 0x01C6: {
        T: -1
    },
    /*::[*/ 0x01C7: {
        T: 1
    },
    /*::[*/ 0x01C8: {
        T: -1
    },
    /*::[*/ 0x01C9: {
        T: 1
    },
    /*::[*/ 0x01CA: {
        T: -1
    },
    /*::[*/ 0x01CB: {
        T: 1
    },
    /*::[*/ 0x01CC: {
        T: -1
    },
    /*::[*/ 0x01CD: {
        T: 1
    },
    /*::[*/ 0x01CE: {
        T: -1
    },
    /*::[*/ 0x01CF: {
        T: 1
    },
    /*::[*/ 0x01D0: {
        T: -1
    },
    /*::[*/ 0x01D1: {
        T: 1
    },
    /*::[*/ 0x01D2: {
        T: -1
    },
    /*::[*/ 0x01D3: {
        T: 1
    },
    /*::[*/ 0x01D4: {
        T: -1
    },
    /*::[*/ 0x01D5: {
        T: 1
    },
    /*::[*/ 0x01D6: {
        T: -1
    },
    /*::[*/ 0x01D7: {},
    /*::[*/ 0x01D8: {},
    /*::[*/ 0x01D9: {
        T: 1
    },
    /*::[*/ 0x01DA: {
        T: -1
    },
    /*::[*/ 0x01DB: {},
    /*::[*/ 0x01DC: {
        f: parse_BrtMargins
    },
    /*::[*/ 0x01DD: {},
    /*::[*/ 0x01DE: {},
    /*::[*/ 0x01DF: {
        T: 1
    },
    /*::[*/ 0x01E0: {
        T: -1
    },
    /*::[*/ 0x01E1: {
        T: 1
    },
    /*::[*/ 0x01E2: {
        T: -1
    },
    /*::[*/ 0x01E3: {
        T: 1
    },
    /*::[*/ 0x01E4: {
        T: -1
    },
    /*::[*/ 0x01E5: {
        f: parse_BrtWsFmtInfo
    },
    /*::[*/ 0x01E6: {
        T: 1
    },
    /*::[*/ 0x01E7: {
        T: -1
    },
    /*::[*/ 0x01E8: {
        T: 1
    },
    /*::[*/ 0x01E9: {
        T: -1
    },
    /*::[*/ 0x01EA: {
        T: 1
    },
    /*::[*/ 0x01EB: {
        T: -1
    },
    /*::[*/ 0x01EC: {
        T: 1
    },
    /*::[*/ 0x01ED: {
        T: -1
    },
    /*::[*/ 0x01EE: {
        f: parse_BrtHLink
    },
    /*::[*/ 0x01EF: {
        T: 1
    },
    /*::[*/ 0x01F0: {
        T: -1
    },
    /*::[*/ 0x01F1: {
        T: 1
    },
    /*::[*/ 0x01F2: {
        T: -1
    },
    /*::[*/ 0x01F3: {},
    /*::[*/ 0x01F4: {
        T: 1
    },
    /*::[*/ 0x01F5: {
        T: -1
    },
    /*::[*/ 0x01F6: {
        T: 1
    },
    /*::[*/ 0x01F7: {
        T: -1
    },
    /*::[*/ 0x01F8: {},
    /*::[*/ 0x01F9: {
        T: 1
    },
    /*::[*/ 0x01FA: {
        T: -1
    },
    /*::[*/ 0x01FB: {},
    /*::[*/ 0x01FC: {
        T: 1
    },
    /*::[*/ 0x01FD: {
        T: -1
    },
    /*::[*/ 0x01FE: {
        T: 1
    },
    /*::[*/ 0x01FF: {
        T: -1
    },
    /*::[*/ 0x0200: {},
    /*::[*/ 0x0201: {},
    /*::[*/ 0x0202: {
        T: 1
    },
    /*::[*/ 0x0203: {
        T: -1
    },
    /*::[*/ 0x0204: {
        T: 1
    },
    /*::[*/ 0x0205: {
        T: -1
    },
    /*::[*/ 0x0206: {
        T: 1
    },
    /*::[*/ 0x0207: {
        T: -1
    },
    /*::[*/ 0x0208: {
        T: 1
    },
    /*::[*/ 0x0209: {
        T: -1
    },
    /*::[*/ 0x020A: {},
    /*::[*/ 0x020B: {},
    /*::[*/ 0x020C: {},
    /*::[*/ 0x020D: {},
    /*::[*/ 0x020E: {},
    /*::[*/ 0x020F: {},
    /*::[*/ 0x0210: {
        T: 1
    },
    /*::[*/ 0x0211: {
        T: -1
    },
    /*::[*/ 0x0212: {
        T: 1
    },
    /*::[*/ 0x0213: {
        T: -1
    },
    /*::[*/ 0x0214: {
        T: 1
    },
    /*::[*/ 0x0215: {
        T: -1
    },
    /*::[*/ 0x0216: {},
    /*::[*/ 0x0217: {},
    /*::[*/ 0x0218: {},
    /*::[*/ 0x0219: {},
    /*::[*/ 0x021A: {
        T: 1
    },
    /*::[*/ 0x021B: {
        T: -1
    },
    /*::[*/ 0x021C: {
        T: 1
    },
    /*::[*/ 0x021D: {
        T: -1
    },
    /*::[*/ 0x021E: {
        T: 1
    },
    /*::[*/ 0x0224: {},
    /*::[*/ 0x0225: {},
    /*::[*/ 0x0226: {
        f: parse_RelID
    },
    /*::[*/ 0x0227: {},
    /*::[*/ 0x0228: {},
    /*::[*/ 0x0229: {},
    /*::[*/ 0x022A: {
        T: 1
    },
    /*::[*/ 0x022B: {
        T: -1
    },
    /*::[*/ 0x022C: {
        T: 1
    },
    /*::[*/ 0x022D: {
        T: -1
    },
    /*::[*/ 0x022E: {
        T: 1
    },
    /*::[*/ 0x022F: {
        T: -1
    },
    /*::[*/ 0x0230: {
        T: 1
    },
    /*::[*/ 0x0231: {
        T: -1
    },
    /*::[*/ 0x0232: {},
    /*::[*/ 0x0234: {},
    /*::[*/ 0x0235: {
        T: 1
    },
    /*::[*/ 0x0236: {
        T: -1
    },
    /*::[*/ 0x0239: {
        T: 1
    },
    /*::[*/ 0x023A: {
        T: -1
    },
    /*::[*/ 0x023C: {},
    /*::[*/ 0x023D: {
        T: 1
    },
    /*::[*/ 0x023E: {
        T: -1
    },
    /*::[*/ 0x0241: {},
    /*::[*/ 0x0242: {},
    /*::[*/ 0x0243: {},
    /*::[*/ 0x0244: {},
    /*::[*/ 0x0245: {},
    /*::[*/ 0x0246: {},
    /*::[*/ 0x0247: {},
    /*::[*/ 0x0248: {},
    /*::[*/ 0x0249: {},
    /*::[*/ 0x024A: {},
    /*::[*/ 0x024B: {},
    /*::[*/ 0x024C: {
        T: -1
    },
    /*::[*/ 0x024D: {},
    /*::[*/ 0x024E: {
        T: 1
    },
    /*::[*/ 0x024F: {
        T: -1
    },
    /*::[*/ 0x0250: {
        T: 1
    },
    /*::[*/ 0x0251: {
        T: -1
    },
    /*::[*/ 0x0252: {
        T: 1
    },
    /*::[*/ 0x0253: {
        T: -1
    },
    /*::[*/ 0x0254: {},
    /*::[*/ 0x0255: {
        T: 1
    },
    /*::[*/ 0x0256: {
        T: -1
    },
    /*::[*/ 0x0257: {
        T: 1
    },
    /*::[*/ 0x0258: {
        T: -1
    },
    /*::[*/ 0x0259: {
        T: 1
    },
    /*::[*/ 0x025A: {
        T: -1
    },
    /*::[*/ 0x025B: {
        T: 1
    },
    /*::[*/ 0x025C: {
        T: -1
    },
    /*::[*/ 0x025D: {
        T: 1
    },
    /*::[*/ 0x025E: {
        T: -1
    },
    /*::[*/ 0x025F: {},
    /*::[*/ 0x0260: {
        T: 1
    },
    /*::[*/ 0x0261: {
        T: -1
    },
    /*::[*/ 0x0262: {},
    /*::[*/ 0x0263: {
        T: 1
    },
    /*::[*/ 0x0264: {
        T: -1
    },
    /*::[*/ 0x0265: {
        T: 1
    },
    /*::[*/ 0x0266: {
        T: -1
    },
    /*::[*/ 0x0267: {
        T: 1
    },
    /*::[*/ 0x0268: {
        T: -1
    },
    /*::[*/ 0x0269: {
        T: 1
    },
    /*::[*/ 0x026A: {
        T: -1
    },
    /*::[*/ 0x026B: {
        T: 1
    },
    /*::[*/ 0x026C: {
        T: -1
    },
    /*::[*/ 0x0271: {},
    /*::[*/ 0x0272: {
        T: 1
    },
    /*::[*/ 0x0273: {
        T: -1
    },
    /*::[*/ 0x0274: {
        T: 1
    },
    /*::[*/ 0x0275: {
        T: -1
    },
    /*::[*/ 0x0276: {
        T: 1
    },
    /*::[*/ 0x0277: {
        T: -1
    },
    /*::[*/ 0x0278: {
        f: parse_BrtCommentAuthor
    },
    /*::[*/ 0x0279: {
        T: 1
    },
    /*::[*/ 0x027A: {
        T: -1
    },
    /*::[*/ 0x027B: {
        T: 1,
        f: parse_BrtBeginComment
    },
    /*::[*/ 0x027C: {
        T: -1
    },
    /*::[*/ 0x027D: {
        f: parse_BrtCommentText
    },
    /*::[*/ 0x027E: {
        T: 1
    },
    /*::[*/ 0x027F: {},
    /*::[*/ 0x0280: {
        T: -1
    },
    /*::[*/ 0x0281: {
        T: 1
    },
    /*::[*/ 0x0282: {
        T: -1
    },
    /*::[*/ 0x0283: {
        T: 1
    },
    /*::[*/ 0x0284: {},
    /*::[*/ 0x0285: {
        T: -1
    },
    /*::[*/ 0x0286: {
        T: 1
    },
    /*::[*/ 0x0288: {
        T: 1
    },
    /*::[*/ 0x0289: {},
    /*::[*/ 0x028A: {
        T: -1
    },
    /*::[*/ 0x028B: {
        f: parse_BrtCsProp
    },
    /*::[*/ 0x028C: {},
    /*::[*/ 0x028D: {
        T: 1
    },
    /*::[*/ 0x028E: {
        T: -1
    },
    /*::[*/ 0x028F: {
        T: 1
    },
    /*::[*/ 0x0290: {
        T: -1
    },
    /*::[*/ 0x0291: {
        T: 1
    },
    /*::[*/ 0x0292: {
        T: -1
    },
    /*::[*/ 0x0293: {},
    /*::[*/ 0x0294: {
        T: 1
    },
    /*::[*/ 0x0295: {},
    /*::[*/ 0x0296: {
        T: -1
    },
    /*::[*/ 0x0297: {},
    /*::[*/ 0x0298: {
        T: 1
    },
    /*::[*/ 0x0299: {},
    /*::[*/ 0x029A: {
        T: -1
    },
    /*::[*/ 0x029B: {},
    /*::[*/ 0x029C: {},
    /*::[*/ 0x029D: {},
    /*::[*/ 0x029F: {
        T: 1
    },
    /*::[*/ 0x02A0: {
        T: -1
    },
    /*::[*/ 0x02A1: {
        T: 1
    },
    /*::[*/ 0x02A2: {
        T: -1
    },
    /*::[*/ 0x02A3: {},
    /*::[*/ 0x02A4: {},
    /*::[*/ 0x02A5: {},
    /*::[*/ 0x02A6: {},
    /*::[*/ 0x02A7: {},
    /*::[*/ 0x02A8: {},
    /*::[*/ 0x02A9: {},
    /*::[*/ 0x0400: {},
    /*::[*/ 0x0401: {},
    /*::[*/ 0x0402: {
        T: 1
    },
    /*::[*/ 0x0403: {
        T: -1
    },
    /*::[*/ 0x0404: {
        T: 1
    },
    /*::[*/ 0x0405: {
        T: -1
    },
    /*::[*/ 0x0406: {},
    /*::[*/ 0x0407: {
        T: 1
    },
    /*::[*/ 0x0408: {
        T: -1
    },
    /*::[*/ 0x0409: {
        T: 1
    },
    /*::[*/ 0x040A: {
        T: -1
    },
    /*::[*/ 0x040B: {},
    /*::[*/ 0x040C: {},
    /*::[*/ 0x040D: {},
    /*::[*/ 0x040E: {
        T: 1
    },
    /*::[*/ 0x040F: {
        T: -1
    },
    /*::[*/ 0x0410: {},
    /*::[*/ 0x0411: {
        T: 1
    },
    /*::[*/ 0x0412: {
        T: -1
    },
    /*::[*/ 0x0413: {},
    /*::[*/ 0x0414: {},
    /*::[*/ 0x0415: {},
    /*::[*/ 0x0416: {
        T: 1
    },
    /*::[*/ 0x0417: {
        T: -1
    },
    /*::[*/ 0x0418: {
        T: 1
    },
    /*::[*/ 0x0419: {
        T: -1
    },
    /*::[*/ 0x041A: {},
    /*::[*/ 0x041B: {
        T: 1
    },
    /*::[*/ 0x041C: {
        T: 1
    },
    /*::[*/ 0x041D: {
        f: parse_BrtDVal14
    },
    /*::[*/ 0x041E: {
        T: 1
    },
    /*::[*/ 0x041F: {},
    /*::[*/ 0x0420: {
        T: 1
    },
    /*::[*/ 0x0421: {
        T: -1
    },
    /*::[*/ 0x0422: {
        T: 1
    },
    /*::[*/ 0x0423: {
        T: -1
    },
    /*::[*/ 0x0425: {},
    /*::[*/ 0x0426: {
        T: 1
    },
    /*::[*/ 0x0427: {
        T: -1
    },
    /*::[*/ 0x0428: {
        T: 1
    },
    /*::[*/ 0x0429: {
        T: -1
    },
    /*::[*/ 0x042A: {
        T: 1
    },
    /*::[*/ 0x042B: {
        T: -1
    },
    /*::[*/ 0x042C: {
        T: 1
    },
    /*::[*/ 0x042D: {
        T: -1
    },
    /*::[*/ 0x042E: {
        T: 1
    },
    /*::[*/ 0x042F: {
        T: -1
    },
    /*::[*/ 0x0430: {
        T: 1
    },
    /*::[*/ 0x0431: {
        T: -1
    },
    /*::[*/ 0x0433: {
        T: 1
    },
    /*::[*/ 0x0434: {
        T: -1
    },
    /*::[*/ 0x0435: {
        T: 1
    },
    /*::[*/ 0x0436: {
        T: -1
    },
    /*::[*/ 0x0437: {
        T: 1
    },
    /*::[*/ 0x0438: {
        T: -1
    },
    /*::[*/ 0x0439: {
        T: 1
    },
    /*::[*/ 0x043A: {
        T: -1
    },
    /*::[*/ 0x043B: {
        T: 1
    },
    /*::[*/ 0x043C: {
        T: -1
    },
    /*::[*/ 0x043D: {},
    /*::[*/ 0x043E: {
        T: 1
    },
    /*::[*/ 0x043F: {
        T: -1
    },
    /*::[*/ 0x0440: {
        T: 1
    },
    /*::[*/ 0x0441: {
        T: -1
    },
    /*::[*/ 0x0442: {
        T: 1
    },
    /*::[*/ 0x0443: {
        T: -1
    },
    /*::[*/ 0x0444: {
        T: 1
    },
    /*::[*/ 0x0445: {
        T: -1
    },
    /*::[*/ 0x0446: {
        T: 1
    },
    /*::[*/ 0x0447: {
        T: -1
    },
    /*::[*/ 0x0448: {},
    /*::[*/ 0x0449: {
        T: 1
    },
    /*::[*/ 0x044A: {},
    /*::[*/ 0x044B: {
        T: -1
    },
    /*::[*/ 0x044C: {
        T: 1
    },
    /*::[*/ 0x044D: {
        T: -1
    },
    /*::[*/ 0x044E: {},
    /*::[*/ 0x044F: {},
    /*::[*/ 0x0450: {},
    /*::[*/ 0x0451: {},
    /*::[*/ 0x0457: {},
    /*::[*/ 0x0458: {},
    /*::[*/ 0x0459: {
        T: 1
    },
    /*::[*/ 0x045A: {
        T: -1
    },
    /*::[*/ 0x045B: {
        T: 1
    },
    /*::[*/ 0x045C: {
        T: -1
    },
    /*::[*/ 0x045D: {},
    /*::[*/ 0x045E: {
        T: 1
    },
    /*::[*/ 0x045F: {
        T: -1
    },
    /*::[*/ 0x0460: {
        T: 1
    },
    /*::[*/ 0x0461: {
        T: -1
    },
    /*::[*/ 0x0462: {
        T: 1
    },
    /*::[*/ 0x0463: {
        T: -1
    },
    /*::[*/ 0x0464: {
        T: 1
    },
    /*::[*/ 0x0465: {
        T: -1
    },
    /*::[*/ 0x0466: {},
    /*::[*/ 0x0468: {
        T: 1
    },
    /*::[*/ 0x0469: {
        T: -1
    },
    /*::[*/ 0x046A: {},
    /*::[*/ 0x046B: {
        T: 1
    },
    /*::[*/ 0x046C: {
        T: -1
    },
    /*::[*/ 0x046D: {
        T: 1
    },
    /*::[*/ 0x046E: {
        T: -1
    },
    /*::[*/ 0x046F: {
        T: 1
    },
    /*::[*/ 0x0470: {
        T: -1
    },
    /*::[*/ 0x0471: {
        T: 1
    },
    /*::[*/ 0x0472: {
        T: -1
    },
    /*::[*/ 0x0473: {
        T: 1
    },
    /*::[*/ 0x0474: {
        T: -1
    },
    /*::[*/ 0x0475: {},
    /*::[*/ 0x0476: {
        T: 1
    },
    /*::[*/ 0x0477: {
        T: -1
    },
    /*::[*/ 0x0478: {
        T: 1
    },
    /*::[*/ 0x0479: {
        T: -1
    },
    /*::[*/ 0x047A: {},
    /*::[*/ 0x047B: {
        T: 1
    },
    /*::[*/ 0x047C: {
        T: -1
    },
    /*::[*/ 0x047D: {
        T: 1
    },
    /*::[*/ 0x047E: {
        T: -1
    },
    /*::[*/ 0x0480: {
        T: 1
    },
    /*::[*/ 0x0481: {
        T: -1
    },
    /*::[*/ 0x0482: {
        T: -1
    },
    /*::[*/ 0x0483: {
        T: -1
    },
    /*::[*/ 0x0484: {
        T: -1
    },
    /*::[*/ 0x0485: {
        T: 1
    },
    /*::[*/ 0x0486: {
        T: -1
    },
    /*::[*/ 0x0487: {
        T: 1
    },
    /*::[*/ 0x0488: {
        T: -1
    },
    /*::[*/ 0x0489: {
        T: 1
    },
    /*::[*/ 0x048A: {
        T: -1
    },
    /*::[*/ 0x048B: {
        T: 1
    },
    /*::[*/ 0x048C: {
        T: -1
    },
    /*::[*/ 0x048D: {
        T: 1
    },
    /*::[*/ 0x048E: {
        T: -1
    },
    /*::[*/ 0x048F: {
        T: 1
    },
    /*::[*/ 0x0490: {
        T: -1
    },
    /*::[*/ 0x0491: {
        T: 1
    },
    /*::[*/ 0x0492: {
        T: -1
    },
    /*::[*/ 0x0493: {},
    /*::[*/ 0x0494: {
        T: 1
    },
    /*::[*/ 0x0495: {
        T: -1
    },
    /*::[*/ 0x0499: {},
    /*::[*/ 0x049A: {
        T: 1
    },
    /*::[*/ 0x049C: {},
    /*::[*/ 0x049D: {},
    /*::[*/ 0x049E: {},
    /*::[*/ 0x0800: {
        T: 1
    },
    /*::[*/ 0x0801: {
        T: -1
    },
    /*::[*/ 0x0802: {},
    /*::[*/ 0x0803: {
        T: 1
    },
    /*::[*/ 0x0804: {
        T: -1
    },
    /*::[*/ 0x0805: {},
    /*::[*/ 0x0806: {},
    /*::[*/ 0x0807: {
        T: 1
    },
    /*::[*/ 0x0808: {
        T: -1
    },
    /*::[*/ 0x0809: {
        T: 1
    },
    /*::[*/ 0x080A: {
        T: -1
    },
    /*::[*/ 0x080C: {},
    /*::[*/ 0x0813: {},
    /*::[*/ 0x0814: {
        T: 1
    },
    /*::[*/ 0x0815: {
        T: -1
    },
    /*::[*/ 0x0816: {},
    /*::[*/ 0x0817: {},
    /*::[*/ 0x0818: {
        T: 1
    },
    /*::[*/ 0x0819: {
        T: -1
    },
    /*::[*/ 0x081B: {},
    /*::[*/ 0x081C: {},
    /*::[*/ 0x081D: {
        T: 1
    },
    /*::[*/ 0x081E: {
        T: -1
    },
    /*::[*/ 0x081F: {},
    /*::[*/ 0x0820: {
        T: 1
    },
    /*::[*/ 0x0821: {
        T: -1
    },
    /*::[*/ 0x0822: {},
    /*::[*/ 0x0823: {
        T: 1
    },
    /*::[*/ 0x0824: {
        T: -1
    },
    /*::[*/ 0x0825: {
        T: 1
    },
    /*::[*/ 0x0826: {
        T: -1
    },
    /*::[*/ 0x0827: {
        T: 1
    },
    /*::[*/ 0x0828: {
        T: -1
    },
    /*::[*/ 0x0829: {
        T: 1
    },
    /*::[*/ 0x082A: {
        T: -1
    },
    /*::[*/ 0x082B: {},
    /*::[*/ 0x082C: {},
    /*::[*/ 0x082D: {
        T: 1
    },
    /*::[*/ 0x082E: {
        T: -1
    },
    /*::[*/ 0x082F: {},
    /*::[*/ 0x0830: {
        T: 1
    },
    /*::[*/ 0x0831: {
        T: -1
    },
    /*::[*/ 0x0832: {
        T: 1
    },
    /*::[*/ 0x0833: {
        T: -1
    },
    /*::[*/ 0x0834: {
        T: 1
    },
    /*::[*/ 0x0835: {
        T: -1
    },
    /*::[*/ 0x0836: {},
    /*::[*/ 0x0837: {
        T: 1
    },
    /*::[*/ 0x0838: {
        T: -1
    },
    /*::[*/ 0x0839: {},
    /*::[*/ 0x083A: {
        T: 1
    },
    /*::[*/ 0x083B: {
        T: -1
    },
    /*::[*/ 0x083C: {},
    /*::[*/ 0x083D: {
        T: 1
    },
    /*::[*/ 0x083E: {
        T: -1
    },
    /*::[*/ 0x083F: {
        T: 1
    },
    /*::[*/ 0x0840: {
        T: -1
    },
    /*::[*/ 0x0841: {
        T: 1
    },
    /*::[*/ 0x0842: {
        T: -1
    },
    /*::[*/ 0x0843: {},
    /*::[*/ 0x0844: {},
    /*::[*/ 0x0845: {},
    /*::[*/ 0x0846: {
        T: 1
    },
    /*::[*/ 0x0847: {
        T: -1
    },
    /*::[*/ 0x0848: {},
    /*::[*/ 0x0849: {
        T: 1
    },
    /*::[*/ 0x084A: {
        T: -1
    },
    /*::[*/ 0x084B: {
        T: 1
    },
    /*::[*/ 0x084C: {
        T: -1
    },
    /*::[*/ 0x084D: {},
    /*::[*/ 0x084E: {
        T: 1
    },
    /*::[*/ 0x084F: {
        T: -1
    },
    /*::[*/ 0x0850: {},
    /*::[*/ 0x0851: {
        T: 1
    },
    /*::[*/ 0x0852: {
        T: -1
    },
    /*::[*/ 0x0853: {
        T: 1
    },
    /*::[*/ 0x0854: {
        T: -1
    },
    /*::[*/ 0x0855: {
        T: 1
    },
    /*::[*/ 0x0856: {},
    /*::[*/ 0x0857: {},
    /*::[*/ 0x0858: {},
    /*::[*/ 0x0859: {
        T: 1
    },
    /*::[*/ 0x085A: {
        T: -1
    },
    /*::[*/ 0x085B: {
        T: 1
    },
    /*::[*/ 0x085C: {
        T: -1
    },
    /*::[*/ 0x085D: {},
    /*::[*/ 0x0C00: {},
    /*::[*/ 0x0C01: {},
    /*::[*/ 0x1000: {
        T: 1
    },
    /*::[*/ 0x1001: {
        T: -1
    },
    /*::[*/ 0x138A: {
        T: 1
    },
    /*::[*/ 0x138B: {
        T: -1
    },
    /*::[*/ 0x13D9: {
        T: 1
    },
    /*::[*/ 0x13DA: {
        T: -1
    },
    /*::[*/ 0x13DB: {},
    /*::[*/ 0x13DC: {
        T: 1
    },
    /*::[*/ 0x13DD: {
        T: -1
    },
    /*::[*/ 0x13DE: {
        T: 1
    },
    /*::[*/ 0x13DF: {
        T: -1
    },
    /*::[*/ 0x13E0: {},
    /*::[*/ 0x13E1: {},
    /*::[*/ 0x13E2: {},
    /*::[*/ 0x13E4: {
        T: 1
    },
    /*::[*/ 0x13E5: {
        T: -1
    },
    /*::[*/ 0x13E6: {},
    /*::[*/ 0x13E7: {
        T: 1
    },
    /*::[*/ 0x13E8: {
        T: -1
    },
    /*::[*/ 0x13E9: {},
    /*::[*/ 0x13EB: {},
    /*::[*/ 0xFFFF: {
        n: ""
    }
};
/* [MS-XLS] 2.3 Record Enumeration (and other sources) */ var XLSRecordEnum = {
    /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */ /*::[*/ 0x0006: {
        f: parse_Formula
    },
    /*::[*/ 0x000a: {
        f: parsenoop2
    },
    /*::[*/ 0x000c: {
        f: parseuint16
    },
    /*::[*/ 0x000d: {
        f: parseuint16
    },
    /*::[*/ 0x000e: {
        f: parsebool
    },
    /*::[*/ 0x000f: {
        f: parsebool
    },
    /*::[*/ 0x0010: {
        f: parse_Xnum
    },
    /*::[*/ 0x0011: {
        f: parsebool
    },
    /*::[*/ 0x0012: {
        f: parsebool
    },
    /*::[*/ 0x0013: {
        f: parseuint16
    },
    /*::[*/ 0x0014: {
        f: parse_XLHeaderFooter
    },
    /*::[*/ 0x0015: {
        f: parse_XLHeaderFooter
    },
    /*::[*/ 0x0017: {
        f: parse_ExternSheet
    },
    /*::[*/ 0x0018: {
        f: parse_Lbl
    },
    /*::[*/ 0x0019: {
        f: parsebool
    },
    /*::[*/ 0x001a: {},
    /*::[*/ 0x001b: {},
    /*::[*/ 0x001c: {
        f: parse_Note
    },
    /*::[*/ 0x001d: {},
    /*::[*/ 0x0022: {
        f: parsebool
    },
    /*::[*/ 0x0023: {
        f: parse_ExternName
    },
    /*::[*/ 0x0026: {
        f: parse_Xnum
    },
    /*::[*/ 0x0027: {
        f: parse_Xnum
    },
    /*::[*/ 0x0028: {
        f: parse_Xnum
    },
    /*::[*/ 0x0029: {
        f: parse_Xnum
    },
    /*::[*/ 0x002a: {
        f: parsebool
    },
    /*::[*/ 0x002b: {
        f: parsebool
    },
    /*::[*/ 0x002f: {
        f: parse_FilePass
    },
    /*::[*/ 0x0031: {
        f: parse_Font
    },
    /*::[*/ 0x0033: {
        f: parseuint16
    },
    /*::[*/ 0x003c: {},
    /*::[*/ 0x003d: {
        f: parse_Window1
    },
    /*::[*/ 0x0040: {
        f: parsebool
    },
    /*::[*/ 0x0041: {
        f: parse_Pane
    },
    /*::[*/ 0x0042: {
        f: parseuint16
    },
    /*::[*/ 0x004d: {},
    /*::[*/ 0x0050: {},
    /*::[*/ 0x0051: {},
    /*::[*/ 0x0052: {},
    /*::[*/ 0x0055: {
        f: parseuint16
    },
    /*::[*/ 0x0059: {},
    /*::[*/ 0x005a: {},
    /*::[*/ 0x005b: {},
    /*::[*/ 0x005c: {
        f: parse_WriteAccess
    },
    /*::[*/ 0x005d: {
        f: parse_Obj
    },
    /*::[*/ 0x005e: {},
    /*::[*/ 0x005f: {
        f: parsebool
    },
    /*::[*/ 0x0060: {},
    /*::[*/ 0x0061: {},
    /*::[*/ 0x0063: {
        f: parsebool
    },
    /*::[*/ 0x007d: {
        f: parse_ColInfo
    },
    /*::[*/ 0x0080: {
        f: parse_Guts
    },
    /*::[*/ 0x0081: {
        f: parse_WsBool
    },
    /*::[*/ 0x0082: {
        f: parseuint16
    },
    /*::[*/ 0x0083: {
        f: parsebool
    },
    /*::[*/ 0x0084: {
        f: parsebool
    },
    /*::[*/ 0x0085: {
        f: parse_BoundSheet8
    },
    /*::[*/ 0x0086: {},
    /*::[*/ 0x008c: {
        f: parse_Country
    },
    /*::[*/ 0x008d: {
        f: parseuint16
    },
    /*::[*/ 0x0090: {},
    /*::[*/ 0x0092: {
        f: parse_Palette
    },
    /*::[*/ 0x0097: {},
    /*::[*/ 0x0098: {},
    /*::[*/ 0x0099: {},
    /*::[*/ 0x009a: {},
    /*::[*/ 0x009b: {},
    /*::[*/ 0x009c: {
        f: parseuint16
    },
    /*::[*/ 0x009d: {},
    /*::[*/ 0x009e: {},
    /*::[*/ 0x00a0: {
        f: parse_Scl
    },
    /*::[*/ 0x00a1: {
        f: parse_Setup
    },
    /*::[*/ 0x00ae: {},
    /*::[*/ 0x00af: {},
    /*::[*/ 0x00b0: {},
    /*::[*/ 0x00b1: {},
    /*::[*/ 0x00b2: {},
    /*::[*/ 0x00b4: {},
    /*::[*/ 0x00b5: {},
    /*::[*/ 0x00b6: {},
    /*::[*/ 0x00b8: {},
    /*::[*/ 0x00b9: {},
    /*::[*/ 0x00bd: {
        f: parse_MulRk
    },
    /*::[*/ 0x00be: {
        f: parse_MulBlank
    },
    /*::[*/ 0x00c1: {
        f: parsenoop2
    },
    /*::[*/ 0x00c5: {},
    /*::[*/ 0x00c6: {},
    /*::[*/ 0x00c7: {},
    /*::[*/ 0x00c8: {},
    /*::[*/ 0x00c9: {},
    /*::[*/ 0x00ca: {
        f: parsebool
    },
    /*::[*/ 0x00cb: {},
    /*::[*/ 0x00cc: {},
    /*::[*/ 0x00cd: {},
    /*::[*/ 0x00ce: {},
    /*::[*/ 0x00cf: {},
    /*::[*/ 0x00d0: {},
    /*::[*/ 0x00d1: {},
    /*::[*/ 0x00d2: {},
    /*::[*/ 0x00d3: {},
    /*::[*/ 0x00d5: {},
    /*::[*/ 0x00d7: {},
    /*::[*/ 0x00d8: {},
    /*::[*/ 0x00d9: {},
    /*::[*/ 0x00da: {
        f: parseuint16
    },
    /*::[*/ 0x00dc: {},
    /*::[*/ 0x00dd: {
        f: parsebool
    },
    /*::[*/ 0x00de: {},
    /*::[*/ 0x00e0: {
        f: parse_XF
    },
    /*::[*/ 0x00e1: {
        f: parse_InterfaceHdr
    },
    /*::[*/ 0x00e2: {
        f: parsenoop2
    },
    /*::[*/ 0x00e3: {},
    /*::[*/ 0x00e5: {
        f: parse_MergeCells
    },
    /*::[*/ 0x00e9: {},
    /*::[*/ 0x00eb: {},
    /*::[*/ 0x00ec: {},
    /*::[*/ 0x00ed: {},
    /*::[*/ 0x00ef: {},
    /*::[*/ 0x00f0: {},
    /*::[*/ 0x00f1: {},
    /*::[*/ 0x00f2: {},
    /*::[*/ 0x00f4: {},
    /*::[*/ 0x00f5: {},
    /*::[*/ 0x00f6: {},
    /*::[*/ 0x00f7: {},
    /*::[*/ 0x00f8: {},
    /*::[*/ 0x00f9: {},
    /*::[*/ 0x00fb: {},
    /*::[*/ 0x00fc: {
        f: parse_SST
    },
    /*::[*/ 0x00fd: {
        f: parse_LabelSst
    },
    /*::[*/ 0x00ff: {
        f: parse_ExtSST
    },
    /*::[*/ 0x0100: {},
    /*::[*/ 0x0103: {},
    /*::[*/ 0x0122: {},
    /*::[*/ 0x0137: {},
    /*::[*/ 0x0138: {},
    /*::[*/ 0x013b: {},
    /*::[*/ 0x013d: {
        f: parseuint16a
    },
    /*::[*/ 0x013e: {},
    /*::[*/ 0x013f: {},
    /*::[*/ 0x0140: {},
    /*::[*/ 0x014a: {},
    /*::[*/ 0x014b: {},
    /*::[*/ 0x014d: {},
    /*::[*/ 0x014e: {},
    /*::[*/ 0x014f: {},
    /*::[*/ 0x0150: {},
    /*::[*/ 0x0151: {},
    /*::[*/ 0x0152: {},
    /*::[*/ 0x0153: {},
    /*::[*/ 0x0154: {},
    /*::[*/ 0x015f: {},
    /*::[*/ 0x0160: {
        f: parsebool
    },
    /*::[*/ 0x0161: {
        f: parsenoop2
    },
    /*::[*/ 0x0191: {},
    /*::[*/ 0x0192: {},
    /*::[*/ 0x0193: {},
    /*::[*/ 0x0194: {},
    /*::[*/ 0x0195: {},
    /*::[*/ 0x0196: {},
    /*::[*/ 0x0197: {},
    /*::[*/ 0x0198: {},
    /*::[*/ 0x01a9: {},
    /*::[*/ 0x01aa: {},
    /*::[*/ 0x01ab: {},
    /*::[*/ 0x01ac: {},
    /*::[*/ 0x01ad: {},
    /*::[*/ 0x01ae: {
        f: parse_SupBook
    },
    /*::[*/ 0x01af: {
        f: parsebool
    },
    /*::[*/ 0x01b0: {},
    /*::[*/ 0x01b1: {},
    /*::[*/ 0x01b2: {},
    /*::[*/ 0x01b5: {},
    /*::[*/ 0x01b6: {
        f: parse_TxO
    },
    /*::[*/ 0x01b7: {
        f: parsebool
    },
    /*::[*/ 0x01b8: {
        f: parse_HLink
    },
    /*::[*/ 0x01b9: {},
    /*::[*/ 0x01ba: {
        f: parse_XLUnicodeString
    },
    /*::[*/ 0x01bb: {},
    /*::[*/ 0x01bc: {
        f: parseuint16
    },
    /*::[*/ 0x01bd: {},
    /*::[*/ 0x01be: {},
    /*::[*/ 0x01c0: {
        f: parsenoop2
    },
    /*::[*/ 0x01c1: {
        f: parse_RecalcId,
        r: 2
    },
    /*::[*/ 0x01c2: {
        f: parsenoop2
    },
    /*::[*/ 0x0200: {
        f: parse_Dimensions
    },
    /*::[*/ 0x0201: {
        f: parse_Blank
    },
    /*::[*/ 0x0203: {
        f: parse_Number
    },
    /*::[*/ 0x0204: {
        f: parse_Label
    },
    /*::[*/ 0x0205: {
        f: parse_BoolErr
    },
    /*::[*/ 0x0207: {
        f: parse_String
    },
    /*::[*/ 0x0208: {
        f: parse_Row
    },
    /*::[*/ 0x020b: {},
    /*::[*/ 0x0221: {
        f: parse_Array
    },
    /*::[*/ 0x0225: {
        f: parse_DefaultRowHeight
    },
    /*::[*/ 0x0236: {},
    /*::[*/ 0x023e: {
        f: parse_Window2
    },
    /*::[*/ 0x027e: {
        f: parse_RK
    },
    /*::[*/ 0x0293: {},
    /*::[*/ 0x0418: {},
    /*::[*/ 0x041e: {
        f: parse_Format
    },
    /*::[*/ 0x043c: {},
    /*::[*/ 0x04bc: {
        f: parse_ShrFmla
    },
    /*::[*/ 0x0800: {
        f: parse_HLinkTooltip
    },
    /*::[*/ 0x0801: {},
    /*::[*/ 0x0802: {},
    /*::[*/ 0x0803: {},
    /*::[*/ 0x0804: {},
    /*::[*/ 0x0805: {},
    /*::[*/ 0x0806: {},
    /*::[*/ 0x0807: {},
    /*::[*/ 0x0808: {},
    /*::[*/ 0x0809: {
        f: parse_BOF
    },
    /*::[*/ 0x080a: {},
    /*::[*/ 0x080b: {},
    /*::[*/ 0x080c: {},
    /*::[*/ 0x080d: {},
    /*::[*/ 0x080e: {},
    /*::[*/ 0x080f: {},
    /*::[*/ 0x0810: {},
    /*::[*/ 0x0812: {},
    /*::[*/ 0x0813: {},
    /*::[*/ 0x0850: {},
    /*::[*/ 0x0851: {},
    /*::[*/ 0x0852: {},
    /*::[*/ 0x0853: {},
    /*::[*/ 0x0854: {},
    /*::[*/ 0x0855: {},
    /*::[*/ 0x0856: {},
    /*::[*/ 0x0857: {},
    /*::[*/ 0x0858: {},
    /*::[*/ 0x0859: {},
    /*::[*/ 0x085a: {},
    /*::[*/ 0x0862: {},
    /*::[*/ 0x0863: {
        r: 12
    },
    /*::[*/ 0x0864: {},
    /*::[*/ 0x0865: {},
    /*::[*/ 0x0866: {},
    /*::[*/ 0x0867: {
        f: parsenoop2
    },
    /*::[*/ 0x0868: {},
    /*::[*/ 0x086a: {},
    /*::[*/ 0x086b: {},
    /*::[*/ 0x086c: {},
    /*::[*/ 0x0871: {},
    /*::[*/ 0x0872: {},
    /*::[*/ 0x0874: {},
    /*::[*/ 0x0875: {},
    /*::[*/ 0x0876: {},
    /*::[*/ 0x0877: {},
    /*::[*/ 0x0878: {},
    /*::[*/ 0x0879: {},
    /*::[*/ 0x087a: {},
    /*::[*/ 0x087b: {},
    /*::[*/ 0x087c: {
        f: parse_XFCRC,
        r: 12
    },
    /*::[*/ 0x087d: {
        f: parse_XFExt,
        r: 12
    },
    /*::[*/ 0x087e: {},
    /*::[*/ 0x087f: {},
    /*::[*/ 0x0884: {},
    /*::[*/ 0x0885: {},
    /*::[*/ 0x0886: {},
    /*::[*/ 0x0887: {},
    /*::[*/ 0x0888: {},
    /*::[*/ 0x0889: {},
    /*::[*/ 0x088a: {},
    /*::[*/ 0x088b: {},
    /*::[*/ 0x088c: {
        f: parsebool,
        r: 12
    },
    /*::[*/ 0x088d: {},
    /*::[*/ 0x088e: {
        r: 12
    },
    /*::[*/ 0x088f: {},
    /*::[*/ 0x0890: {},
    /*::[*/ 0x0892: {},
    /*::[*/ 0x0893: {},
    /*::[*/ 0x0894: {
        f: parse_NameCmt,
        r: 12
    },
    /*::[*/ 0x0895: {},
    /*::[*/ 0x0896: {
        f: parse_Theme,
        r: 12
    },
    /*::[*/ 0x0897: {},
    /*::[*/ 0x0898: {},
    /*::[*/ 0x0899: {},
    /*::[*/ 0x089a: {
        f: parse_MTRSettings,
        r: 12
    },
    /*::[*/ 0x089b: {
        f: parsenoop2
    },
    /*::[*/ 0x089c: {},
    /*::[*/ 0x089d: {},
    /*::[*/ 0x089e: {},
    /*::[*/ 0x089f: {},
    /*::[*/ 0x08a3: {
        f: parse_ForceFullCalculation
    },
    /*::[*/ 0x08a4: {},
    /*::[*/ 0x08a5: {},
    /*::[*/ 0x08a6: {},
    /*::[*/ 0x08a7: {},
    /*::[*/ 0x1001: {},
    /*::[*/ 0x1002: {},
    /*::[*/ 0x1003: {},
    /*::[*/ 0x1006: {},
    /*::[*/ 0x1007: {},
    /*::[*/ 0x1009: {},
    /*::[*/ 0x100a: {},
    /*::[*/ 0x100b: {},
    /*::[*/ 0x100c: {},
    /*::[*/ 0x100d: {},
    /*::[*/ 0x1014: {},
    /*::[*/ 0x1015: {},
    /*::[*/ 0x1016: {},
    /*::[*/ 0x1017: {},
    /*::[*/ 0x1018: {},
    /*::[*/ 0x1019: {},
    /*::[*/ 0x101a: {},
    /*::[*/ 0x101b: {},
    /*::[*/ 0x101c: {},
    /*::[*/ 0x101d: {},
    /*::[*/ 0x101e: {},
    /*::[*/ 0x101f: {},
    /*::[*/ 0x1020: {},
    /*::[*/ 0x1021: {},
    /*::[*/ 0x1022: {},
    /*::[*/ 0x1024: {},
    /*::[*/ 0x1025: {},
    /*::[*/ 0x1026: {
        f: parseuint16
    },
    /*::[*/ 0x1027: {},
    /*::[*/ 0x1032: {},
    /*::[*/ 0x1033: {},
    /*::[*/ 0x1034: {},
    /*::[*/ 0x1035: {},
    /*::[*/ 0x103a: {},
    /*::[*/ 0x103c: {},
    /*::[*/ 0x103d: {},
    /*::[*/ 0x103e: {},
    /*::[*/ 0x103f: {},
    /*::[*/ 0x1040: {},
    /*::[*/ 0x1041: {},
    /*::[*/ 0x1043: {},
    /*::[*/ 0x1044: {
        f: parse_ShtProps
    },
    /*::[*/ 0x1045: {},
    /*::[*/ 0x1046: {},
    /*::[*/ 0x1048: {},
    /*::[*/ 0x104a: {},
    /*::[*/ 0x104b: {},
    /*::[*/ 0x104e: {},
    /*::[*/ 0x104f: {},
    /*::[*/ 0x1050: {},
    /*::[*/ 0x1051: {},
    /*::[*/ 0x105b: {},
    /*::[*/ 0x105c: {
        f: parse_ClrtClient
    },
    /*::[*/ 0x105d: {},
    /*::[*/ 0x105f: {},
    /*::[*/ 0x1060: {},
    /*::[*/ 0x1061: {},
    /*::[*/ 0x1062: {},
    /*::[*/ 0x1063: {},
    /*::[*/ 0x1064: {},
    /*::[*/ 0x1065: {},
    /*::[*/ 0x1066: {},
    /*::[*/ 0x1067: {},
    /*::[*/ 0x1068: {},
    /*::[*/ 0x0000: {
        f: parse_Dimensions
    },
    /*::[*/ 0x0001: {},
    /*::[*/ 0x0002: {
        f: parse_BIFF2INT
    },
    /*::[*/ 0x0003: {
        f: parse_BIFF2NUM
    },
    /*::[*/ 0x0004: {
        f: parse_BIFF2STR
    },
    /*::[*/ 0x0005: {
        f: parse_BoolErr
    },
    /*::[*/ 0x0007: {
        f: parse_BIFF2STRING
    },
    /*::[*/ 0x0008: {},
    /*::[*/ 0x0009: {
        f: parse_BOF
    },
    /*::[*/ 0x000b: {},
    /*::[*/ 0x0016: {
        f: parseuint16
    },
    /*::[*/ 0x001e: {
        f: parse_BIFF2Format
    },
    /*::[*/ 0x001f: {},
    /* 16-bit cnt of BIFF2FORMAT records */ /*::[*/ 0x0020: {},
    /*::[*/ 0x0021: {
        f: parse_Array
    },
    /*::[*/ 0x0024: {},
    /*::[*/ 0x0025: {
        f: parse_DefaultRowHeight
    },
    // 0x2c ??
    // 0x2d ??
    // 0x2e ??
    // 0x30 FONTCOUNT: number of fonts
    /*::[*/ 0x0032: {
        f: parse_BIFF2FONTXTRA
    },
    // 0x35: INFOOPTS
    // 0x36: TABLE (BIFF2 only)
    // 0x37: TABLE2 (BIFF2 only)
    // 0x38: WNDESK
    // 0x39 ??
    // 0x3a: BEGINPREF
    // 0x3b: ENDPREF
    /*::[*/ 0x003e: {},
    // 0x3f ??
    // 0x46: SHOWSCROLL
    // 0x47: SHOWFORMULA
    // 0x48: STATUSBAR
    // 0x49: SHORTMENUS
    // 0x4A:
    // 0x4B:
    // 0x4C:
    // 0x4E:
    // 0x4F:
    // 0x58: TOOLBAR (BIFF3)
    /* - - - */ /*::[*/ 0x0034: {},
    /*::[*/ 0x0043: {},
    /*::[*/ 0x0044: {
        f: parseuint16
    },
    /*::[*/ 0x0045: {},
    /*::[*/ 0x0056: {},
    /* 16-bit cnt, similar to BIFF2 */ /*::[*/ 0x007e: {},
    /* Not necessarily same as 0x027e */ /*::[*/ 0x007f: {
        f: parse_ImData
    },
    /*::[*/ 0x0087: {},
    /*::[*/ 0x0088: {},
    /*::[*/ 0x0089: {},
    // 0x8A
    // 0x8B LH: alternate menu key flag (BIFF3/4)
    // 0x8E
    // 0x8F
    /*::[*/ 0x0091: {},
    // 0x93 STYLE
    /*::[*/ 0x0094: {},
    /*::[*/ 0x0095: {},
    /*::[*/ 0x0096: {},
    // 0xA2 FNPROTO: function prototypes (BIFF4)
    // 0xA3
    // 0xA8
    /*::[*/ 0x00a9: {},
    /*::[*/ 0x00ab: {},
    /*::[*/ 0x00bc: {},
    /* Not necessarily same as 0x04bc */ /*::[*/ 0x00bf: {},
    /*::[*/ 0x00c0: {},
    /*::[*/ 0x00c2: {},
    /*::[*/ 0x00c3: {},
    /*::[*/ 0x00d6: {
        f: parse_RString
    },
    /*::[*/ 0x00df: {},
    /*::[*/ 0x00ea: {},
    /*::[*/ 0x0162: {},
    /*::[*/ 0x01a5: {},
    /*::[*/ 0x0206: {
        f: parse_Formula
    },
    /*::[*/ 0x0209: {
        f: parse_BOF
    },
    /*::[*/ 0x0218: {
        f: parse_Lbl
    },
    /*::[*/ 0x0223: {
        f: parse_ExternName
    },
    /*::[*/ 0x0231: {},
    /*::[*/ 0x0243: {},
    /*::[*/ 0x0406: {
        f: parse_Formula
    },
    /*::[*/ 0x0409: {
        f: parse_BOF
    },
    /*::[*/ 0x0443: {},
    /*::[*/ 0x086d: {},
    /*::[*/ 0x0873: {},
    /*::[*/ 0x0881: {},
    /*::[*/ 0x08c0: {},
    /*::[*/ 0x08c1: {},
    /*::[*/ 0x08c2: {},
    /*::[*/ 0x08c3: {},
    /*::[*/ 0x08c4: {},
    /*::[*/ 0x08c5: {},
    /*::[*/ 0x08c6: {},
    /*::[*/ 0x08c7: {},
    /*::[*/ 0x08c8: {},
    /*::[*/ 0x08c9: {},
    /*::[*/ 0x08ca: {},
    /*::[*/ 0x08cb: {},
    /*::[*/ 0x08d6: {
        r: 12
    },
    /*::[*/ 0x7262: {}
};
function write_biff_rec(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {
    var t /*:number*/  = type;
    if (isNaN(t)) return;
    var len = length || (payload || []).length || 0;
    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, len);
    if (/*:: len != null &&*/ len > 0 && is_buf(payload)) ba.push(payload);
}
function write_biff_continue(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {
    var len = length || (payload || []).length || 0;
    if (len <= 8224) return write_biff_rec(ba, type, payload, len);
    var t = type;
    if (isNaN(t)) return;
    var parts = payload.parts || [], sidx = 0;
    var i = 0, w = 0;
    while(w + (parts[sidx] || 8224) <= 8224){
        w += parts[sidx] || 8224;
        sidx++;
    }
    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, w);
    ba.push(payload.slice(i, i + w));
    i += w;
    while(i < len){
        o = ba.next(4);
        o.write_shift(2, 0x3c); // TODO: figure out correct continue type
        w = 0;
        while(w + (parts[sidx] || 8224) <= 8224){
            w += parts[sidx] || 8224;
            sidx++;
        }
        o.write_shift(2, w);
        ba.push(payload.slice(i, i + w));
        i += w;
    }
}
function write_BIFF2Cell(out, r /*:number*/ , c /*:number*/ ) {
    if (!out) out = new_buf(7);
    out.write_shift(2, r);
    out.write_shift(2, c);
    out.write_shift(2, 0);
    out.write_shift(1, 0);
    return out;
}
function write_BIFF2BERR(r /*:number*/ , c /*:number*/ , val, t /*:?string*/ ) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);
    write_Bes(val, t || "b", out);
    return out;
}
/* TODO: codepage, large strings */ function write_BIFF2LABEL(r /*:number*/ , c /*:number*/ , val) {
    var out = new_buf(8 + 2 * val.length);
    write_BIFF2Cell(out, r, c);
    out.write_shift(1, val.length);
    out.write_shift(val.length, val, "sbcs");
    return out.l < out.length ? out.slice(0, out.l) : out;
}
function write_ws_biff2_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) {
    if (cell.v != null) switch(cell.t){
        case "d":
        case "n":
            var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));
            else write_biff_rec(ba, 0x0003, write_BIFF2NUM(R, C, v));
            return;
        case "b":
        case "e":
            write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t));
            return;
        /* TODO: codepage, sst */ case "s":
        case "str":
            write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v || "").slice(0, 255)));
            return;
    }
    write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
}
function write_ws_biff2(ba /*:BufArray*/ , ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {
    var dense = Array.isArray(ws);
    var range = safe_decode_range(ws["!ref"] || "A1"), ref /*:string*/ , rr = "", cols /*:Array<string>*/  = [];
    if (range.e.c > 0xFF || range.e.r > 0x3FFF) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
        range.e.c = Math.min(range.e.c, 0xFF);
        range.e.r = Math.min(range.e.c, 0x3FFF);
        ref = encode_range(range);
    }
    for(var R = range.s.r; R <= range.e.r; ++R){
        rr = encode_row(R);
        for(var C = range.s.c; C <= range.e.c; ++C){
            if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) continue;
            /* write cell */ write_ws_biff2_cell(ba, cell, R, C, opts);
        }
    }
}
/* Based on test files */ function write_biff2_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    var o = opts || {};
    if (DENSE != null && o.dense == null) o.dense = DENSE;
    var ba = buf_array();
    var idx = 0;
    for(var i = 0; i < wb.SheetNames.length; ++i)if (wb.SheetNames[i] == o.sheet) idx = i;
    if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
    write_biff_rec(ba, o.biff == 4 ? 0x0409 : o.biff == 3 ? 0x0209 : 0x0009, write_BOF(wb, 0x10, o));
    /* ... */ write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
    /* ... */ write_biff_rec(ba, 0x000A);
    return ba.end();
}
function write_FONTS_biff8(ba, data, opts) {
    write_biff_rec(ba, 0x0031 /* Font */ , write_Font({
        sz: 12,
        color: {
            theme: 1
        },
        name: "Arial",
        family: 2,
        scheme: "minor"
    }, opts));
}
function write_FMTS_biff8(ba, NF /*:?SSFTable*/ , opts) {
    if (!NF) return;
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_biff_rec(ba, 0x041E /* Format */ , write_Format(i, NF[i], opts));
    });
}
function write_FEAT(ba, ws) {
    /* [MS-XLS] 2.4.112 */ var o = new_buf(19);
    o.write_shift(4, 0x867);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 1);
    o.write_shift(4, 0);
    write_biff_rec(ba, 0x0867 /* FeatHdr */ , o);
    /* [MS-XLS] 2.4.111 */ o = new_buf(39);
    o.write_shift(4, 0x868);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 1);
    o.write_shift(4, 4);
    o.write_shift(2, 0);
    write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o);
    o.write_shift(4, 4);
    write_biff_rec(ba, 0x0868 /* Feat */ , o);
}
function write_CELLXFS_biff8(ba, opts) {
    for(var i = 0; i < 16; ++i)write_biff_rec(ba, 0x00e0 /* XF */ , write_XF({
        numFmtId: 0,
        style: true
    }, 0, opts));
    opts.cellXfs.forEach(function(c) {
        write_biff_rec(ba, 0x00e0 /* XF */ , write_XF(c, 0, opts));
    });
}
function write_ws_biff8_hlinks(ba /*:BufArray*/ , ws) {
    for(var R = 0; R < ws["!links"].length; ++R){
        var HL = ws["!links"][R];
        write_biff_rec(ba, 0x01b8 /* HLink */ , write_HLink(HL));
        if (HL[1].Tooltip) write_biff_rec(ba, 0x0800 /* HLinkTooltip */ , write_HLinkTooltip(HL));
    }
    delete ws["!links"];
}
function write_ws_cols_biff8(ba, cols) {
    if (!cols) return;
    var cnt = 0;
    cols.forEach(function(col, idx) {
        if (++cnt <= 256 && col) write_biff_rec(ba, 0x007d /* ColInfo */ , write_ColInfo(col_obj_w(idx, col), idx));
    });
}
function write_ws_biff8_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts) {
    var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
    if (cell.v == null && !cell.bf) {
        write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));
        return;
    }
    if (cell.bf) write_biff_rec(ba, 0x0006 /* Formula */ , write_Formula(cell, R, C, opts, os));
    else switch(cell.t){
        case "d":
        case "n":
            var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            /* TODO: emit RK as appropriate */ write_biff_rec(ba, 0x0203 /* Number */ , write_Number(R, C, v, os, opts));
            break;
        case "b":
        case "e":
            write_biff_rec(ba, 0x0205 /* BoolErr */ , write_BoolErr(R, C, cell.v, os, opts, cell.t));
            break;
        /* TODO: codepage, sst */ case "s":
        case "str":
            if (opts.bookSST) {
                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                write_biff_rec(ba, 0x00fd /* LabelSst */ , write_LabelSst(R, C, isst, os, opts));
            } else write_biff_rec(ba, 0x0204 /* Label */ , write_Label(R, C, (cell.v || "").slice(0, 255), os, opts));
            break;
        default:
            write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));
    }
}
/* [MS-XLS] 2.1.7.20.5 */ function write_ws_biff8(idx /*:number*/ , opts, wb /*:Workbook*/ ) {
    var ba = buf_array();
    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;
    var _sheet /*:WBWSProp*/  = (_WB.Sheets || [])[idx] || {} /*:any*/ ;
    var dense = Array.isArray(ws);
    var b8 = opts.biff == 8;
    var ref /*:string*/ , rr = "", cols /*:Array<string>*/  = [];
    var range = safe_decode_range(ws["!ref"] || "A1");
    var MAX_ROWS = b8 ? 65536 : 16384;
    if (range.e.c > 0xFF || range.e.r >= MAX_ROWS) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
        range.e.c = Math.min(range.e.c, 0xFF);
        range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
    }
    write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));
    /* [Uncalced] Index */ write_biff_rec(ba, 0x000d /* CalcMode */ , writeuint16(1));
    write_biff_rec(ba, 0x000c /* CalcCount */ , writeuint16(100));
    write_biff_rec(ba, 0x000f /* CalcRefMode */ , writebool(true));
    write_biff_rec(ba, 0x0011 /* CalcIter */ , writebool(false));
    write_biff_rec(ba, 0x0010 /* CalcDelta */ , write_Xnum(0.001));
    write_biff_rec(ba, 0x005f /* CalcSaveRecalc */ , writebool(true));
    write_biff_rec(ba, 0x002a /* PrintRowCol */ , writebool(false));
    write_biff_rec(ba, 0x002b /* PrintGrid */ , writebool(false));
    write_biff_rec(ba, 0x0082 /* GridSet */ , writeuint16(1));
    write_biff_rec(ba, 0x0080 /* Guts */ , write_Guts([
        0,
        0
    ]));
    /* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */ /* Header (string) */ /* Footer (string) */ write_biff_rec(ba, 0x0083 /* HCenter */ , writebool(false));
    write_biff_rec(ba, 0x0084 /* VCenter */ , writebool(false));
    /* ... */ if (b8) write_ws_cols_biff8(ba, ws["!cols"]);
    /* ... */ write_biff_rec(ba, 0x200, write_Dimensions(range, opts));
    /* ... */ if (b8) ws["!links"] = [];
    for(var R = range.s.r; R <= range.e.r; ++R){
        rr = encode_row(R);
        for(var C = range.s.c; C <= range.e.c; ++C){
            if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) continue;
            /* write cell */ write_ws_biff8_cell(ba, cell, R, C, opts);
            if (b8 && cell.l) ws["!links"].push([
                ref,
                cell.l
            ]);
        }
    }
    var cname /*:string*/  = _sheet.CodeName || _sheet.name || s;
    /* ... */ if (b8) write_biff_rec(ba, 0x023e /* Window2 */ , write_Window2((_WB.Views || [])[0]));
    /* ... */ if (b8 && (ws["!merges"] || []).length) write_biff_rec(ba, 0x00e5 /* MergeCells */ , write_MergeCells(ws["!merges"]));
    /* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */ if (b8) write_ws_biff8_hlinks(ba, ws);
    /* [DVAL] */ write_biff_rec(ba, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));
    /* *WebPub *CellWatch [SheetExt] */ if (b8) write_FEAT(ba, ws);
    /* *FEAT11 *RECORD12 */ write_biff_rec(ba, 0x000a /* EOF */ );
    return ba.end();
}
/* [MS-XLS] 2.1.7.20.3 */ function write_biff8_global(wb /*:Workbook*/ , bufs, opts /*:WriteOpts*/ ) {
    var A = buf_array();
    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;
    var _sheets /*:Array<WBWSProp>*/  = _WB.Sheets || [];
    var _wb /*:WBProps*/  = /*::((*/ _WB.WBProps || {} /*:: ):any)*/ ;
    var b8 = opts.biff == 8, b5 = opts.biff == 5;
    write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));
    if (opts.bookType == "xla") write_biff_rec(A, 0x0087 /* Addin */ );
    write_biff_rec(A, 0x00e1 /* InterfaceHdr */ , b8 ? writeuint16(0x04b0) : null);
    write_biff_rec(A, 0x00c1 /* Mms */ , writezeroes(2));
    if (b5) write_biff_rec(A, 0x00bf /* ToolbarHdr */ );
    if (b5) write_biff_rec(A, 0x00c0 /* ToolbarEnd */ );
    write_biff_rec(A, 0x00e2 /* InterfaceEnd */ );
    write_biff_rec(A, 0x005c /* WriteAccess */ , write_WriteAccess("SheetJS", opts));
    /* [FileSharing] */ write_biff_rec(A, 0x0042 /* CodePage */ , writeuint16(b8 ? 0x04b0 : 0x04E4));
    /* *2047 Lel */ if (b8) write_biff_rec(A, 0x0161 /* DSF */ , writeuint16(0));
    if (b8) write_biff_rec(A, 0x01c0 /* Excel9File */ );
    write_biff_rec(A, 0x013d /* RRTabId */ , write_RRTabId(wb.SheetNames.length));
    if (b8 && wb.vbaraw) write_biff_rec(A, 0x00d3 /* ObProj */ );
    /* [ObNoMacros] */ if (b8 && wb.vbaraw) {
        var cname /*:string*/  = _wb.CodeName || "ThisWorkbook";
        write_biff_rec(A, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));
    }
    write_biff_rec(A, 0x009c /* BuiltInFnGroupCount */ , writeuint16(0x11));
    /* *FnGroupName *FnGrp12 */ /* *Lbl */ /* [OleObjectSize] */ write_biff_rec(A, 0x0019 /* WinProtect */ , writebool(false));
    write_biff_rec(A, 0x0012 /* Protect */ , writebool(false));
    write_biff_rec(A, 0x0013 /* Password */ , writeuint16(0));
    if (b8) write_biff_rec(A, 0x01af /* Prot4Rev */ , writebool(false));
    if (b8) write_biff_rec(A, 0x01bc /* Prot4RevPass */ , writeuint16(0));
    write_biff_rec(A, 0x003d /* Window1 */ , write_Window1(opts));
    write_biff_rec(A, 0x0040 /* Backup */ , writebool(false));
    write_biff_rec(A, 0x008d /* HideObj */ , writeuint16(0));
    write_biff_rec(A, 0x0022 /* Date1904 */ , writebool(safe1904(wb) == "true"));
    write_biff_rec(A, 0x000e /* CalcPrecision */ , writebool(true));
    if (b8) write_biff_rec(A, 0x01b7 /* RefreshAll */ , writebool(false));
    write_biff_rec(A, 0x00DA /* BookBool */ , writeuint16(0));
    /* ... */ write_FONTS_biff8(A, wb, opts);
    write_FMTS_biff8(A, wb.SSF, opts);
    write_CELLXFS_biff8(A, opts);
    /* ... */ if (b8) write_biff_rec(A, 0x0160 /* UsesELFs */ , writebool(false));
    var a = A.end();
    var C = buf_array();
    /* METADATA [MTRSettings] [ForceFullCalculation] */ if (b8) write_biff_rec(C, 0x008C, write_Country());
    /* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */ /* BIFF8: [SST *Continue] ExtSST */ if (b8 && opts.Strings) write_biff_continue(C, 0x00FC, write_SST(opts.Strings, opts));
    /* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */ write_biff_rec(C, 0x000A /* EOF */ );
    var c = C.end();
    var B = buf_array();
    var blen = 0, j = 0;
    for(j = 0; j < wb.SheetNames.length; ++j)blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
    var start = a.length + blen + c.length;
    for(j = 0; j < wb.SheetNames.length; ++j){
        var _sheet /*:WBWSProp*/  = _sheets[j] || {} /*:any*/ ;
        write_biff_rec(B, 0x0085 /* BoundSheet8 */ , write_BoundSheet8({
            pos: start,
            hs: _sheet.Hidden || 0,
            dt: 0,
            name: wb.SheetNames[j]
        }, opts));
        start += bufs[j].length;
    }
    /* 1*BoundSheet8 */ var b = B.end();
    if (blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);
    var out = [];
    if (a.length) out.push(a);
    if (b.length) out.push(b);
    if (c.length) out.push(c);
    return bconcat(out);
}
/* [MS-XLS] 2.1.7.20 Workbook Stream */ function write_biff8_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    var o = opts || {};
    var bufs = [];
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        o.revssf = evert_num(wb.SSF);
        o.revssf[wb.SSF[65535]] = 0;
        o.ssf = wb.SSF;
    }
    o.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    o.Strings.Count = 0;
    o.Strings.Unique = 0;
    fix_write_opts(o);
    o.cellXfs = [];
    get_cell_style(o.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    for(var i = 0; i < wb.SheetNames.length; ++i)bufs[bufs.length] = write_ws_biff8(i, o, wb);
    bufs.unshift(write_biff8_global(wb, bufs, o));
    return bconcat(bufs);
}
function write_biff_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    for(var i = 0; i <= wb.SheetNames.length; ++i){
        var ws = wb.Sheets[wb.SheetNames[i]];
        if (!ws || !ws["!ref"]) continue;
        var range = decode_range(ws["!ref"]);
        if (range.e.c > 255) {
            if (typeof console != "undefined" && console.error) console.error("Worksheet '" + wb.SheetNames[i] + "' extends beyond column IV (255).  Data may be lost.");
        }
    }
    var o = opts || {};
    switch(o.biff || 2){
        case 8:
        case 5:
            return write_biff8_buf(wb, opts);
        case 4:
        case 3:
        case 2:
            return write_biff2_buf(wb, opts);
    }
    throw new Error("invalid type " + o.bookType + " for BIFF");
}
/* note: browser DOM element cannot see mso- style attrs, must parse */ function html_to_sheet(str /*:string*/ , _opts) /*:Workbook*/ {
    var opts = _opts || {};
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;
    str = str.replace(/<!--.*?-->/g, "");
    var mtch /*:any*/  = str.match(/<table/i);
    if (!mtch) throw new Error("Invalid HTML: could not find <table>");
    var mtch2 /*:any*/  = str.match(/<\/table/i);
    var i /*:number*/  = mtch.index, j /*:number*/  = mtch2 && mtch2.index || str.length;
    var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
    var R = -1, C = 0, RS = 0, CS = 0;
    var range /*:Range*/  = {
        s: {
            r: 10000000,
            c: 10000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var merges /*:Array<Range>*/  = [];
    for(i = 0; i < rows.length; ++i){
        var row = rows[i].trim();
        var hd = row.slice(0, 3).toLowerCase();
        if (hd == "<tr") {
            ++R;
            if (opts.sheetRows && opts.sheetRows <= R) {
                --R;
                break;
            }
            C = 0;
            continue;
        }
        if (hd != "<td" && hd != "<th") continue;
        var cells = row.split(/<\/t[dh]>/i);
        for(j = 0; j < cells.length; ++j){
            var cell = cells[j].trim();
            if (!cell.match(/<t[dh]/i)) continue;
            var m = cell, cc = 0;
            /* TODO: parse styles etc */ while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1)m = m.slice(cc + 1);
            for(var midx = 0; midx < merges.length; ++midx){
                var _merge /*:Range*/  = merges[midx];
                if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
                    C = _merge.e.c + 1;
                    midx = -1;
                }
            }
            var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
            CS = tag.colspan ? +tag.colspan : 1;
            if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({
                s: {
                    r: R,
                    c: C
                },
                e: {
                    r: R + (RS || 1) - 1,
                    c: C + CS - 1
                }
            });
            var _t /*:string*/  = tag.t || tag["data-t"] || "";
            /* TODO: generate stub cells */ if (!m.length) {
                C += CS;
                continue;
            }
            m = htmldecode(m);
            if (range.s.r > R) range.s.r = R;
            if (range.e.r < R) range.e.r = R;
            if (range.s.c > C) range.s.c = C;
            if (range.e.c < C) range.e.c = C;
            if (!m.length) {
                C += CS;
                continue;
            }
            var o /*:Cell*/  = {
                t: "s",
                v: m
            };
            if (opts.raw || !m.trim().length || _t == "s") ;
            else if (m === "TRUE") o = {
                t: "b",
                v: true
            };
            else if (m === "FALSE") o = {
                t: "b",
                v: false
            };
            else if (!isNaN(fuzzynum(m))) o = {
                t: "n",
                v: fuzzynum(m)
            };
            else if (!isNaN(fuzzydate(m).getDate())) {
                o = {
                    t: "d",
                    v: parseDate(m)
                } /*:any*/ ;
                if (!opts.cellDates) o = {
                    t: "n",
                    v: datenum(o.v)
                } /*:any*/ ;
                o.z = opts.dateNF || table_fmt[14];
            }
            if (opts.dense) {
                if (!ws[R]) ws[R] = [];
                ws[R][C] = o;
            } else ws[encode_cell({
                r: R,
                c: C
            })] = o;
            C += CS;
        }
    }
    ws["!ref"] = encode_range(range);
    if (merges.length) ws["!merges"] = merges;
    return ws;
}
function make_html_row(ws /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {
    var M /*:Array<Range>*/  = ws["!merges"] || [];
    var oo /*:Array<string>*/  = [];
    for(var C = r.s.c; C <= r.e.c; ++C){
        var RS = 0, CS = 0;
        for(var j = 0; j < M.length; ++j){
            if (M[j].s.r > R || M[j].s.c > C) continue;
            if (M[j].e.r < R || M[j].e.c < C) continue;
            if (M[j].s.r < R || M[j].s.c < C) {
                RS = -1;
                break;
            }
            RS = M[j].e.r - M[j].s.r + 1;
            CS = M[j].e.c - M[j].s.c + 1;
            break;
        }
        if (RS < 0) continue;
        var coord = encode_cell({
            r: R,
            c: C
        });
        var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
        /* TODO: html entities */ var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
        var sp = {} /*:any*/ ;
        if (RS > 1) sp.rowspan = RS;
        if (CS > 1) sp.colspan = CS;
        if (o.editable) w = '<span contenteditable="true">' + w + "</span>";
        else if (cell) {
            sp["data-t"] = cell && cell.t || "z";
            if (cell.v != null) sp["data-v"] = cell.v;
            if (cell.z != null) sp["data-z"] = cell.z;
            if (cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target + '">' + w + "</a>";
        }
        sp.id = (o.id || "sjs") + "-" + coord;
        oo.push(writextag("td", w, sp));
    }
    var preamble = "<tr>";
    return preamble + oo.join("") + "</tr>";
}
var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
var HTML_END = "</body></html>";
function html_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {
    var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
    if (!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
    if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
    var wb = book_new();
    mtch.forEach(function(s, idx) {
        book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx + 1));
    });
    return wb;
}
function make_html_preamble(ws /*:Worksheet*/ , R /*:Range*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [];
    return out.join("") + "<table" + (o && o.id ? ' id="' + o.id + '"' : "") + ">";
}
function sheet_to_html(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/  /*, wb:?Workbook*/ ) /*:string*/ {
    var o = opts || {};
    var header = o.header != null ? o.header : HTML_BEGIN;
    var footer = o.footer != null ? o.footer : HTML_END;
    var out /*:Array<string>*/  = [
        header
    ];
    var r = decode_range(ws["!ref"]);
    o.dense = Array.isArray(ws);
    out.push(make_html_preamble(ws, r, o));
    for(var R = r.s.r; R <= r.e.r; ++R)out.push(make_html_row(ws, r, R, o));
    out.push("</table>" + footer);
    return out.join("");
}
function sheet_add_dom(ws /*:Worksheet*/ , table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {
    var opts = _opts || {};
    if (DENSE != null) opts.dense = DENSE;
    var or_R = 0, or_C = 0;
    if (opts.origin != null) {
        if (typeof opts.origin == "number") or_R = opts.origin;
        else {
            var _origin /*:CellAddress*/  = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
            or_R = _origin.r;
            or_C = _origin.c;
        }
    }
    var rows /*:HTMLCollection<HTMLTableRowElement>*/  = table.getElementsByTagName("tr");
    var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);
    var range /*:Range*/  = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: or_R,
            c: or_C
        }
    };
    if (ws["!ref"]) {
        var _range /*:Range*/  = decode_range(ws["!ref"]);
        range.s.r = Math.min(range.s.r, _range.s.r);
        range.s.c = Math.min(range.s.c, _range.s.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        range.e.c = Math.max(range.e.c, _range.e.c);
        if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
    }
    var merges /*:Array<Range>*/  = [], midx = 0;
    var rowinfo /*:Array<RowInfo>*/  = ws["!rows"] || (ws["!rows"] = []);
    var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
    if (!ws["!cols"]) ws["!cols"] = [];
    for(; _R < rows.length && R < sheetRows; ++_R){
        var row /*:HTMLTableRowElement*/  = rows[_R];
        if (is_dom_element_hidden(row)) {
            if (opts.display) continue;
            rowinfo[R] = {
                hidden: true
            };
        }
        var elts /*:HTMLCollection<HTMLTableCellElement>*/  = row.children /*:any*/ ;
        for(_C = C = 0; _C < elts.length; ++_C){
            var elt /*:HTMLTableCellElement*/  = elts[_C];
            if (opts.display && is_dom_element_hidden(elt)) continue;
            var v /*:?string*/  = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
            var z /*:?string*/  = elt.getAttribute("data-z") || elt.getAttribute("z");
            for(midx = 0; midx < merges.length; ++midx){
                var m /*:Range*/  = merges[midx];
                if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
                    C = m.e.c + 1 - or_C;
                    midx = -1;
                }
            }
            /* TODO: figure out how to extract nonstandard mso- style */ CS = +elt.getAttribute("colspan") || 1;
            if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({
                s: {
                    r: R + or_R,
                    c: C + or_C
                },
                e: {
                    r: R + or_R + (RS || 1) - 1,
                    c: C + or_C + (CS || 1) - 1
                }
            });
            var o /*:Cell*/  = {
                t: "s",
                v: v
            };
            var _t /*:string*/  = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
            if (v != null) {
                if (v.length == 0) o.t = _t || "z";
                else if (opts.raw || v.trim().length == 0 || _t == "s") ;
                else if (v === "TRUE") o = {
                    t: "b",
                    v: true
                };
                else if (v === "FALSE") o = {
                    t: "b",
                    v: false
                };
                else if (!isNaN(fuzzynum(v))) o = {
                    t: "n",
                    v: fuzzynum(v)
                };
                else if (!isNaN(fuzzydate(v).getDate())) {
                    o = {
                        t: "d",
                        v: parseDate(v)
                    } /*:any*/ ;
                    if (!opts.cellDates) o = {
                        t: "n",
                        v: datenum(o.v)
                    } /*:any*/ ;
                    o.z = opts.dateNF || table_fmt[14];
                }
            }
            if (o.z === undefined && z != null) o.z = z;
            /* The first link is used.  Links are assumed to be fully specified.
			 * TODO: The right way to process relative links is to make a new <a> */ var l = "", Aelts = elt.getElementsByTagName("A");
            if (Aelts && Aelts.length) {
                for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)if (Aelts[Aelti].hasAttribute("href")) {
                    l = Aelts[Aelti].getAttribute("href");
                    if (l.charAt(0) != "#") break;
                }
            }
            if (l && l.charAt(0) != "#") o.l = {
                Target: l
            };
            if (opts.dense) {
                if (!ws[R + or_R]) ws[R + or_R] = [];
                ws[R + or_R][C + or_C] = o;
            } else ws[encode_cell({
                c: C + or_C,
                r: R + or_R
            })] = o;
            if (range.e.c < C + or_C) range.e.c = C + or_C;
            C += CS;
        }
        ++R;
    }
    if (merges.length) ws["!merges"] = (ws["!merges"] || []).concat(merges);
    range.e.r = Math.max(range.e.r, R - 1 + or_R);
    ws["!ref"] = encode_range(range);
    if (R >= sheetRows) ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range)); // We can count the real number of rows to parse but we don't to improve the performance
    return ws;
}
function parse_dom_table(table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {
    var opts = _opts || {};
    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;
    return sheet_add_dom(ws, table, _opts);
}
function table_to_book(table /*:HTMLElement*/ , opts /*:?any*/ ) /*:Workbook*/ {
    return sheet_to_workbook(parse_dom_table(table, opts), opts);
}
function is_dom_element_hidden(element /*:HTMLElement*/ ) /*:boolean*/ {
    var display /*:string*/  = "";
    var get_computed_style /*:?function*/  = get_get_computed_style_function(element);
    if (get_computed_style) display = get_computed_style(element).getPropertyValue("display");
    if (!display) display = element.style && element.style.display;
    return display === "none";
}
/* global getComputedStyle */ function get_get_computed_style_function(element /*:HTMLElement*/ ) /*:?function*/ {
    // The proper getComputedStyle implementation is the one defined in the element window
    if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function") return element.ownerDocument.defaultView.getComputedStyle;
    // If it is not available, try to get one from the global namespace
    if (typeof getComputedStyle === "function") return getComputedStyle;
    return null;
}
/* OpenDocument */ function parse_text_p(text /*:string*/  /*::, tag*/ ) /*:Array<any>*/ {
    /* 6.1.2 White Space Characters */ var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
        return Array(parseInt($1, 10) + 1).join(" ");
    }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
    var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
    return [
        v
    ];
}
var number_formats_ods = {
    /* ods name: [short ssf fmt, long ssf fmt] */ day: [
        "d",
        "dd"
    ],
    month: [
        "m",
        "mm"
    ],
    year: [
        "y",
        "yy"
    ],
    hours: [
        "h",
        "hh"
    ],
    minutes: [
        "m",
        "mm"
    ],
    seconds: [
        "s",
        "ss"
    ],
    "am-pm": [
        "A/P",
        "AM/PM"
    ],
    "day-of-week": [
        "ddd",
        "dddd"
    ],
    era: [
        "e",
        "ee"
    ],
    /* there is no native representation of LO "Q" format */ quarter: [
        "\\Qm",
        'm\\"th quarter"'
    ]
};
function parse_content_xml(d /*:string*/ , _opts) /*:Workbook*/ {
    var opts = _opts || {};
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var str = xlml_normalize(d);
    var state /*:Array<any>*/  = [], tmp;
    var tag /*:: = {}*/ ;
    var NFtag = {
        name: ""
    }, NF = "", pidx = 0;
    var sheetag /*:: = {name:"", '名称':""}*/ ;
    var rowtag /*:: = {'行号':""}*/ ;
    var Sheets = {}, SheetNames /*:Array<string>*/  = [];
    var ws = opts.dense ? [] : {} /*:any*/ ;
    var Rn, q /*:: :any = ({t:"", v:null, z:null, w:"",c:[],}:any)*/ ;
    var ctag = {
        value: ""
    } /*:any*/ ;
    var textp = "", textpidx = 0, textptag /*:: = {}*/ ;
    var textR = [];
    var R = -1, C = -1, range = {
        s: {
            r: 1000000,
            c: 10000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var row_ol = 0;
    var number_format_map = {};
    var merges /*:Array<Range>*/  = [], mrange = {}, mR = 0, mC = 0;
    var rowinfo /*:Array<RowInfo>*/  = [], rowpeat = 1, colpeat = 1;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var WB = {
        Names: []
    };
    var atag = {} /*:any*/ ;
    var _Ref /*:[string, string]*/  = [
        "",
        ""
    ];
    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;
    var creator = "", creatoridx = 0;
    var isstub = false, intable = false;
    var i = 0;
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
    while(Rn = xlmlregex.exec(str))switch(Rn[3] = Rn[3].replace(/_.*$/, "")){
        case "table":
        case "工作表":
            if (Rn[1] === "/") {
                if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws["!ref"] = encode_range(range);
                else ws["!ref"] = "A1:A1";
                if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                    ws["!fullref"] = ws["!ref"];
                    range.e.r = opts.sheetRows - 1;
                    ws["!ref"] = encode_range(range);
                }
                if (merges.length) ws["!merges"] = merges;
                if (rowinfo.length) ws["!rows"] = rowinfo;
                sheetag.name = sheetag["名称"] || sheetag.name;
                if (typeof JSON !== "undefined") JSON.stringify(sheetag);
                SheetNames.push(sheetag.name);
                Sheets[sheetag.name] = ws;
                intable = false;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                sheetag = parsexmltag(Rn[0], false);
                R = C = -1;
                range.s.r = range.s.c = 10000000;
                range.e.r = range.e.c = 0;
                ws = opts.dense ? [] : {} /*:any*/ ;
                merges = [];
                rowinfo = [];
                intable = true;
            }
            break;
        case "table-row-group":
            if (Rn[1] === "/") --row_ol;
            else ++row_ol;
            break;
        case "table-row":
        case "行":
            if (Rn[1] === "/") {
                R += rowpeat;
                rowpeat = 1;
                break;
            }
            rowtag = parsexmltag(Rn[0], false);
            if (rowtag["行号"]) R = rowtag["行号"] - 1;
            else if (R == -1) R = 0;
            rowpeat = +rowtag["number-rows-repeated"] || 1;
            /* TODO: remove magic */ if (rowpeat < 10) {
                for(i = 0; i < rowpeat; ++i)if (row_ol > 0) rowinfo[R + i] = {
                    level: row_ol
                };
            }
            C = -1;
            break;
        case "covered-table-cell":
            if (Rn[1] !== "/") ++C;
            if (opts.sheetStubs) {
                if (opts.dense) {
                    if (!ws[R]) ws[R] = [];
                    ws[R][C] = {
                        t: "z"
                    };
                } else ws[encode_cell({
                    r: R,
                    c: C
                })] = {
                    t: "z"
                };
            }
            textp = "";
            textR = [];
            break; /* stub */ 
        case "table-cell":
        case "数据":
            if (Rn[0].charAt(Rn[0].length - 2) === "/") {
                ++C;
                ctag = parsexmltag(Rn[0], false);
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                q = {
                    t: "z",
                    v: null
                } /*:any*/ ;
                if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                if ((ctag["数据类型"] || ctag["value-type"]) == "string") {
                    q.t = "s";
                    q.v = unescapexml(ctag["string-value"] || "");
                    if (opts.dense) {
                        if (!ws[R]) ws[R] = [];
                        ws[R][C] = q;
                    } else ws[encode_cell({
                        r: R,
                        c: C
                    })] = q;
                }
                C += colpeat - 1;
            } else if (Rn[1] !== "/") {
                ++C;
                textp = "";
                textpidx = 0;
                textR = [];
                colpeat = 1;
                var rptR = rowpeat ? R + rowpeat - 1 : R;
                if (C > range.e.c) range.e.c = C;
                if (C < range.s.c) range.s.c = C;
                if (R < range.s.r) range.s.r = R;
                if (rptR > range.e.r) range.e.r = rptR;
                ctag = parsexmltag(Rn[0], false);
                comments = [];
                comment = {} /*:any*/ ;
                q = {
                    t: ctag["数据类型"] || ctag["value-type"],
                    v: null
                } /*:any*/ ;
                if (opts.cellFormula) {
                    if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
                    if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                        mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                        mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                        mrange = {
                            s: {
                                r: R,
                                c: C
                            },
                            e: {
                                r: R + mR - 1,
                                c: C + mC - 1
                            }
                        };
                        q.F = encode_range(mrange);
                        arrayf.push([
                            mrange,
                            q.F
                        ]);
                    }
                    if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
                    else for(i = 0; i < arrayf.length; ++i)if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) {
                        if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];
                    }
                }
                if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                    mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
                    mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
                    mrange = {
                        s: {
                            r: R,
                            c: C
                        },
                        e: {
                            r: R + mR - 1,
                            c: C + mC - 1
                        }
                    };
                    merges.push(mrange);
                }
                /* 19.675.2 table:number-columns-repeated */ if (ctag["number-columns-repeated"]) colpeat = parseInt(ctag["number-columns-repeated"], 10);
                /* 19.385 office:value-type */ switch(q.t){
                    case "boolean":
                        q.t = "b";
                        q.v = parsexmlbool(ctag["boolean-value"]);
                        break;
                    case "float":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "percentage":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "currency":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "date":
                        q.t = "d";
                        q.v = parseDate(ctag["date-value"]);
                        if (!opts.cellDates) {
                            q.t = "n";
                            q.v = datenum(q.v);
                        }
                        q.z = "m/d/yy";
                        break;
                    case "time":
                        q.t = "n";
                        q.v = parse_isodur(ctag["time-value"]) / 86400;
                        if (opts.cellDates) {
                            q.t = "d";
                            q.v = numdate(q.v);
                        }
                        q.z = "HH:MM:SS";
                        break;
                    case "number":
                        q.t = "n";
                        q.v = parseFloat(ctag["数据数值"]);
                        break;
                    default:
                        if (q.t === "string" || q.t === "text" || !q.t) {
                            q.t = "s";
                            if (ctag["string-value"] != null) {
                                textp = unescapexml(ctag["string-value"]);
                                textR = [];
                            }
                        } else throw new Error("Unsupported value type " + q.t);
                }
            } else {
                isstub = false;
                if (q.t === "s") {
                    q.v = textp || "";
                    if (textR.length) q.R = textR;
                    isstub = textpidx == 0;
                }
                if (atag.Target) q.l = atag;
                if (comments.length > 0) {
                    q.c = comments;
                    comments = [];
                }
                if (textp && opts.cellText !== false) q.w = textp;
                if (isstub) {
                    q.t = "z";
                    delete q.v;
                }
                if (!isstub || opts.sheetStubs) {
                    if (!(opts.sheetRows && opts.sheetRows <= R)) for(var rpt = 0; rpt < rowpeat; ++rpt){
                        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                        if (opts.dense) {
                            if (!ws[R + rpt]) ws[R + rpt] = [];
                            ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                            while(--colpeat > 0)ws[R + rpt][C + colpeat] = dup(q);
                        } else {
                            ws[encode_cell({
                                r: R + rpt,
                                c: C
                            })] = q;
                            while(--colpeat > 0)ws[encode_cell({
                                r: R + rpt,
                                c: C + colpeat
                            })] = dup(q);
                        }
                        if (range.e.c <= C) range.e.c = C;
                    }
                }
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                C += colpeat - 1;
                colpeat = 0;
                q = {};
                textp = "";
                textR = [];
            }
            atag = {} /*:any*/ ;
            break; // 9.1.4 <table:table-cell>
        /* pure state */ case "document":
        case "document-content":
        case "电子表格文档":
        case "spreadsheet":
        case "主体":
        case "scripts":
        case "styles":
        case "font-face-decls":
        case "master-styles":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "annotation":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
                comment.t = textp;
                if (textR.length) /*::(*/ comment /*:: :any)*/ .R = textR;
                comment.a = creator;
                comments.push(comment);
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                false
            ]);
            creator = "";
            creatoridx = 0;
            textp = "";
            textpidx = 0;
            textR = [];
            break;
        case "creator":
            if (Rn[1] === "/") creator = str.slice(creatoridx, Rn.index);
            else creatoridx = Rn.index + Rn[0].length;
            break;
        /* ignore state */ case "meta":
        case "元数据":
        case "settings":
        case "config-item-set":
        case "config-item-map-indexed":
        case "config-item-map-entry":
        case "config-item-map-named":
        case "shapes":
        case "frame":
        case "text-box":
        case "image":
        case "data-pilot-tables":
        case "list-style":
        case "form":
        case "dde-links":
        case "event-listeners":
        case "chart":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                false
            ]);
            textp = "";
            textpidx = 0;
            textR = [];
            break;
        case "scientific-number":
            break;
        case "currency-symbol":
            break;
        case "currency-style":
            break;
        case "number-style":
        case "percentage-style":
        case "date-style":
        case "time-style":
            if (Rn[1] === "/") {
                number_format_map[NFtag.name] = NF;
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                NF = "";
                NFtag = parsexmltag(Rn[0], false);
                state.push([
                    Rn[3],
                    true
                ]);
            }
            break;
        case "script":
            break; // 3.13 <office:script>
        case "libraries":
            break; // TODO: <ooo:libraries>
        case "automatic-styles":
            break; // 3.15.3 <office:automatic-styles>
        case "default-style":
        case "page-layout":
            break; // TODO: <style:page-layout>
        case "style":
            break;
        case "map":
            break; // 16.3 <style:map>
        case "font-face":
            break; // 16.21 <style:font-face>
        case "paragraph-properties":
            break; // 17.6 <style:paragraph-properties>
        case "table-properties":
            break; // 17.15 <style:table-properties>
        case "table-column-properties":
            break; // 17.16 <style:table-column-properties>
        case "table-row-properties":
            break; // 17.17 <style:table-row-properties>
        case "table-cell-properties":
            break; // 17.18 <style:table-cell-properties>
        case "number":
            switch(state[state.length - 1][0]){
                case "time-style":
                case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
            }
            break;
        case "fraction":
            break; // TODO 16.27.6 <number:fraction>
        case "day":
        case "month":
        case "year":
        case "era":
        case "day-of-week":
        case "week-of-year":
        case "quarter":
        case "hours":
        case "minutes":
        case "seconds":
        case "am-pm":
            switch(state[state.length - 1][0]){
                case "time-style":
                case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
            }
            break;
        case "boolean-style":
            break; // 16.27.23 <number:boolean-style>
        case "boolean":
            break; // 16.27.24 <number:boolean>
        case "text-style":
            break; // 16.27.25 <number:text-style>
        case "text":
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") switch(state[state.length - 1][0]){
                case "number-style":
                case "date-style":
                case "time-style":
                    NF += str.slice(pidx, Rn.index);
                    break;
            }
            else pidx = Rn.index + Rn[0].length;
            break;
        case "named-range":
            tag = parsexmltag(Rn[0], false);
            _Ref = ods_to_csf_3D(tag["cell-range-address"]);
            var nrange = {
                Name: tag.name,
                Ref: _Ref[0] + "!" + _Ref[1]
            } /*:any*/ ;
            if (intable) nrange.Sheet = SheetNames.length;
            WB.Names.push(nrange);
            break;
        case "text-content":
            break; // 16.27.27 <number:text-content>
        case "text-properties":
            break; // 16.27.27 <style:text-properties>
        case "embedded-text":
            break; // 16.27.4 <number:embedded-text>
        case "body":
        case "电子表格":
            break; // 3.3 16.9.6 19.726.3
        case "forms":
            break; // 12.25.2 13.2
        case "table-column":
            break; // 9.1.6 <table:table-column>
        case "table-header-rows":
            break; // 9.1.7 <table:table-header-rows>
        case "table-rows":
            break; // 9.1.12 <table:table-rows>
        /* TODO: outline levels */ case "table-column-group":
            break; // 9.1.10 <table:table-column-group>
        case "table-header-columns":
            break; // 9.1.11 <table:table-header-columns>
        case "table-columns":
            break; // 9.1.12 <table:table-columns>
        case "null-date":
            break; // 9.4.2 <table:null-date> TODO: date1904
        case "graphic-properties":
            break; // 17.21 <style:graphic-properties>
        case "calculation-settings":
            break; // 9.4.1 <table:calculation-settings>
        case "named-expressions":
            break; // 9.4.11 <table:named-expressions>
        case "label-range":
            break; // 9.4.9 <table:label-range>
        case "label-ranges":
            break; // 9.4.10 <table:label-ranges>
        case "named-expression":
            break; // 9.4.13 <table:named-expression>
        case "sort":
            break; // 9.4.19 <table:sort>
        case "sort-by":
            break; // 9.4.20 <table:sort-by>
        case "sort-groups":
            break; // 9.4.22 <table:sort-groups>
        case "tab":
            break; // 6.1.4 <text:tab>
        case "line-break":
            break; // 6.1.5 <text:line-break>
        case "span":
            break; // 6.1.7 <text:span>
        case "p":
        case "文本串":
            if ([
                "master-styles"
            ].indexOf(state[state.length - 1][0]) > -1) break;
            if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
                var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
                textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
            } else {
                textptag = parsexmltag(Rn[0], false);
                textpidx = Rn.index + Rn[0].length;
            }
            break; // <text:p>
        case "s":
            break; // <text:s>
        case "database-range":
            if (Rn[1] === "/") break;
            try {
                _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
                Sheets[_Ref[0]]["!autofilter"] = {
                    ref: _Ref[1]
                };
            } catch (e) {}
            break;
        case "date":
            break; // <*:date>
        case "object":
            break; // 10.4.6.2 <draw:object>
        case "title":
        case "标题":
            break; // <*:title> OR <uof:标题>
        case "desc":
            break; // <*:desc>
        case "binary-data":
            break; // 10.4.5 TODO: b64 blob
        /* 9.2 Advanced Tables */ case "table-source":
            break; // 9.2.6
        case "scenario":
            break; // 9.2.6
        case "iteration":
            break; // 9.4.3 <table:iteration>
        case "content-validations":
            break; // 9.4.4 <table:
        case "content-validation":
            break; // 9.4.5 <table:
        case "help-message":
            break; // 9.4.6 <table:
        case "error-message":
            break; // 9.4.7 <table:
        case "database-ranges":
            break; // 9.4.14 <table:database-ranges>
        case "filter":
            break; // 9.5.2 <table:filter>
        case "filter-and":
            break; // 9.5.3 <table:filter-and>
        case "filter-or":
            break; // 9.5.4 <table:filter-or>
        case "filter-condition":
            break; // 9.5.5 <table:filter-condition>
        case "list-level-style-bullet":
            break; // 16.31 <text:
        case "list-level-style-number":
            break; // 16.32 <text:
        case "list-level-properties":
            break; // 17.19 <style:
        /* 7.3 Document Fields */ case "sender-firstname":
        case "sender-lastname":
        case "sender-initials":
        case "sender-title":
        case "sender-position":
        case "sender-email":
        case "sender-phone-private":
        case "sender-fax":
        case "sender-company":
        case "sender-phone-work":
        case "sender-street":
        case "sender-city":
        case "sender-postal-code":
        case "sender-country":
        case "sender-state-or-province":
        case "author-name":
        case "author-initials":
        case "chapter":
        case "file-name":
        case "template-name":
        case "sheet-name":
            break;
        case "event-listener":
            break;
        /* TODO: FODS Properties */ case "initial-creator":
        case "creation-date":
        case "print-date":
        case "generator":
        case "document-statistic":
        case "user-defined":
        case "editing-duration":
        case "editing-cycles":
            break;
        /* TODO: FODS Config */ case "config-item":
            break;
        /* TODO: style tokens */ case "page-number":
            break; // TODO <text:page-number>
        case "page-count":
            break; // TODO <text:page-count>
        case "time":
            break; // TODO <text:time>
        /* 9.3 Advanced Table Cells */ case "cell-range-source":
            break; // 9.3.1 <table:
        case "detective":
            break; // 9.3.2 <table:
        case "operation":
            break; // 9.3.3 <table:
        case "highlighted-range":
            break; // 9.3.4 <table:
        /* 9.6 Data Pilot Tables <table: */ case "data-pilot-table":
        case "source-cell-range":
        case "source-service":
        case "data-pilot-field":
        case "data-pilot-level":
        case "data-pilot-subtotals":
        case "data-pilot-subtotal":
        case "data-pilot-members":
        case "data-pilot-member":
        case "data-pilot-display-info":
        case "data-pilot-sort-info":
        case "data-pilot-layout-info":
        case "data-pilot-field-reference":
        case "data-pilot-groups":
        case "data-pilot-group":
        case "data-pilot-group-member":
            break;
        /* 10.3 Drawing Shapes */ case "rect":
            break;
        /* 14.6 DDE Connections */ case "dde-connection-decls":
        case "dde-connection-decl":
        case "dde-link":
        case "dde-source":
            break;
        case "properties":
            break; // 13.7 <form:properties>
        case "property":
            break; // 13.8 <form:property>
        case "a":
            if (Rn[1] !== "/") {
                atag = parsexmltag(Rn[0], false);
                if (!atag.href) break;
                atag.Target = unescapexml(atag.href);
                delete atag.href;
                if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                    _Ref = ods_to_csf_3D(atag.Target.slice(1));
                    atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                } else if (atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
            }
            break;
        /* non-standard */ case "table-protection":
            break;
        case "data-pilot-grand-total":
            break; // <table:
        case "office-document-common-attrs":
            break; // bare
        default:
            switch(Rn[2]){
                case "dc:":
                case "calcext:":
                case "loext:":
                case "ooo:":
                case "chartooo:":
                case "draw:":
                case "style:":
                case "chart:":
                case "form:":
                case "uof:":
                case "表:":
                case "字:":
                    break;
                default:
                    if (opts.WTF) throw new Error(Rn);
            }
    }
    var out /*:Workbook*/  = {
        Sheets: Sheets,
        SheetNames: SheetNames,
        Workbook: WB
    } /*:any*/ ;
    if (opts.bookSheets) delete /*::(*/ out /*:: :any)*/ .Sheets;
    return out;
}
function parse_ods(zip /*:ZIPFile*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    opts = opts || {} /*:any*/ ;
    if (safegetzipfile(zip, "META-INF/manifest.xml")) parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
    var content = getzipstr(zip, "content.xml");
    if (!content) throw new Error("Missing content.xml in ODS / UOF file");
    var wb = parse_content_xml(utf8read(content), opts);
    if (safegetzipfile(zip, "meta.xml")) wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
    return wb;
}
function parse_fods(data /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    return parse_content_xml(data, opts);
}
/* OpenDocument */ var write_styles_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {
    var master_styles = [
        "<office:master-styles>",
        '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
        "<style:header/>",
        '<style:header-left style:display="false"/>',
        "<style:footer/>",
        '<style:footer-left style:display="false"/>',
        "</style:master-page>",
        "</office:master-styles>"
    ].join("");
    var payload = "<office:document-styles " + wxt_helper({
        "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
        "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
        "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
        "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
        "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
        "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
        "xmlns:xlink": "http://www.w3.org/1999/xlink",
        "xmlns:dc": "http://purl.org/dc/elements/1.1/",
        "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
        "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
        "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
        "office:version": "1.2"
    }) + ">" + master_styles + "</office:document-styles>";
    return function wso() {
        return XML_HEADER + payload;
    };
}();
var write_content_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {
    /* 6.1.2 White Space Characters */ var write_text_p = function(text /*:string*/ ) /*:string*/ {
        return escapexml(text).replace(/  +/g, function($$) {
            return '<text:s text:c="' + $$.length + '"/>';
        }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
    };
    var null_cell_xml = "          <table:table-cell />\n";
    var covered_cell_xml = "          <table:covered-table-cell/>\n";
    var write_ws = function(ws, wb /*:Workbook*/ , i /*:number*/  /*::, opts*/ ) /*:string*/ {
        /* Section 9 Tables */ var o /*:Array<string>*/  = [];
        o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '" table:style-name="ta1">\n');
        var R = 0, C = 0, range = decode_range(ws["!ref"] || "A1");
        var marr /*:Array<Range>*/  = ws["!merges"] || [], mi = 0;
        var dense = Array.isArray(ws);
        if (ws["!cols"]) for(C = 0; C <= range.e.c; ++C)o.push("        <table:table-column" + (ws["!cols"][C] ? ' table:style-name="co' + ws["!cols"][C].ods + '"' : "") + "></table:table-column>\n");
        var H = "", ROWS = ws["!rows"] || [];
        for(R = 0; R < range.s.r; ++R){
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + "></table:table-row>\n");
        }
        for(; R <= range.e.r; ++R){
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + ">\n");
            for(C = 0; C < range.s.c; ++C)o.push(null_cell_xml);
            for(; C <= range.e.c; ++C){
                var skip = false, ct = {}, textp = "";
                for(mi = 0; mi != marr.length; ++mi){
                    if (marr[mi].s.c > C) continue;
                    if (marr[mi].s.r > R) continue;
                    if (marr[mi].e.c < C) continue;
                    if (marr[mi].e.r < R) continue;
                    if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                    ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                    ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                    break;
                }
                if (skip) {
                    o.push(covered_cell_xml);
                    continue;
                }
                var ref = encode_cell({
                    r: R,
                    c: C
                }), cell = dense ? (ws[R] || [])[C] : ws[ref];
                if (cell && cell.f) {
                    ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                    if (cell.F) {
                        if (cell.F.slice(0, ref.length) == ref) {
                            var _Fref = decode_range(cell.F);
                            ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                            ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                        }
                    }
                }
                if (!cell) {
                    o.push(null_cell_xml);
                    continue;
                }
                switch(cell.t){
                    case "b":
                        textp = cell.v ? "TRUE" : "FALSE";
                        ct["office:value-type"] = "boolean";
                        ct["office:boolean-value"] = cell.v ? "true" : "false";
                        break;
                    case "n":
                        textp = cell.w || String(cell.v || 0);
                        ct["office:value-type"] = "float";
                        ct["office:value"] = cell.v || 0;
                        break;
                    case "s":
                    case "str":
                        textp = cell.v == null ? "" : cell.v;
                        ct["office:value-type"] = "string";
                        break;
                    case "d":
                        textp = cell.w || parseDate(cell.v).toISOString();
                        ct["office:value-type"] = "date";
                        ct["office:date-value"] = parseDate(cell.v).toISOString();
                        ct["table:style-name"] = "ce1";
                        break;
                    //case 'e':
                    default:
                        o.push(null_cell_xml);
                        continue;
                }
                var text_p = write_text_p(textp);
                if (cell.l && cell.l.Target) {
                    var _tgt = cell.l.Target;
                    _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                    // TODO: choose correct parent path format based on link delimiters
                    if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/)) _tgt = "../" + _tgt;
                    text_p = writextag("text:a", text_p, {
                        "xlink:href": _tgt.replace(/&/g, "&amp;")
                    });
                }
                o.push("          " + writextag("table:table-cell", writextag("text:p", text_p, {}), ct) + "\n");
            }
            o.push("        </table:table-row>\n");
        }
        o.push("      </table:table>\n");
        return o.join("");
    };
    var write_automatic_styles_ods = function(o /*:Array<string>*/ , wb) {
        o.push(" <office:automatic-styles>\n");
        o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
        o.push('   <number:month number:style="long"/>\n');
        o.push("   <number:text>/</number:text>\n");
        o.push('   <number:day number:style="long"/>\n');
        o.push("   <number:text>/</number:text>\n");
        o.push("   <number:year/>\n");
        o.push("  </number:date-style>\n");
        /* column styles */ var cidx = 0;
        wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
        }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!cols"]) {
                for(var C = 0; C < ws["!cols"].length; ++C)if (ws["!cols"][C]) {
                    var colobj = ws["!cols"][C];
                    if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;
                    process_col(colobj);
                    colobj.ods = cidx;
                    var w = ws["!cols"][C].wpx + "px";
                    o.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                    o.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w + '"/>\n');
                    o.push("  </style:style>\n");
                    ++cidx;
                }
            }
        });
        /* row styles */ var ridx = 0;
        wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
        }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!rows"]) {
                for(var R = 0; R < ws["!rows"].length; ++R)if (ws["!rows"][R]) {
                    ws["!rows"][R].ods = ridx;
                    var h = ws["!rows"][R].hpx + "px";
                    o.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                    o.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
                    o.push("  </style:style>\n");
                    ++ridx;
                }
            }
        });
        /* table */ o.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
        o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
        o.push("  </style:style>\n");
        /* table cells, text */ o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
        /* page-layout */ o.push(" </office:automatic-styles>\n");
    };
    return function wcx(wb, opts) {
        var o = [
            XML_HEADER
        ];
        /* 3.1.3.2 */ var attr = wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
            "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
            "xmlns:math": "http://www.w3.org/1998/Math/MathML",
            "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
            "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
            "xmlns:ooo": "http://openoffice.org/2004/office",
            "xmlns:ooow": "http://openoffice.org/2004/writer",
            "xmlns:oooc": "http://openoffice.org/2004/calc",
            "xmlns:dom": "http://www.w3.org/2001/xml-events",
            "xmlns:xforms": "http://www.w3.org/2002/xforms",
            "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
            "xmlns:rpt": "http://openoffice.org/2005/report",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
            "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
            "xmlns:tableooo": "http://openoffice.org/2009/table",
            "xmlns:drawooo": "http://openoffice.org/2010/draw",
            "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
            "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
            "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
            "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
            "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
            "office:version": "1.2"
        });
        var fods = wxt_helper({
            "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
            "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
        });
        if (opts.bookType == "fods") {
            o.push("<office:document" + attr + fods + ">\n");
            o.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
        // TODO: settings (equiv of settings.xml for ODS)
        } else o.push("<office:document-content" + attr + ">\n");
        // o.push('  <office:scripts/>\n');
        write_automatic_styles_ods(o, wb);
        o.push("  <office:body>\n");
        o.push("    <office:spreadsheet>\n");
        for(var i = 0; i != wb.SheetNames.length; ++i)o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));
        o.push("    </office:spreadsheet>\n");
        o.push("  </office:body>\n");
        if (opts.bookType == "fods") o.push("</office:document>");
        else o.push("</office:document-content>");
        return o.join("");
    };
}();
function write_ods(wb /*:any*/ , opts /*:any*/ ) {
    if (opts.bookType == "fods") return write_content_ods(wb, opts);
    var zip = zip_new();
    var f = "";
    var manifest /*:Array<Array<string> >*/  = [];
    var rdf /*:Array<[string, string]>*/  = [];
    /* Part 3 Section 3.3 MIME Media Type */ f = "mimetype";
    zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
    /* Part 1 Section 2.2 Documents */ f = "content.xml";
    zip_add_file(zip, f, write_content_ods(wb, opts));
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "ContentFile"
    ]);
    /* TODO: these are hard-coded styles to satiate excel */ f = "styles.xml";
    zip_add_file(zip, f, write_styles_ods(wb, opts));
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "StylesFile"
    ]);
    /* TODO: this is hard-coded to satiate excel */ f = "meta.xml";
    zip_add_file(zip, f, XML_HEADER + write_meta_ods());
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "MetadataFile"
    ]);
    /* Part 3 Section 6 Metadata Manifest File */ f = "manifest.rdf";
    zip_add_file(zip, f, write_rdf(rdf /*, opts*/ ));
    manifest.push([
        f,
        "application/rdf+xml"
    ]);
    /* Part 3 Section 4 Manifest File */ f = "META-INF/manifest.xml";
    zip_add_file(zip, f, write_manifest(manifest /*, opts*/ ));
    return zip;
}
/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */ function u8_to_dataview(array) {
    return new DataView(array.buffer, array.byteOffset, array.byteLength);
}
function u8str(u8) {
    return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
}
function stru8(str) {
    return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
}
function u8contains(body, search) {
    outer: for(var L = 0; L <= body.length - search.length; ++L){
        for(var j = 0; j < search.length; ++j)if (body[L + j] != search[j]) continue outer;
        return true;
    }
    return false;
}
function u8concat(u8a) {
    var len = u8a.reduce(function(acc, x) {
        return acc + x.length;
    }, 0);
    var out = new Uint8Array(len);
    var off = 0;
    u8a.forEach(function(u8) {
        out.set(u8, off);
        off += u8.length;
    });
    return out;
}
function popcnt(x) {
    x -= x >> 1 & 1431655765;
    x = (x & 858993459) + (x >> 2 & 858993459);
    return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
}
function readDecimal128LE(buf, offset) {
    var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
    var mantissa = buf[offset + 14] & 1;
    for(var j = offset + 13; j >= offset; --j)mantissa = mantissa * 256 + buf[j];
    return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
}
function writeDecimal128LE(buf, offset, value) {
    var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;
    var mantissa = value / Math.pow(10, exp - 6176);
    buf[offset + 15] |= exp >> 7;
    buf[offset + 14] |= (exp & 127) << 1;
    for(var i = 0; mantissa >= 1; ++i, mantissa /= 256)buf[offset + i] = mantissa & 255;
    buf[offset + 15] |= value >= 0 ? 0 : 128;
}
function parse_varint49(buf, ptr) {
    var l = ptr ? ptr[0] : 0;
    var usz = buf[l] & 127;
    varint: if (buf[l++] >= 128) {
        usz |= (buf[l] & 127) << 7;
        if (buf[l++] < 128) break varint;
        usz |= (buf[l] & 127) << 14;
        if (buf[l++] < 128) break varint;
        usz |= (buf[l] & 127) << 21;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 28);
        ++l;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 35);
        ++l;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 42);
        ++l;
        if (buf[l++] < 128) break varint;
    }
    if (ptr) ptr[0] = l;
    return usz;
}
function write_varint49(v) {
    var usz = new Uint8Array(7);
    usz[0] = v & 127;
    var L = 1;
    sz: if (v > 127) {
        usz[L - 1] |= 128;
        usz[L] = v >> 7 & 127;
        ++L;
        if (v <= 16383) break sz;
        usz[L - 1] |= 128;
        usz[L] = v >> 14 & 127;
        ++L;
        if (v <= 2097151) break sz;
        usz[L - 1] |= 128;
        usz[L] = v >> 21 & 127;
        ++L;
        if (v <= 268435455) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 256 >>> 21 & 127;
        ++L;
        if (v <= 34359738367) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 65536 >>> 21 & 127;
        ++L;
        if (v <= 4398046511103) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 16777216 >>> 21 & 127;
        ++L;
    }
    return usz.slice(0, L);
}
function varint_to_i32(buf) {
    var l = 0, i32 = buf[l] & 127;
    varint: if (buf[l++] >= 128) {
        i32 |= (buf[l] & 127) << 7;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 14;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 21;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 28;
    }
    return i32;
}
function parse_shallow(buf) {
    var out = [], ptr = [
        0
    ];
    while(ptr[0] < buf.length){
        var off = ptr[0];
        var num = parse_varint49(buf, ptr);
        var type = num & 7;
        num = Math.floor(num / 8);
        var len = 0;
        var res;
        if (num == 0) break;
        switch(type){
            case 0:
                var l = ptr[0];
                while(buf[ptr[0]++] >= 128);
                res = buf.slice(l, ptr[0]);
                break;
            case 5:
                len = 4;
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 1:
                len = 8;
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 2:
                len = parse_varint49(buf, ptr);
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 3:
            case 4:
            default:
                throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
        }
        var v = {
            data: res,
            type: type
        };
        if (out[num] == null) out[num] = [
            v
        ];
        else out[num].push(v);
    }
    return out;
}
function write_shallow(proto) {
    var out = [];
    proto.forEach(function(field, idx) {
        field.forEach(function(item) {
            if (!item.data) return;
            out.push(write_varint49(idx * 8 + item.type));
            if (item.type == 2) out.push(write_varint49(item.data.length));
            out.push(item.data);
        });
    });
    return u8concat(out);
}
function mappa(data, cb) {
    return (data == null ? void 0 : data.map(function(d) {
        return cb(d.data);
    })) || [];
}
function parse_iwa_file(buf) {
    var _a;
    var out = [], ptr = [
        0
    ];
    while(ptr[0] < buf.length){
        var len = parse_varint49(buf, ptr);
        var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
        ptr[0] += len;
        var res = {
            id: varint_to_i32(ai[1][0].data),
            messages: []
        };
        ai[2].forEach(function(b) {
            var mi = parse_shallow(b.data);
            var fl = varint_to_i32(mi[3][0].data);
            res.messages.push({
                meta: mi,
                data: buf.slice(ptr[0], ptr[0] + fl)
            });
            ptr[0] += fl;
        });
        if ((_a = ai[3]) == null ? void 0 : _a[0]) res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
        out.push(res);
    }
    return out;
}
function write_iwa_file(ias) {
    var bufs = [];
    ias.forEach(function(ia) {
        var ai = [];
        ai[1] = [
            {
                data: write_varint49(ia.id),
                type: 0
            }
        ];
        ai[2] = [];
        if (ia.merge != null) ai[3] = [
            {
                data: write_varint49(+!!ia.merge),
                type: 0
            }
        ];
        var midata = [];
        ia.messages.forEach(function(mi) {
            midata.push(mi.data);
            mi.meta[3] = [
                {
                    type: 0,
                    data: write_varint49(mi.data.length)
                }
            ];
            ai[2].push({
                data: write_shallow(mi.meta),
                type: 2
            });
        });
        var aipayload = write_shallow(ai);
        bufs.push(write_varint49(aipayload.length));
        bufs.push(aipayload);
        midata.forEach(function(mid) {
            return bufs.push(mid);
        });
    });
    return u8concat(bufs);
}
function parse_snappy_chunk(type, buf) {
    if (type != 0) throw new Error("Unexpected Snappy chunk type ".concat(type));
    var ptr = [
        0
    ];
    var usz = parse_varint49(buf, ptr);
    var chunks = [];
    while(ptr[0] < buf.length){
        var tag = buf[ptr[0]] & 3;
        if (tag == 0) {
            var len = buf[ptr[0]++] >> 2;
            if (len < 60) ++len;
            else {
                var c = len - 59;
                len = buf[ptr[0]];
                if (c > 1) len |= buf[ptr[0] + 1] << 8;
                if (c > 2) len |= buf[ptr[0] + 2] << 16;
                if (c > 3) len |= buf[ptr[0] + 3] << 24;
                len >>>= 0;
                len++;
                ptr[0] += c;
            }
            chunks.push(buf.slice(ptr[0], ptr[0] + len));
            ptr[0] += len;
            continue;
        } else {
            var offset = 0, length = 0;
            if (tag == 1) {
                length = (buf[ptr[0]] >> 2 & 7) + 4;
                offset = (buf[ptr[0]++] & 224) << 3;
                offset |= buf[ptr[0]++];
            } else {
                length = (buf[ptr[0]++] >> 2) + 1;
                if (tag == 2) {
                    offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
                    ptr[0] += 2;
                } else {
                    offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
                    ptr[0] += 4;
                }
            }
            chunks = [
                u8concat(chunks)
            ];
            if (offset == 0) throw new Error("Invalid offset 0");
            if (offset > chunks[0].length) throw new Error("Invalid offset beyond length");
            if (length >= offset) {
                chunks.push(chunks[0].slice(-offset));
                length -= offset;
                while(length >= chunks[chunks.length - 1].length){
                    chunks.push(chunks[chunks.length - 1]);
                    length -= chunks[chunks.length - 1].length;
                }
            }
            chunks.push(chunks[0].slice(-offset, -offset + length));
        }
    }
    var o = u8concat(chunks);
    if (o.length != usz) throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
    return o;
}
function decompress_iwa_file(buf) {
    var out = [];
    var l = 0;
    while(l < buf.length){
        var t = buf[l++];
        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
        l += 3;
        out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
        l += len;
    }
    if (l !== buf.length) throw new Error("data is not a valid framed stream!");
    return u8concat(out);
}
function compress_iwa_file(buf) {
    var out = [];
    var l = 0;
    while(l < buf.length){
        var c = Math.min(buf.length - l, 268435455);
        var frame = new Uint8Array(4);
        out.push(frame);
        var usz = write_varint49(c);
        var L = usz.length;
        out.push(usz);
        if (c <= 60) {
            L++;
            out.push(new Uint8Array([
                c - 1 << 2
            ]));
        } else if (c <= 256) {
            L += 2;
            out.push(new Uint8Array([
                240,
                c - 1 & 255
            ]));
        } else if (c <= 65536) {
            L += 3;
            out.push(new Uint8Array([
                244,
                c - 1 & 255,
                c - 1 >> 8 & 255
            ]));
        } else if (c <= 16777216) {
            L += 4;
            out.push(new Uint8Array([
                248,
                c - 1 & 255,
                c - 1 >> 8 & 255,
                c - 1 >> 16 & 255
            ]));
        } else if (c <= 4294967296) {
            L += 5;
            out.push(new Uint8Array([
                252,
                c - 1 & 255,
                c - 1 >> 8 & 255,
                c - 1 >> 16 & 255,
                c - 1 >>> 24 & 255
            ]));
        }
        out.push(buf.slice(l, l + c));
        L += c;
        frame[0] = 0;
        frame[1] = L & 255;
        frame[2] = L >> 8 & 255;
        frame[3] = L >> 16 & 255;
        l += c;
    }
    return u8concat(out);
}
function parse_old_storage(buf, sst, rsst, v) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(4, true);
    var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
    var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
    if (flags & 512) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
    if (flags & 16) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    if (flags & 32) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
    }
    if (flags & 64) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
    }
    var ret;
    switch(buf[2]){
        case 0:
            break;
        case 2:
            ret = {
                t: "n",
                v: ieee
            };
            break;
        case 3:
            ret = {
                t: "s",
                v: sst[sidx]
            };
            break;
        case 5:
            ret = {
                t: "d",
                v: dt
            };
            break;
        case 6:
            ret = {
                t: "b",
                v: ieee > 0
            };
            break;
        case 7:
            ret = {
                t: "n",
                v: ieee / 86400
            };
            break;
        case 8:
            ret = {
                t: "e",
                v: 0
            };
            break;
        case 9:
            if (ridx > -1) ret = {
                t: "s",
                v: rsst[ridx]
            };
            else if (sidx > -1) ret = {
                t: "s",
                v: sst[sidx]
            };
            else if (!isNaN(ieee)) ret = {
                t: "n",
                v: ieee
            };
            else throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
            break;
        default:
            throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
    }
    return ret;
}
function parse_new_storage(buf, sst, rsst) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(8, true);
    var data_offset = 12;
    var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
    if (flags & 1) {
        d128 = readDecimal128LE(buf, data_offset);
        data_offset += 16;
    }
    if (flags & 2) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
    }
    if (flags & 4) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
    }
    if (flags & 8) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    if (flags & 16) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    var ret;
    switch(buf[1]){
        case 0:
            break;
        case 2:
            ret = {
                t: "n",
                v: d128
            };
            break;
        case 3:
            ret = {
                t: "s",
                v: sst[sidx]
            };
            break;
        case 5:
            ret = {
                t: "d",
                v: dt
            };
            break;
        case 6:
            ret = {
                t: "b",
                v: ieee > 0
            };
            break;
        case 7:
            ret = {
                t: "n",
                v: ieee / 86400
            };
            break;
        case 8:
            ret = {
                t: "e",
                v: 0
            };
            break;
        case 9:
            if (ridx > -1) ret = {
                t: "s",
                v: rsst[ridx]
            };
            else throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
            break;
        case 10:
            ret = {
                t: "n",
                v: d128
            };
            break;
        default:
            throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
    }
    return ret;
}
function write_new_storage(cell, sst) {
    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
    out[0] = 5;
    switch(cell.t){
        case "n":
            out[1] = 2;
            writeDecimal128LE(out, l, cell.v);
            flags |= 1;
            l += 16;
            break;
        case "b":
            out[1] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 2;
            l += 8;
            break;
        case "s":
            if (sst.indexOf(cell.v) == -1) throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[1] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 8;
            l += 4;
            break;
        default:
            throw "unsupported cell type " + cell.t;
    }
    dv.setUint32(8, flags, true);
    return out.slice(0, l);
}
function write_old_storage(cell, sst) {
    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
    out[0] = 3;
    switch(cell.t){
        case "n":
            out[2] = 2;
            dv.setFloat64(l, cell.v, true);
            flags |= 32;
            l += 8;
            break;
        case "b":
            out[2] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 32;
            l += 8;
            break;
        case "s":
            if (sst.indexOf(cell.v) == -1) throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[2] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 16;
            l += 4;
            break;
        default:
            throw "unsupported cell type " + cell.t;
    }
    dv.setUint32(4, flags, true);
    return out.slice(0, l);
}
function parse_cell_storage(buf, sst, rsst) {
    switch(buf[0]){
        case 0:
        case 1:
        case 2:
        case 3:
            return parse_old_storage(buf, sst, rsst, buf[0]);
        case 5:
            return parse_new_storage(buf, sst, rsst);
        default:
            throw new Error("Unsupported payload version ".concat(buf[0]));
    }
}
function parse_TSP_Reference(buf) {
    var pb = parse_shallow(buf);
    return parse_varint49(pb[1][0].data);
}
function write_TSP_Reference(idx) {
    var out = [];
    out[1] = [
        {
            type: 0,
            data: write_varint49(idx)
        }
    ];
    return write_shallow(out);
}
function parse_TST_TableDataList(M, root) {
    var pb = parse_shallow(root.data);
    var type = varint_to_i32(pb[1][0].data);
    var entries = pb[3];
    var data = [];
    (entries || []).forEach(function(entry) {
        var le = parse_shallow(entry.data);
        var key = varint_to_i32(le[1][0].data) >>> 0;
        switch(type){
            case 1:
                data[key] = u8str(le[3][0].data);
                break;
            case 8:
                var rt = M[parse_TSP_Reference(le[9][0].data)][0];
                var rtp = parse_shallow(rt.data);
                var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
                var mtype = varint_to_i32(rtpref.meta[1][0].data);
                if (mtype != 2001) throw new Error("2000 unexpected reference to ".concat(mtype));
                var tswpsa = parse_shallow(rtpref.data);
                data[key] = tswpsa[3].map(function(x) {
                    return u8str(x.data);
                }).join("");
                break;
        }
    });
    return data;
}
function parse_TST_TileRowInfo(u8, type) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    var pb = parse_shallow(u8);
    var R = varint_to_i32(pb[1][0].data) >>> 0;
    var cnt = varint_to_i32(pb[2][0].data) >>> 0;
    var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
    var used_storage_u8, used_storage;
    if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
    } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
    } else throw "NUMBERS Tile missing ".concat(type, " cell storage");
    var width = wide_offsets ? 4 : 1;
    var used_storage_offsets = u8_to_dataview(used_storage_u8);
    var offsets = [];
    for(var C = 0; C < used_storage_u8.length / 2; ++C){
        var off = used_storage_offsets.getUint16(C * 2, true);
        if (off < 65535) offsets.push([
            C,
            off
        ]);
    }
    if (offsets.length != cnt) throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
    var cells = [];
    for(C = 0; C < offsets.length - 1; ++C)cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
    if (offsets.length >= 1) cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
    return {
        R: R,
        cells: cells
    };
}
function parse_TST_Tile(M, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
    var ri = mappa(pb[5], function(u8) {
        return parse_TST_TileRowInfo(u8, storage);
    });
    return {
        nrows: varint_to_i32(pb[4][0].data) >>> 0,
        data: ri.reduce(function(acc, x) {
            if (!acc[x.R]) acc[x.R] = [];
            x.cells.forEach(function(cell, C) {
                if (acc[x.R][C]) throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
                acc[x.R][C] = cell;
            });
            return acc;
        }, [])
    };
}
function parse_TST_TableModelArchive(M, root, ws) {
    var _a;
    var pb = parse_shallow(root.data);
    var range = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
    if (range.e.r < 0) throw new Error("Invalid row varint ".concat(pb[6][0].data));
    range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
    if (range.e.c < 0) throw new Error("Invalid col varint ".concat(pb[7][0].data));
    ws["!ref"] = encode_range(range);
    var store = parse_shallow(pb[4][0].data);
    var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
    var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
    var tile = parse_shallow(store[3][0].data);
    var _R = 0;
    tile[1].forEach(function(t) {
        var tl = parse_shallow(t.data);
        var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
        var mtype = varint_to_i32(ref.meta[1][0].data);
        if (mtype != 6002) throw new Error("6001 unexpected reference to ".concat(mtype));
        var _tile = parse_TST_Tile(M, ref);
        _tile.data.forEach(function(row, R) {
            row.forEach(function(buf, C) {
                var addr = encode_cell({
                    r: _R + R,
                    c: C
                });
                var res = parse_cell_storage(buf, sst, rsst);
                if (res) ws[addr] = res;
            });
        });
        _R += _tile.nrows;
    });
}
function parse_TST_TableInfoArchive(M, root) {
    var pb = parse_shallow(root.data);
    var out = {
        "!ref": "A1"
    };
    var tableref = M[parse_TSP_Reference(pb[2][0].data)];
    var mtype = varint_to_i32(tableref[0].meta[1][0].data);
    if (mtype != 6001) throw new Error("6000 unexpected reference to ".concat(mtype));
    parse_TST_TableModelArchive(M, tableref[0], out);
    return out;
}
function parse_TN_SheetArchive(M, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var out = {
        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
        sheets: []
    };
    var shapeoffs = mappa(pb[2], parse_TSP_Reference);
    shapeoffs.forEach(function(off) {
        M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 6e3) out.sheets.push(parse_TST_TableInfoArchive(M, m));
        });
    });
    return out;
}
function parse_TN_DocumentArchive(M, root) {
    var out = book_new();
    var pb = parse_shallow(root.data);
    var sheetoffs = mappa(pb[1], parse_TSP_Reference);
    sheetoffs.forEach(function(off) {
        M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 2) {
                var root2 = parse_TN_SheetArchive(M, m);
                root2.sheets.forEach(function(sheet, idx) {
                    book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
                });
            }
        });
    });
    if (out.SheetNames.length == 0) throw new Error("Empty NUMBERS file");
    return out;
}
function parse_numbers_iwa(cfb) {
    var _a, _b, _c, _d;
    var M = {}, indices = [];
    cfb.FullPaths.forEach(function(p) {
        if (p.match(/\.iwpv2/)) throw new Error("Unsupported password protection");
    });
    cfb.FileIndex.forEach(function(s) {
        if (!s.name.match(/\.iwa$/)) return;
        var o;
        try {
            o = decompress_iwa_file(s.content);
        } catch (e) {
            return console.log("?? " + s.content.length + " " + (e.message || e));
        }
        var packets;
        try {
            packets = parse_iwa_file(o);
        } catch (e) {
            return console.log("## " + (e.message || e));
        }
        packets.forEach(function(packet) {
            M[packet.id] = packet.messages;
            indices.push(packet.id);
        });
    });
    if (!indices.length) throw new Error("File has no messages");
    var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
    if (!docroot) indices.forEach(function(idx) {
        M[idx].forEach(function(iwam) {
            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
            if (mtype == 1) {
                if (!docroot) docroot = iwam;
                else throw new Error("Document has multiple roots");
            }
        });
    });
    if (!docroot) throw new Error("Cannot find Document root");
    return parse_TN_DocumentArchive(M, docroot);
}
function write_tile_row(tri, data, SST) {
    var _a, _b, _c, _d;
    if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0])) throw "Mutation only works on post-BNC storages!";
    var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;
    if (wide_offsets) throw "Math only works with normal offsets";
    var cnt = 0;
    var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
    var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
    for(var C = 0; C < data.length; ++C){
        if (data[C] == null) {
            dv.setUint16(C * 2, 65535, true);
            _dv.setUint16(C * 2, 65535);
            continue;
        }
        dv.setUint16(C * 2, last_offset, true);
        _dv.setUint16(C * 2, _last_offset, true);
        var celload, _celload;
        switch(typeof data[C]){
            case "string":
                celload = write_new_storage({
                    t: "s",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "s",
                    v: data[C]
                }, SST);
                break;
            case "number":
                celload = write_new_storage({
                    t: "n",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "n",
                    v: data[C]
                }, SST);
                break;
            case "boolean":
                celload = write_new_storage({
                    t: "b",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "b",
                    v: data[C]
                }, SST);
                break;
            default:
                throw new Error("Unsupported value " + data[C]);
        }
        cell_storage.push(celload);
        last_offset += celload.length;
        _cell_storage.push(_celload);
        _last_offset += _celload.length;
        ++cnt;
    }
    tri[2][0].data = write_varint49(cnt);
    for(; C < tri[7][0].data.length / 2; ++C){
        dv.setUint16(C * 2, 65535, true);
        _dv.setUint16(C * 2, 65535, true);
    }
    tri[6][0].data = u8concat(cell_storage);
    tri[3][0].data = u8concat(_cell_storage);
    return cnt;
}
function write_numbers_iwa(wb, opts) {
    if (!opts || !opts.numbers) throw new Error("Must pass a `numbers` option -- check the README");
    var ws = wb.Sheets[wb.SheetNames[0]];
    if (wb.SheetNames.length > 1) console.error("The Numbers writer currently writes only the first table");
    var range = decode_range(ws["!ref"]);
    range.s.r = range.s.c = 0;
    var trunc = false;
    if (range.e.c > 9) {
        trunc = true;
        range.e.c = 9;
    }
    if (range.e.r > 49) {
        trunc = true;
        range.e.r = 49;
    }
    if (trunc) console.error("The Numbers writer is currently limited to ".concat(encode_range(range)));
    var data = sheet_to_json(ws, {
        range: range,
        header: 1
    });
    var SST = [
        "~Sh33tJ5~"
    ];
    data.forEach(function(row) {
        return row.forEach(function(cell) {
            if (typeof cell == "string") SST.push(cell);
        });
    });
    var dependents = {};
    var indices = [];
    var cfb = CFB.read(opts.numbers, {
        type: "base64"
    });
    cfb.FileIndex.map(function(fi, idx) {
        return [
            fi,
            cfb.FullPaths[idx]
        ];
    }).forEach(function(row) {
        var fi = row[0], fp = row[1];
        if (fi.type != 2) return;
        if (!fi.name.match(/\.iwa/)) return;
        var old_content = fi.content;
        var raw1 = decompress_iwa_file(old_content);
        var x2 = parse_iwa_file(raw1);
        x2.forEach(function(packet2) {
            indices.push(packet2.id);
            dependents[packet2.id] = {
                deps: [],
                location: fp,
                type: varint_to_i32(packet2.messages[0].meta[1][0].data)
            };
        });
    });
    indices.sort(function(x2, y2) {
        return x2 - y2;
    });
    var indices_varint = indices.filter(function(x2) {
        return x2 > 1;
    }).map(function(x2) {
        return [
            x2,
            write_varint49(x2)
        ];
    });
    cfb.FileIndex.map(function(fi, idx) {
        return [
            fi,
            cfb.FullPaths[idx]
        ];
    }).forEach(function(row) {
        var fi = row[0], fp = row[1];
        if (!fi.name.match(/\.iwa/)) return;
        var x2 = parse_iwa_file(decompress_iwa_file(fi.content));
        x2.forEach(function(ia) {
            ia.messages.forEach(function(m) {
                indices_varint.forEach(function(ivi) {
                    if (ia.messages.some(function(mess) {
                        return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);
                    })) dependents[ivi[0]].deps.push(ia.id);
                });
            });
        });
    });
    function get_unique_msgid() {
        for(var i = 927262; i < 2e6; ++i)if (!dependents[i]) return i;
        throw new Error("Too many messages");
    }
    var entry = CFB.find(cfb, dependents[1].location);
    var x = parse_iwa_file(decompress_iwa_file(entry.content));
    var docroot;
    for(var xi = 0; xi < x.length; ++xi){
        var packet = x[xi];
        if (packet.id == 1) docroot = packet;
    }
    var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    var pb = parse_shallow(docroot.messages[0].data);
    pb[6][0].data = write_varint49(range.e.r + 1);
    pb[7][0].data = write_varint49(range.e.c + 1);
    var cruidsref = parse_TSP_Reference(pb[46][0].data);
    var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
    var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    for(var j = 0; j < _x.length; ++j){
        if (_x[j].id == cruidsref) break;
    }
    if (_x[j].id != cruidsref) throw "Bad ColumnRowUIDMapArchive";
    var cruids = parse_shallow(_x[j].messages[0].data);
    cruids[1] = [];
    cruids[2] = [], cruids[3] = [];
    for(var C = 0; C <= range.e.c; ++C){
        var uuid = [];
        uuid[1] = uuid[2] = [
            {
                type: 0,
                data: write_varint49(C + 420690)
            }
        ];
        cruids[1].push({
            type: 2,
            data: write_shallow(uuid)
        });
        cruids[2].push({
            type: 0,
            data: write_varint49(C)
        });
        cruids[3].push({
            type: 0,
            data: write_varint49(C)
        });
    }
    cruids[4] = [];
    cruids[5] = [], cruids[6] = [];
    for(var R = 0; R <= range.e.r; ++R){
        uuid = [];
        uuid[1] = uuid[2] = [
            {
                type: 0,
                data: write_varint49(R + 726270)
            }
        ];
        cruids[4].push({
            type: 2,
            data: write_shallow(uuid)
        });
        cruids[5].push({
            type: 0,
            data: write_varint49(R)
        });
        cruids[6].push({
            type: 0,
            data: write_varint49(R)
        });
    }
    _x[j].messages[0].data = write_shallow(cruids);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    delete pb[46];
    var store = parse_shallow(pb[4][0].data);
    store[7][0].data = write_varint49(range.e.r + 1);
    var row_headers = parse_shallow(store[1][0].data);
    var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
    oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
    _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    if (_x[0].id != row_header_ref) throw "Bad HeaderStorageBucket";
    var base_bucket = parse_shallow(_x[0].messages[0].data);
    for(R = 0; R < data.length; ++R){
        var _bucket = parse_shallow(base_bucket[2][0].data);
        _bucket[1][0].data = write_varint49(R);
        _bucket[4][0].data = write_varint49(data[R].length);
        base_bucket[2][R] = {
            type: base_bucket[2][0].type,
            data: write_shallow(_bucket)
        };
    }
    _x[0].messages[0].data = write_shallow(base_bucket);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    var col_header_ref = parse_TSP_Reference(store[2][0].data);
    oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
    _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    if (_x[0].id != col_header_ref) throw "Bad HeaderStorageBucket";
    base_bucket = parse_shallow(_x[0].messages[0].data);
    for(C = 0; C <= range.e.c; ++C){
        _bucket = parse_shallow(base_bucket[2][0].data);
        _bucket[1][0].data = write_varint49(C);
        _bucket[4][0].data = write_varint49(range.e.r + 1);
        base_bucket[2][C] = {
            type: base_bucket[2][0].type,
            data: write_shallow(_bucket)
        };
    }
    _x[0].messages[0].data = write_shallow(base_bucket);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    var sstref = parse_TSP_Reference(store[4][0].data);
    (function() {
        var sentry = CFB.find(cfb, dependents[sstref].location);
        var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
        var sstroot;
        for(var sxi = 0; sxi < sx.length; ++sxi){
            var packet2 = sx[sxi];
            if (packet2.id == sstref) sstroot = packet2;
        }
        var sstdata = parse_shallow(sstroot.messages[0].data);
        sstdata[3] = [];
        var newsst = [];
        SST.forEach(function(str, i) {
            newsst[1] = [
                {
                    type: 0,
                    data: write_varint49(i)
                }
            ];
            newsst[2] = [
                {
                    type: 0,
                    data: write_varint49(1)
                }
            ];
            newsst[3] = [
                {
                    type: 2,
                    data: stru8(str)
                }
            ];
            sstdata[3].push({
                type: 2,
                data: write_shallow(newsst)
            });
        });
        sstroot.messages[0].data = write_shallow(sstdata);
        var sy = write_iwa_file(sx);
        var raw32 = compress_iwa_file(sy);
        sentry.content = raw32;
        sentry.size = sentry.content.length;
    })();
    var tile = parse_shallow(store[3][0].data);
    var t = tile[1][0];
    delete tile[2];
    var tl = parse_shallow(t.data);
    var tileref = parse_TSP_Reference(tl[2][0].data);
    (function() {
        var tentry = CFB.find(cfb, dependents[tileref].location);
        var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
        var tileroot;
        for(var sxi = 0; sxi < tx.length; ++sxi){
            var packet2 = tx[sxi];
            if (packet2.id == tileref) tileroot = packet2;
        }
        var tiledata = parse_shallow(tileroot.messages[0].data);
        delete tiledata[6];
        delete tile[7];
        var rowload = new Uint8Array(tiledata[5][0].data);
        tiledata[5] = [];
        var cnt = 0;
        for(var R2 = 0; R2 <= range.e.r; ++R2){
            var tilerow = parse_shallow(rowload);
            cnt += write_tile_row(tilerow, data[R2], SST);
            tilerow[1][0].data = write_varint49(R2);
            tiledata[5].push({
                data: write_shallow(tilerow),
                type: 2
            });
        }
        tiledata[1] = [
            {
                type: 0,
                data: write_varint49(range.e.c + 1)
            }
        ];
        tiledata[2] = [
            {
                type: 0,
                data: write_varint49(range.e.r + 1)
            }
        ];
        tiledata[3] = [
            {
                type: 0,
                data: write_varint49(cnt)
            }
        ];
        tiledata[4] = [
            {
                type: 0,
                data: write_varint49(range.e.r + 1)
            }
        ];
        tileroot.messages[0].data = write_shallow(tiledata);
        var ty = write_iwa_file(tx);
        var raw32 = compress_iwa_file(ty);
        tentry.content = raw32;
        tentry.size = tentry.content.length;
    })();
    t.data = write_shallow(tl);
    store[3][0].data = write_shallow(tile);
    pb[4][0].data = write_shallow(store);
    docroot.messages[0].data = write_shallow(pb);
    var y = write_iwa_file(x);
    var raw3 = compress_iwa_file(y);
    entry.content = raw3;
    entry.size = entry.content.length;
    return cfb;
}
function fix_opts_func(defaults /*:Array<Array<any> >*/ ) /*:{(o:any):void}*/ {
    return function fix_opts(opts) {
        for(var i = 0; i != defaults.length; ++i){
            var d = defaults[i];
            if (opts[d[0]] === undefined) opts[d[0]] = d[1];
            if (d[2] === "n") opts[d[0]] = Number(opts[d[0]]);
        }
    };
}
function fix_read_opts(opts) {
    fix_opts_func([
        [
            "cellNF",
            false
        ],
        /* emit cell number format string as .z */ [
            "cellHTML",
            true
        ],
        /* emit html string as .h */ [
            "cellFormula",
            true
        ],
        /* emit formulae as .f */ [
            "cellStyles",
            false
        ],
        /* emits style/theme as .s */ [
            "cellText",
            true
        ],
        /* emit formatted text as .w */ [
            "cellDates",
            false
        ],
        /* emit date cells with type `d` */ [
            "sheetStubs",
            false
        ],
        /* emit empty cells */ [
            "sheetRows",
            0,
            "n"
        ],
        /* read n rows (0 = read all rows) */ [
            "bookDeps",
            false
        ],
        /* parse calculation chains */ [
            "bookSheets",
            false
        ],
        /* only try to get sheet names (no Sheets) */ [
            "bookProps",
            false
        ],
        /* only try to get properties (no Sheets) */ [
            "bookFiles",
            false
        ],
        /* include raw file structure (keys, files, cfb) */ [
            "bookVBA",
            false
        ],
        /* include vba raw data (vbaraw) */ [
            "password",
            ""
        ],
        /* password */ [
            "WTF",
            false
        ]
    ])(opts);
}
function fix_write_opts(opts) {
    fix_opts_func([
        [
            "cellDates",
            false
        ],
        /* write date cells with type `d` */ [
            "bookSST",
            false
        ],
        /* Generate Shared String Table */ [
            "bookType",
            "xlsx"
        ],
        /* Type of workbook (xlsx/m/b) */ [
            "compression",
            false
        ],
        /* Use file compression */ [
            "WTF",
            false
        ]
    ])(opts);
}
function get_sheet_type(n /*:string*/ ) /*:string*/ {
    if (RELS.WS.indexOf(n) > -1) return "sheet";
    if (RELS.CS && n == RELS.CS) return "chart";
    if (RELS.DS && n == RELS.DS) return "dialog";
    if (RELS.MS && n == RELS.MS) return "macro";
    return n && n.length ? n : "sheet";
}
function safe_parse_wbrels(wbrels, sheets) {
    if (!wbrels) return 0;
    try {
        wbrels = sheets.map(function pwbr(w) {
            if (!w.id) w.id = w.strRelID;
            return [
                w.name,
                wbrels["!id"][w.id].Target,
                get_sheet_type(wbrels["!id"][w.id].Type)
            ];
        });
    } catch (e) {
        return null;
    }
    return !wbrels || wbrels.length === 0 ? null : wbrels;
}
function safe_parse_sheet(zip, path /*:string*/ , relsPath /*:string*/ , sheet, idx /*:number*/ , sheetRels, sheets, stype /*:string*/ , opts, wb, themes, styles) {
    try {
        sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
        var data = getzipdata(zip, path);
        var _ws;
        switch(stype){
            case "sheet":
                _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            case "chart":
                _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                if (!_ws || !_ws["!drawel"]) break;
                var dfile = resolve_path(_ws["!drawel"].Target, path);
                var drelsp = get_rels_path(dfile);
                var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
                var chartp = resolve_path(draw, dfile);
                var crelsp = get_rels_path(chartp);
                _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
                break;
            case "macro":
                _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            case "dialog":
                _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            default:
                throw new Error("Unrecognized sheet type " + stype);
        }
        sheets[sheet] = _ws;
        /* scan rels for comments and threaded comments */ var tcomments = [];
        if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
            var dfile = "";
            if (sheetRels[sheet][n].Type == RELS.CMNT) {
                dfile = resolve_path(sheetRels[sheet][n].Target, path);
                var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
                if (!comments || !comments.length) return;
                sheet_insert_comments(_ws, comments, false);
            }
            if (sheetRels[sheet][n].Type == RELS.TCMNT) {
                dfile = resolve_path(sheetRels[sheet][n].Target, path);
                tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
            }
        });
        if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
    } catch (e) {
        if (opts.WTF) throw e;
    }
}
function strip_front_slash(x /*:string*/ ) /*:string*/ {
    return x.charAt(0) == "/" ? x.slice(1) : x;
}
function parse_zip(zip /*:ZIP*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    make_ssf();
    opts = opts || {};
    fix_read_opts(opts);
    /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */ if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts);
    /* UOC */ if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts);
    /* Numbers */ if (safegetzipfile(zip, "Index/Document.iwa")) {
        if (typeof Uint8Array == "undefined") throw new Error("NUMBERS file parsing requires Uint8Array support");
        if (typeof parse_numbers_iwa != "undefined") {
            if (zip.FileIndex) return parse_numbers_iwa(zip);
            var _zip = CFB.utils.cfb_new();
            zipentries(zip).forEach(function(e) {
                zip_add_file(_zip, e, getzipbin(zip, e));
            });
            return parse_numbers_iwa(_zip);
        }
        throw new Error("Unsupported NUMBERS file");
    }
    if (!safegetzipfile(zip, "[Content_Types].xml")) {
        if (safegetzipfile(zip, "index.xml.gz")) throw new Error("Unsupported NUMBERS 08 file");
        if (safegetzipfile(zip, "index.xml")) throw new Error("Unsupported NUMBERS 09 file");
        throw new Error("Unsupported ZIP file");
    }
    var entries = zipentries(zip);
    var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
    var xlsb = false;
    var sheets, binname;
    if (dir.workbooks.length === 0) {
        binname = "xl/workbook.xml";
        if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
    }
    if (dir.workbooks.length === 0) {
        binname = "xl/workbook.bin";
        if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
        dir.workbooks.push(binname);
        xlsb = true;
    }
    if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
    var themes = {} /*:any*/ ;
    var styles = {} /*:any*/ ;
    if (!opts.bookSheets && !opts.bookProps) {
        strs = [];
        if (dir.sst) try {
            strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
        } catch (e) {
            if (opts.WTF) throw e;
        }
        if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
        if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    }
    /*var externbooks = */ dir.links.map(function(link) {
        try {
            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
        } catch (e) {}
    });
    var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
    var props = {}, propdata = "";
    if (dir.coreprops.length) {
        propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
        if (propdata) props = parse_core_props(propdata);
        if (dir.extprops.length !== 0) {
            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
            if (propdata) parse_ext_props(propdata, props, opts);
        }
    }
    var custprops = {};
    if (!opts.bookSheets || opts.bookProps) {
        if (dir.custprops.length !== 0) {
            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
            if (propdata) custprops = parse_cust_props(propdata, opts);
        }
    }
    var out = {} /*:any*/ ;
    if (opts.bookSheets || opts.bookProps) {
        if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {
            return x.name;
        });
        else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;
        if (opts.bookProps) {
            out.Props = props;
            out.Custprops = custprops;
        }
        if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets;
        if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
    }
    sheets = {};
    var deps = {};
    if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
    var i = 0;
    var sheetRels = {} /*:any*/ ;
    var path, relsPath;
    var wbsheets = wb.Sheets;
    props.Worksheets = wbsheets.length;
    props.SheetNames = [];
    for(var j = 0; j != wbsheets.length; ++j)props.SheetNames[j] = wbsheets[j].name;
    var wbext = xlsb ? "bin" : "xml";
    var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
    if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
    var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
    if ((dir.metadata || []).length >= 1) /* TODO: MDX and other types of metadata */ opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
    if ((dir.people || []).length >= 1) opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
    if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
    /* Numbers iOS hack */ var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
    wsloop: for(i = 0; i != props.Worksheets; ++i){
        var stype = "sheet";
        if (wbrels && wbrels[i]) {
            path = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, "");
            if (!safegetzipfile(zip, path)) path = wbrels[i][1];
            if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
            stype = wbrels[i][2];
        } else {
            path = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext;
            path = path.replace(/sheet0\./, "sheet.");
        }
        relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
        if (opts && opts.sheets != null) switch(typeof opts.sheets){
            case "number":
                if (i != opts.sheets) continue wsloop;
                break;
            case "string":
                if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
                break;
            default:
                if (Array.isArray && Array.isArray(opts.sheets)) {
                    var snjseen = false;
                    for(var snj = 0; snj != opts.sheets.length; ++snj){
                        if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen = 1;
                        if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
                    }
                    if (!snjseen) continue wsloop;
                }
        }
        safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
    }
    out = {
        Directory: dir,
        Workbook: wb,
        Props: props,
        Custprops: custprops,
        Deps: deps,
        Sheets: sheets,
        SheetNames: props.SheetNames,
        Strings: strs,
        Styles: styles,
        Themes: themes,
        SSF: dup(table_fmt)
    } /*:any*/ ;
    if (opts && opts.bookFiles) {
        if (zip.files) {
            out.keys = entries;
            out.files = zip.files;
        } else {
            out.keys = [];
            out.files = {};
            zip.FullPaths.forEach(function(p, idx) {
                p = p.replace(/^Root Entry[\/]/, "");
                out.keys.push(p);
                out.files[p] = zip.FileIndex[idx];
            });
        }
    }
    if (opts && opts.bookVBA) {
        if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
        else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
    }
    return out;
}
/* [MS-OFFCRYPTO] 2.1.1 */ function parse_xlsxcfb(cfb, _opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var opts = _opts || {};
    var f = "Workbook", data = CFB.find(cfb, f);
    try {
        f = "/!DataSpaces/Version";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        /*var version = */ parse_DataSpaceVersionInfo(data.content);
        /* 2.3.4.1 */ f = "/!DataSpaces/DataSpaceMap";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var dsm = parse_DataSpaceMap(data.content);
        if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage") throw new Error("ECMA-376 Encrypted file bad " + f);
        /* 2.3.4.2 */ f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var seds = parse_DataSpaceDefinition(data.content);
        if (seds.length != 1 || seds[0] != "StrongEncryptionTransform") throw new Error("ECMA-376 Encrypted file bad " + f);
        /* 2.3.4.3 */ f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        /*var hdr = */ parse_Primary(data.content);
    } catch (e) {}
    f = "/EncryptionInfo";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    var einfo = parse_EncryptionInfo(data.content);
    /* 2.3.4.4 */ f = "/EncryptedPackage";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    /*global decrypt_agile */ /*:: declare var decrypt_agile:any; */ if (einfo[0] == 0x04 && typeof decrypt_agile !== "undefined") return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    /*global decrypt_std76 */ /*:: declare var decrypt_std76:any; */ if (einfo[0] == 0x02 && typeof decrypt_std76 !== "undefined") return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    throw new Error("File is password-protected");
}
function write_zip(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    if (opts.bookType == "ods") return write_ods(wb, opts);
    if (opts.bookType == "numbers") return write_numbers_iwa(wb, opts);
    if (opts.bookType == "xlsb") return write_zip_xlsxb(wb, opts);
    return write_zip_xlsx(wb, opts);
}
/* XLSX and XLSB writing are very similar.  Originally they were unified in one
   export function.  This is horrible for tree shaking in the common case (most
   applications need to export files in one format) so this function supports
   both formats while write_zip_xlsx only handles XLSX */ function write_zip_xlsxb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    _shapeid = 1024;
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
    }
    opts.rels = {};
    opts.wbrels = {};
    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    opts.Strings.Count = 0;
    opts.Strings.Unique = 0;
    if (browser_has_Map) opts.revStrings = new Map();
    else {
        opts.revStrings = {};
        opts.revStrings.foo = [];
        delete opts.revStrings.foo;
    }
    var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    var ct = new_ct();
    fix_write_opts(opts = opts || {});
    var zip = zip_new();
    var f = "", rId = 0;
    opts.cellXfs = [];
    get_cell_style(opts.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    f = "docProps/core.xml";
    zip_add_file(zip, f, write_core_props(wb.Props, opts));
    ct.coreprops.push(f);
    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    /*::if(!wb.Props) throw "unreachable"; */ f = "docProps/app.xml";
    if (wb.Props && wb.Props.SheetNames) ;
    else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    else {
        var _sn = [];
        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
        wb.Props.SheetNames = _sn;
    }
    wb.Props.Worksheets = wb.Props.SheetNames.length;
    zip_add_file(zip, f, write_ext_props(wb.Props, opts));
    ct.extprops.push(f);
    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
        f = "docProps/custom.xml";
        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
        ct.custprops.push(f);
        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    }
    for(rId = 1; rId <= wb.SheetNames.length; ++rId){
        var wsrels = {
            "!id": {}
        };
        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
        var _type = (ws || {})["!type"] || "sheet";
        _type;
        f = "xl/worksheets/sheet" + rId + "." + wbext;
        zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));
        ct.sheets.push(f);
        add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
        if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
                ct.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
            }
            if (ws["!legacy"]) {
                if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
        }
        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    }
    if (opts.Strings != null && opts.Strings.length > 0) {
        f = "xl/sharedStrings." + wbext;
        zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
        ct.strs.push(f);
        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    }
    f = "xl/workbook." + wbext;
    zip_add_file(zip, f, write_wb(wb, f, opts));
    ct.workbooks.push(f);
    add_rels(opts.rels, 1, f, RELS.WB);
    /* TODO: something more intelligent with themes */ f = "xl/theme/theme1.xml";
    zip_add_file(zip, f, write_theme(wb.Themes, opts));
    ct.themes.push(f);
    add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    /* TODO: something more intelligent with styles */ f = "xl/styles." + wbext;
    zip_add_file(zip, f, write_sty(wb, f, opts));
    ct.styles.push(f);
    add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
    if (wb.vbaraw && vbafmt) {
        f = "xl/vbaProject.bin";
        zip_add_file(zip, f, wb.vbaraw);
        ct.vba.push(f);
        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    }
    f = "xl/metadata." + wbext;
    zip_add_file(zip, f, write_xlmeta(f));
    ct.metadata.push(f);
    add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
    zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
    zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
    delete opts.revssf;
    delete opts.ssf;
    return zip;
}
function write_zip_xlsx(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    _shapeid = 1024;
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
    }
    opts.rels = {};
    opts.wbrels = {};
    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    opts.Strings.Count = 0;
    opts.Strings.Unique = 0;
    if (browser_has_Map) opts.revStrings = new Map();
    else {
        opts.revStrings = {};
        opts.revStrings.foo = [];
        delete opts.revStrings.foo;
    }
    var wbext = "xml";
    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    var ct = new_ct();
    fix_write_opts(opts = opts || {});
    var zip = zip_new();
    var f = "", rId = 0;
    opts.cellXfs = [];
    get_cell_style(opts.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    f = "docProps/core.xml";
    zip_add_file(zip, f, write_core_props(wb.Props, opts));
    ct.coreprops.push(f);
    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    /*::if(!wb.Props) throw "unreachable"; */ f = "docProps/app.xml";
    if (wb.Props && wb.Props.SheetNames) ;
    else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    else {
        var _sn = [];
        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
        wb.Props.SheetNames = _sn;
    }
    wb.Props.Worksheets = wb.Props.SheetNames.length;
    zip_add_file(zip, f, write_ext_props(wb.Props, opts));
    ct.extprops.push(f);
    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
        f = "docProps/custom.xml";
        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
        ct.custprops.push(f);
        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    }
    var people = [
        "SheetJ5"
    ];
    opts.tcid = 0;
    for(rId = 1; rId <= wb.SheetNames.length; ++rId){
        var wsrels = {
            "!id": {}
        };
        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
        var _type = (ws || {})["!type"] || "sheet";
        _type;
        f = "xl/worksheets/sheet" + rId + "." + wbext;
        zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));
        ct.sheets.push(f);
        add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
        if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
                var needtc = false;
                comments.forEach(function(carr) {
                    carr[1].forEach(function(c) {
                        if (c.T == true) needtc = true;
                    });
                });
                if (needtc) {
                    cf = "xl/threadedComments/threadedComment" + rId + "." + wbext;
                    zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                    ct.threadedcomments.push(cf);
                    add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + "." + wbext, RELS.TCMNT);
                }
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_comments_xml(comments, opts));
                ct.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
            }
            if (ws["!legacy"]) {
                if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
        }
        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    }
    if (opts.Strings != null && opts.Strings.length > 0) {
        f = "xl/sharedStrings." + wbext;
        zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));
        ct.strs.push(f);
        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    }
    f = "xl/workbook." + wbext;
    zip_add_file(zip, f, write_wb_xml(wb, opts));
    ct.workbooks.push(f);
    add_rels(opts.rels, 1, f, RELS.WB);
    /* TODO: something more intelligent with themes */ f = "xl/theme/theme1.xml";
    zip_add_file(zip, f, write_theme(wb.Themes, opts));
    ct.themes.push(f);
    add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    /* TODO: something more intelligent with styles */ f = "xl/styles." + wbext;
    zip_add_file(zip, f, write_sty_xml(wb, opts));
    ct.styles.push(f);
    add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
    if (wb.vbaraw && vbafmt) {
        f = "xl/vbaProject.bin";
        zip_add_file(zip, f, wb.vbaraw);
        ct.vba.push(f);
        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    }
    f = "xl/metadata." + wbext;
    zip_add_file(zip, f, write_xlmeta_xml());
    ct.metadata.push(f);
    add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
    if (people.length > 1) {
        f = "xl/persons/person.xml";
        zip_add_file(zip, f, write_people_xml(people, opts));
        ct.people.push(f);
        add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
    }
    zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
    zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
    delete opts.revssf;
    delete opts.ssf;
    return zip;
}
function firstbyte(f /*:RawData*/ , o /*:?TypeOpts*/ ) /*:Array<number>*/ {
    var x = "";
    switch((o || {}).type || "base64"){
        case "buffer":
            return [
                f[0],
                f[1],
                f[2],
                f[3],
                f[4],
                f[5],
                f[6],
                f[7]
            ];
        case "base64":
            x = Base64_decode(f.slice(0, 12));
            break;
        case "binary":
            x = f;
            break;
        case "array":
            return [
                f[0],
                f[1],
                f[2],
                f[3],
                f[4],
                f[5],
                f[6],
                f[7]
            ];
        default:
            throw new Error("Unrecognized type " + (o && o.type || "undefined"));
    }
    return [
        x.charCodeAt(0),
        x.charCodeAt(1),
        x.charCodeAt(2),
        x.charCodeAt(3),
        x.charCodeAt(4),
        x.charCodeAt(5),
        x.charCodeAt(6),
        x.charCodeAt(7)
    ];
}
function read_cfb(cfb /*:CFBContainer*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
    return parse_xlscfb(cfb, opts);
}
function read_zip(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var zip, d = data;
    var o = opts || {};
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    zip = zip_read(d, o);
    return parse_zip(zip, o);
}
function read_plaintext(data /*:string*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var i = 0;
    main: while(i < data.length)switch(data.charCodeAt(i)){
        case 0x0A:
        case 0x0D:
        case 0x20:
            ++i;
            break;
        case 0x3C:
            return parse_xlml(data.slice(i), o);
        default:
            break main;
    }
    return PRN.to_workbook(data, o);
}
function read_plaintext_raw(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var str = "", bytes = firstbyte(data, o);
    switch(o.type){
        case "base64":
            str = Base64_decode(data);
            break;
        case "binary":
            str = data;
            break;
        case "buffer":
            str = data.toString("binary");
            break;
        case "array":
            str = cc2str(data);
            break;
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
    o.type = "binary";
    return read_plaintext(str, o);
}
function read_utf16(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var d = data;
    if (o.type == "base64") d = Base64_decode(d);
    d = $cptable.utils.decode(1200, d.slice(2), "str");
    o.type = "binary";
    return read_plaintext(d, o);
}
function bstrify(data /*:string*/ ) /*:string*/ {
    return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
}
function read_prn(data, d, o, str) {
    if (str) {
        o.type = "string";
        return PRN.to_workbook(data, o);
    }
    return PRN.to_workbook(d, o);
}
function readSync(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    reset_cp();
    var o = opts || {};
    if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
    if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
    var d = data, n = [
        0,
        0,
        0,
        0
    ], str = false;
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    _ssfopts = {};
    if (o.dateNF) _ssfopts.dateNF = o.dateNF;
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    if (o.type == "file") {
        o.type = has_buf ? "buffer" : "binary";
        d = read_binary(data);
        if (typeof Uint8Array !== "undefined" && !has_buf) o.type = "array";
    }
    if (o.type == "string") {
        str = true;
        o.type = "binary";
        o.codepage = 65001;
        d = bstrify(data);
    }
    if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
        // $FlowIgnore
        var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
        vu.foo = "bar";
        // $FlowIgnore
        if (!vu.foo) {
            o = dup(o);
            o.type = "array";
            return readSync(ab2a(d), o);
        }
    }
    switch((n = firstbyte(d, o))[0]){
        case 0xD0:
            if (n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o);
            break;
        case 0x09:
            if (n[1] <= 0x08) return parse_xlscfb(d, o);
            break;
        case 0x3C:
            return parse_xlml(d, o);
        case 0x49:
            if (n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error("TIFF Image File is not a spreadsheet");
            if (n[1] === 0x44) return read_wb_ID(d, o);
            break;
        case 0x54:
            if (n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o);
            break;
        case 0x50:
            return n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09 ? read_zip(d, o) : read_prn(data, d, o, str);
        case 0xEF:
            return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
        case 0xFF:
            if (n[1] === 0xFE) return read_utf16(d, o);
            else if (n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
            break;
        case 0x00:
            if (n[1] === 0x00) {
                if (n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
                if (n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);
            }
            break;
        case 0x03:
        case 0x83:
        case 0x8B:
        case 0x8C:
            return DBF.to_workbook(d, o);
        case 0x7B:
            if (n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o);
            break;
        case 0x0A:
        case 0x0D:
        case 0x20:
            return read_plaintext_raw(d, o);
        case 0x89:
            if (n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error("PNG Image File is not a spreadsheet");
            break;
    }
    if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
    return read_prn(data, d, o, str);
}
function readFileSync(filename /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var o = opts || {};
    o.type = "file";
    return readSync(filename, o);
}
function write_cfb_ctr(cfb /*:CFBContainer*/ , o /*:WriteOpts*/ ) /*:any*/ {
    switch(o.type){
        case "base64":
        case "binary":
            break;
        case "buffer":
        case "array":
            o.type = "";
            break;
        case "file":
            return write_dl(o.file, CFB.write(cfb, {
                type: has_buf ? "buffer" : ""
            }));
        case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    return CFB.write(cfb, o);
}
/*:: declare var encrypt_agile:any; */ function write_zip_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = dup(opts || {});
    var z = write_zip(wb, o);
    return write_zip_denouement(z, o);
}
function write_zip_typeXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = dup(opts || {});
    var z = write_zip_xlsx(wb, o);
    return write_zip_denouement(z, o);
}
function write_zip_denouement(z /*:any*/ , o /*:?WriteOpts*/ ) /*:any*/ {
    var oopts = {};
    var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
    if (o.compression) oopts.compression = "DEFLATE";
    if (o.password) oopts.type = ftype;
    else switch(o.type){
        case "base64":
            oopts.type = "base64";
            break;
        case "binary":
            oopts.type = "string";
            break;
        case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
        case "buffer":
        case "file":
            oopts.type = ftype;
            break;
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    var out = z.FullPaths ? CFB.write(z, {
        fileType: "zip",
        type: /*::(*/ {
            "nodebuffer": "buffer",
            "string": "binary"
        } /*:: :any)*/ [oopts.type] || oopts.type,
        compression: !!o.compression
    }) : z.generate(oopts);
    if (typeof Deno !== "undefined") {
        if (typeof out == "string") {
            if (o.type == "binary" || o.type == "base64") return out;
            out = new Uint8Array(s2ab(out));
        }
    }
    /*jshint -W083 */ if (o.password && typeof encrypt_agile !== "undefined") return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef
    /*jshint +W083 */ if (o.type === "file") return write_dl(o.file, out);
    return o.type == "string" ? utf8read(/*::(*/ out /*:: :any)*/ ) : out;
}
function write_cfb_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = opts || {};
    var cfb /*:CFBContainer*/  = write_xlscfb(wb, o);
    return write_cfb_ctr(cfb, o);
}
function write_string_type(out /*:string*/ , opts /*:WriteOpts*/ , bom /*:?string*/ ) /*:any*/ {
    if (!bom) bom = "";
    var o = bom + out;
    switch(opts.type){
        case "base64":
            return Base64_encode(utf8write(o));
        case "binary":
            return utf8write(o);
        case "string":
            return out;
        case "file":
            return write_dl(opts.file, o, "utf8");
        case "buffer":
            if (has_buf) return Buffer_from(o, "utf8");
            else if (typeof TextEncoder !== "undefined") return new TextEncoder().encode(o);
            else return write_string_type(o, {
                type: "binary"
            }).split("").map(function(c) {
                return c.charCodeAt(0);
            });
    }
    throw new Error("Unrecognized type " + opts.type);
}
function write_stxt_type(out /*:string*/ , opts /*:WriteOpts*/ ) /*:any*/ {
    switch(opts.type){
        case "base64":
            return Base64_encode(out);
        case "binary":
            return out;
        case "string":
            return out; /* override in sheet_to_txt */ 
        case "file":
            return write_dl(opts.file, out, "binary");
        case "buffer":
            if (has_buf) return Buffer_from(out, "binary");
            else return out.split("").map(function(c) {
                return c.charCodeAt(0);
            });
    }
    throw new Error("Unrecognized type " + opts.type);
}
/* TODO: test consistency */ function write_binary_type(out, opts /*:WriteOpts*/ ) /*:any*/ {
    switch(opts.type){
        case "string":
        case "base64":
        case "binary":
            var bstr = "";
            // $FlowIgnore
            for(var i = 0; i < out.length; ++i)bstr += String.fromCharCode(out[i]);
            return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
        case "file":
            return write_dl(opts.file, out);
        case "buffer":
            return out;
        default:
            throw new Error("Unrecognized type " + opts.type);
    }
}
function writeSyncXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {
    reset_cp();
    check_wb(wb);
    var o = dup(opts || {});
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    if (o.type == "array") {
        o.type = "binary";
        var out /*:string*/  = writeSyncXLSX(wb, o);
        o.type = "array";
        return s2ab(out);
    }
    return write_zip_typeXLSX(wb, o);
}
function writeSync(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {
    reset_cp();
    check_wb(wb);
    var o = dup(opts || {});
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    if (o.type == "array") {
        o.type = "binary";
        var out /*:string*/  = writeSync(wb, o);
        o.type = "array";
        return s2ab(out);
    }
    var idx = 0;
    if (o.sheet) {
        if (typeof o.sheet == "number") idx = o.sheet;
        else idx = wb.SheetNames.indexOf(o.sheet);
        if (!wb.SheetNames[idx]) throw new Error("Sheet not found: " + o.sheet + " : " + typeof o.sheet);
    }
    switch(o.bookType || "xlsb"){
        case "xml":
        case "xlml":
            return write_string_type(write_xlml(wb, o), o);
        case "slk":
        case "sylk":
            return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "htm":
        case "html":
            return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "txt":
            return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "csv":
            return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, "\uFEFF");
        case "dif":
            return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "dbf":
            return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "prn":
            return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "rtf":
            return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "eth":
            return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "fods":
            return write_string_type(write_ods(wb, o), o);
        case "wk1":
            return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "wk3":
            return write_binary_type(WK_.book_to_wk3(wb, o), o);
        case "biff2":
            if (!o.biff) o.biff = 2; /* falls through */ 
        case "biff3":
            if (!o.biff) o.biff = 3; /* falls through */ 
        case "biff4":
            if (!o.biff) o.biff = 4;
            return write_binary_type(write_biff_buf(wb, o), o);
        case "biff5":
            if (!o.biff) o.biff = 5; /* falls through */ 
        case "biff8":
        case "xla":
        case "xls":
            if (!o.biff) o.biff = 8;
            return write_cfb_type(wb, o);
        case "xlsx":
        case "xlsm":
        case "xlam":
        case "xlsb":
        case "numbers":
        case "ods":
            return write_zip_type(wb, o);
        default:
            throw new Error("Unrecognized bookType |" + o.bookType + "|");
    }
}
function resolve_book_type(o /*:WriteFileOpts*/ ) {
    if (o.bookType) return;
    var _BT = {
        "xls": "biff8",
        "htm": "html",
        "slk": "sylk",
        "socialcalc": "eth",
        "Sh33tJS": "WTF"
    };
    var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
    if (ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
    o.bookType = _BT[o.bookType] || o.bookType;
}
function writeFileSync(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    return writeSync(wb, o);
}
function writeFileSyncXLSX(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    return writeSyncXLSX(wb, o);
}
function writeFileAsync(filename /*:string*/ , wb /*:Workbook*/ , opts /*:?WriteFileOpts*/ , cb /*:?(e?:ErrnoError)=>void*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    o.type = "buffer";
    var _cb = cb;
    if (!(_cb instanceof Function)) _cb = opts /*:any*/ ;
    return _fs.writeFile(filename, writeSync(wb, o), _cb);
}
/*::
type MJRObject = {
	row: any;
	isempty: boolean;
};
*/ function make_json_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , header /*:number*/ , hdr /*:Array<any>*/ , dense /*:boolean*/ , o /*:Sheet2JSONOpts*/ ) /*:MJRObject*/ {
    var rr = encode_row(R);
    var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
    var isempty = true;
    var row /*:any*/  = header === 1 ? [] : {};
    if (header !== 1) {
        if (Object.defineProperty) try {
            Object.defineProperty(row, "__rowNum__", {
                value: R,
                enumerable: false
            });
        } catch (e) {
            row.__rowNum__ = R;
        }
        else row.__rowNum__ = R;
    }
    if (!dense || sheet[R]) for(var C = r.s.c; C <= r.e.c; ++C){
        var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        if (val === undefined || val.t === undefined) {
            if (defval === undefined) continue;
            if (hdr[C] != null) row[hdr[C]] = defval;
            continue;
        }
        var v = val.v;
        switch(val.t){
            case "z":
                if (v == null) break;
                continue;
            case "e":
                v = v == 0 ? null : void 0;
                break;
            case "s":
            case "d":
            case "b":
            case "n":
                break;
            default:
                throw new Error("unrecognized type " + val.t);
        }
        if (hdr[C] != null) {
            if (v == null) {
                if (val.t == "e" && v === null) row[hdr[C]] = null;
                else if (defval !== undefined) row[hdr[C]] = defval;
                else if (raw && v === null) row[hdr[C]] = null;
                else continue;
            } else row[hdr[C]] = raw && (val.t !== "n" || val.t === "n" && o.rawNumbers !== false) ? v : format_cell(val, v, o);
            if (v != null) isempty = false;
        }
    }
    return {
        row: row,
        isempty: isempty
    };
}
function sheet_to_json(sheet /*:Worksheet*/ , opts /*:?Sheet2JSONOpts*/ ) {
    if (sheet == null || sheet["!ref"] == null) return [];
    var val = {
        t: "n",
        v: 0
    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = "";
    var r = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var o = opts || {};
    var range = o.range != null ? o.range : sheet["!ref"];
    if (o.header === 1) header = 1;
    else if (o.header === "A") header = 2;
    else if (Array.isArray(o.header)) header = 3;
    else if (o.header == null) header = 0;
    switch(typeof range){
        case "string":
            r = safe_decode_range(range);
            break;
        case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
        default:
            r = range;
    }
    if (header > 0) offset = 0;
    var rr = encode_row(r.s.r);
    var cols /*:Array<string>*/  = [];
    var out /*:Array<any>*/  = [];
    var outi = 0, counter = 0;
    var dense = Array.isArray(sheet);
    var R = r.s.r, C = 0;
    var header_cnt = {};
    if (dense && !sheet[R]) sheet[R] = [];
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(C = r.s.c; C <= r.e.c; ++C){
        if ((colinfo[C] || {}).hidden) continue;
        cols[C] = encode_col(C);
        val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        switch(header){
            case 1:
                hdr[C] = C - r.s.c;
                break;
            case 2:
                hdr[C] = cols[C];
                break;
            case 3:
                hdr[C] = o.header[C - r.s.c];
                break;
            default:
                if (val == null) val = {
                    w: "__EMPTY",
                    t: "s"
                };
                vv = v = format_cell(val, null, o);
                counter = header_cnt[v] || 0;
                if (!counter) header_cnt[v] = 1;
                else {
                    do vv = v + "_" + counter++;
                    while (header_cnt[vv]);
                    header_cnt[v] = counter;
                    header_cnt[vv] = 1;
                }
                hdr[C] = vv;
        }
    }
    for(R = r.s.r + offset; R <= r.e.r; ++R){
        if ((rowinfo[R] || {}).hidden) continue;
        var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
        if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
    }
    out.length = outi;
    return out;
}
var qreg = /"/g;
function make_csv_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , fs /*:number*/ , rs /*:number*/ , FS /*:string*/ , o /*:Sheet2CSVOpts*/ ) /*:?string*/ {
    var isempty = true;
    var row /*:Array<string>*/  = [], txt = "", rr = encode_row(R);
    for(var C = r.s.c; C <= r.e.c; ++C){
        if (!cols[C]) continue;
        var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
        if (val == null) txt = "";
        else if (val.v != null) {
            isempty = false;
            txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
            for(var i = 0, cc = 0; i !== txt.length; ++i)if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
                txt = '"' + txt.replace(qreg, '""') + '"';
                break;
            }
            if (txt == "ID") txt = '"ID"';
        } else if (val.f != null && !val.F) {
            isempty = false;
            txt = "=" + val.f;
            if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
        } else txt = "";
        /* NOTE: Excel CSV does not support array formulae */ row.push(txt);
    }
    if (o.blankrows === false && isempty) return null;
    return row.join(FS);
}
function sheet_to_csv(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [];
    var o = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null) return "";
    var r = safe_decode_range(sheet["!ref"]);
    var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row = "", cols /*:Array<string>*/  = [];
    o.dense = Array.isArray(sheet);
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
    var w = 0;
    for(var R = r.s.r; R <= r.e.r; ++R){
        if ((rowinfo[R] || {}).hidden) continue;
        row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
        if (row == null) continue;
        if (o.strip) row = row.replace(endregex, "");
        if (row || o.blankrows !== false) out.push((w++ ? RS : "") + row);
    }
    delete o.dense;
    return out.join("");
}
function sheet_to_txt(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    if (!opts) opts = {};
    opts.FS = "	";
    opts.RS = "\n";
    var s = sheet_to_csv(sheet, opts);
    if (typeof $cptable == "undefined" || opts.type == "string") return s;
    var o = $cptable.utils.encode(1200, s, "str");
    return String.fromCharCode(255) + String.fromCharCode(254) + o;
}
function sheet_to_formulae(sheet /*:Worksheet*/ ) /*:Array<string>*/ {
    var y = "", x, val = "";
    if (sheet == null || sheet["!ref"] == null) return [];
    var r = safe_decode_range(sheet["!ref"]), rr = "", cols /*:Array<string>*/  = [], C;
    var cmds /*:Array<string>*/  = [];
    var dense = Array.isArray(sheet);
    for(C = r.s.c; C <= r.e.c; ++C)cols[C] = encode_col(C);
    for(var R = r.s.r; R <= r.e.r; ++R){
        rr = encode_row(R);
        for(C = r.s.c; C <= r.e.c; ++C){
            y = cols[C] + rr;
            x = dense ? (sheet[R] || [])[C] : sheet[y];
            val = "";
            if (x === undefined) continue;
            else if (x.F != null) {
                y = x.F;
                if (!x.f) continue;
                val = x.f;
                if (y.indexOf(":") == -1) y = y + ":" + y;
            }
            if (x.f != null) val = x.f;
            else if (x.t == "z") continue;
            else if (x.t == "n" && x.v != null) val = "" + x.v;
            else if (x.t == "b") val = x.v ? "TRUE" : "FALSE";
            else if (x.w !== undefined) val = "'" + x.w;
            else if (x.v === undefined) continue;
            else if (x.t == "s") val = "'" + x.v;
            else val = "" + x.v;
            cmds[cmds.length] = y + "=" + val;
        }
    }
    return cmds;
}
function sheet_add_json(_ws /*:?Worksheet*/ , js /*:Array<any>*/ , opts) /*:Worksheet*/ {
    var o = opts || {};
    var offset = +!o.skipHeader;
    var ws /*:Worksheet*/  = _ws || {} /*:any*/ ;
    var _R = 0, _C = 0;
    if (ws && o.origin != null) {
        if (typeof o.origin == "number") _R = o.origin;
        else {
            var _origin /*:CellAddress*/  = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
        }
    }
    var cell /*:Cell*/ ;
    var range /*:Range*/  = {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: _C,
            r: _R + js.length - 1 + offset
        }
    } /*:any*/ ;
    if (ws["!ref"]) {
        var _range = safe_decode_range(ws["!ref"]);
        range.e.c = Math.max(range.e.c, _range.e.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        if (_R == -1) {
            _R = _range.e.r + 1;
            range.e.r = _R + js.length - 1 + offset;
        }
    } else if (_R == -1) {
        _R = 0;
        range.e.r = js.length - 1 + offset;
    }
    var hdr /*:Array<string>*/  = o.header || [], C = 0;
    js.forEach(function(JS, R /*:number*/ ) {
        keys(JS).forEach(function(k) {
            if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;
            var v = JS[k];
            var t = "z";
            var z = "";
            var ref = encode_cell({
                c: _C + C,
                r: _R + R + offset
            });
            cell = ws_get_cell_stub(ws, ref);
            if (v && typeof v === "object" && !(v instanceof Date)) ws[ref] = v;
            else {
                if (typeof v == "number") t = "n";
                else if (typeof v == "boolean") t = "b";
                else if (typeof v == "string") t = "s";
                else if (v instanceof Date) {
                    t = "d";
                    if (!o.cellDates) {
                        t = "n";
                        v = datenum(v);
                    }
                    z = o.dateNF || table_fmt[14];
                } else if (v === null && o.nullError) {
                    t = "e";
                    v = 0;
                }
                if (!cell) ws[ref] = cell = {
                    t: t,
                    v: v
                } /*:any*/ ;
                else {
                    cell.t = t;
                    cell.v = v;
                    delete cell.w;
                    delete cell.R;
                    if (z) cell.z = z;
                }
                if (z) cell.z = z;
            }
        });
    });
    range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
    var __R = encode_row(_R);
    if (offset) for(C = 0; C < hdr.length; ++C)ws[encode_col(C + _C) + __R] = {
        t: "s",
        v: hdr[C]
    };
    ws["!ref"] = encode_range(range);
    return ws;
}
function json_to_sheet(js /*:Array<any>*/ , opts) /*:Worksheet*/ {
    return sheet_add_json(null, js, opts);
}
/* get cell, creating a stub if necessary */ function ws_get_cell_stub(ws /*:Worksheet*/ , R, C /*:?number*/ ) /*:Cell*/ {
    /* A1 cell address */ if (typeof R == "string") {
        /* dense */ if (Array.isArray(ws)) {
            var RC = decode_cell(R);
            if (!ws[RC.r]) ws[RC.r] = [];
            return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {
                t: "z"
            });
        }
        return ws[R] || (ws[R] = {
            t: "z"
        });
    }
    /* cell address object */ if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
    /* R and C are 0-based indices */ return ws_get_cell_stub(ws, encode_cell({
        r: R,
        c: C || 0
    }));
}
/* find sheet index for given name / validate index */ function wb_sheet_idx(wb /*:Workbook*/ , sh /*:number|string*/ ) {
    if (typeof sh == "number") {
        if (sh >= 0 && wb.SheetNames.length > sh) return sh;
        throw new Error("Cannot find sheet # " + sh);
    } else if (typeof sh == "string") {
        var idx = wb.SheetNames.indexOf(sh);
        if (idx > -1) return idx;
        throw new Error("Cannot find sheet name |" + sh + "|");
    } else throw new Error("Cannot find sheet |" + sh + "|");
}
/* simple blank workbook object */ function book_new() /*:Workbook*/ {
    return {
        SheetNames: [],
        Sheets: {}
    };
}
/* add a worksheet to the end of a given workbook */ function book_append_sheet(wb /*:Workbook*/ , ws /*:Worksheet*/ , name /*:?string*/ , roll /*:?boolean*/ ) /*:string*/ {
    var i = 1;
    if (!name) {
        for(; i <= 0xFFFF; ++i, name = undefined)if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
    }
    if (!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
    if (roll && wb.SheetNames.indexOf(name) >= 0) {
        var m = name.match(/(^.*?)(\d+)$/);
        i = m && +m[2] || 0;
        var root = m && m[1] || name;
        for(++i; i <= 0xFFFF; ++i)if (wb.SheetNames.indexOf(name = root + i) == -1) break;
    }
    check_ws_name(name);
    if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
    wb.SheetNames.push(name);
    wb.Sheets[name] = ws;
    return name;
}
/* set sheet visibility (visible/hidden/very hidden) */ function book_set_sheet_visibility(wb /*:Workbook*/ , sh /*:number|string*/ , vis /*:number*/ ) {
    if (!wb.Workbook) wb.Workbook = {};
    if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
    var idx = wb_sheet_idx(wb, sh);
    // $FlowIgnore
    if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
    switch(vis){
        case 0:
        case 1:
        case 2:
            break;
        default:
            throw new Error("Bad sheet visibility setting " + vis);
    }
    // $FlowIgnore
    wb.Workbook.Sheets[idx].Hidden = vis;
}
/* set number format */ function cell_set_number_format(cell /*:Cell*/ , fmt /*:string|number*/ ) {
    cell.z = fmt;
    return cell;
}
/* set cell hyperlink */ function cell_set_hyperlink(cell /*:Cell*/ , target /*:string*/ , tooltip /*:?string*/ ) {
    if (!target) delete cell.l;
    else {
        cell.l = {
            Target: target
        } /*:Hyperlink*/ ;
        if (tooltip) cell.l.Tooltip = tooltip;
    }
    return cell;
}
function cell_set_internal_link(cell /*:Cell*/ , range /*:string*/ , tooltip /*:?string*/ ) {
    return cell_set_hyperlink(cell, "#" + range, tooltip);
}
/* add to cell comments */ function cell_add_comment(cell /*:Cell*/ , text /*:string*/ , author /*:?string*/ ) {
    if (!cell.c) cell.c = [];
    cell.c.push({
        t: text,
        a: author || "SheetJS"
    });
}
/* set array formula and flush related cells */ function sheet_set_array_formula(ws /*:Worksheet*/ , range, formula /*:string*/ , dynamic /*:boolean*/ ) {
    var rng = typeof range != "string" ? range : safe_decode_range(range);
    var rngstr = typeof range == "string" ? range : encode_range(range);
    for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){
        var cell = ws_get_cell_stub(ws, R, C);
        cell.t = "n";
        cell.F = rngstr;
        delete cell.v;
        if (R == rng.s.r && C == rng.s.c) {
            cell.f = formula;
            if (dynamic) cell.D = true;
        }
    }
    return ws;
}
var utils /*:any*/  = {
    encode_col: encode_col,
    encode_row: encode_row,
    encode_cell: encode_cell,
    encode_range: encode_range,
    decode_col: decode_col,
    decode_row: decode_row,
    split_cell: split_cell,
    decode_cell: decode_cell,
    decode_range: decode_range,
    format_cell: format_cell,
    sheet_add_aoa: sheet_add_aoa,
    sheet_add_json: sheet_add_json,
    sheet_add_dom: sheet_add_dom,
    aoa_to_sheet: aoa_to_sheet,
    json_to_sheet: json_to_sheet,
    table_to_sheet: parse_dom_table,
    table_to_book: table_to_book,
    sheet_to_csv: sheet_to_csv,
    sheet_to_txt: sheet_to_txt,
    sheet_to_json: sheet_to_json,
    sheet_to_html: sheet_to_html,
    sheet_to_formulae: sheet_to_formulae,
    sheet_to_row_object_array: sheet_to_json,
    sheet_get_cell: ws_get_cell_stub,
    book_new: book_new,
    book_append_sheet: book_append_sheet,
    book_set_sheet_visibility: book_set_sheet_visibility,
    cell_set_number_format: cell_set_number_format,
    cell_set_hyperlink: cell_set_hyperlink,
    cell_set_internal_link: cell_set_internal_link,
    cell_add_comment: cell_add_comment,
    sheet_set_array_formula: sheet_set_array_formula,
    consts: {
        SHEET_VISIBLE: 0,
        SHEET_HIDDEN: 1,
        SHEET_VERY_HIDDEN: 2
    }
};
var _Readable;
function set_readable(R) {
    _Readable = R;
}
function write_csv_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    var stream = _Readable();
    var o = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
    }
    var r = safe_decode_range(sheet["!ref"]);
    var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row /*:?string*/  = "", cols /*:Array<string>*/  = [];
    o.dense = Array.isArray(sheet);
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
    var R = r.s.r;
    var BOM = false, w = 0;
    stream._read = function() {
        if (!BOM) {
            BOM = true;
            return stream.push("\uFEFF");
        }
        while(R <= r.e.r){
            ++R;
            if ((rowinfo[R - 1] || {}).hidden) continue;
            row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);
            if (row != null) {
                if (o.strip) row = row.replace(endregex, "");
                if (row || o.blankrows !== false) return stream.push((w++ ? RS : "") + row);
            }
        }
        return stream.push(null);
    };
    return stream;
}
function write_html_stream(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/ ) {
    var stream = _Readable();
    var o = opts || {};
    var header = o.header != null ? o.header : HTML_BEGIN;
    var footer = o.footer != null ? o.footer : HTML_END;
    stream.push(header);
    var r = decode_range(ws["!ref"]);
    o.dense = Array.isArray(ws);
    stream.push(make_html_preamble(ws, r, o));
    var R = r.s.r;
    var end = false;
    stream._read = function() {
        if (R > r.e.r) {
            if (!end) {
                end = true;
                stream.push("</table>" + footer);
            }
            return stream.push(null);
        }
        while(R <= r.e.r){
            stream.push(make_html_row(ws, r, R, o));
            ++R;
            break;
        }
    };
    return stream;
}
function write_json_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    var stream = _Readable({
        objectMode: true
    });
    if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
    }
    var val = {
        t: "n",
        v: 0
    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = "";
    var r = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var o = opts || {};
    var range = o.range != null ? o.range : sheet["!ref"];
    if (o.header === 1) header = 1;
    else if (o.header === "A") header = 2;
    else if (Array.isArray(o.header)) header = 3;
    switch(typeof range){
        case "string":
            r = safe_decode_range(range);
            break;
        case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
        default:
            r = range;
    }
    if (header > 0) offset = 0;
    var rr = encode_row(r.s.r);
    var cols /*:Array<string>*/  = [];
    var counter = 0;
    var dense = Array.isArray(sheet);
    var R = r.s.r, C = 0;
    var header_cnt = {};
    if (dense && !sheet[R]) sheet[R] = [];
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(C = r.s.c; C <= r.e.c; ++C){
        if ((colinfo[C] || {}).hidden) continue;
        cols[C] = encode_col(C);
        val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        switch(header){
            case 1:
                hdr[C] = C - r.s.c;
                break;
            case 2:
                hdr[C] = cols[C];
                break;
            case 3:
                hdr[C] = o.header[C - r.s.c];
                break;
            default:
                if (val == null) val = {
                    w: "__EMPTY",
                    t: "s"
                };
                vv = v = format_cell(val, null, o);
                counter = header_cnt[v] || 0;
                if (!counter) header_cnt[v] = 1;
                else {
                    do vv = v + "_" + counter++;
                    while (header_cnt[vv]);
                    header_cnt[v] = counter;
                    header_cnt[vv] = 1;
                }
                hdr[C] = vv;
        }
    }
    R = r.s.r + offset;
    stream._read = function() {
        while(R <= r.e.r){
            if ((rowinfo[R - 1] || {}).hidden) continue;
            var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
            ++R;
            if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
                stream.push(row.row);
                return;
            }
        }
        return stream.push(null);
    };
    return stream;
}
var __stream = {
    to_json: write_json_stream,
    to_html: write_html_stream,
    to_csv: write_csv_stream,
    set_readable: set_readable
};
const version = XLSX.version;

},{"f481c164bc92069e":"fA83Q","1e1b0fdaf6fdd859":"fA83Q","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fA83Q":[function(require,module,exports) {
"use strict";

},{}],"6j9In":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"hJBAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// export all components
parcelHelpers.export(exports, "Accordion", ()=>(0, _accordionDefault.default));
parcelHelpers.export(exports, "Carousel", ()=>(0, _carouselDefault.default));
parcelHelpers.export(exports, "Collapse", ()=>(0, _collapseDefault.default));
parcelHelpers.export(exports, "Dial", ()=>(0, _dialDefault.default));
parcelHelpers.export(exports, "Dismiss", ()=>(0, _dismissDefault.default));
parcelHelpers.export(exports, "Drawer", ()=>(0, _drawerDefault.default));
parcelHelpers.export(exports, "Dropdown", ()=>(0, _dropdownDefault.default));
parcelHelpers.export(exports, "Modal", ()=>(0, _modalDefault.default));
parcelHelpers.export(exports, "Popover", ()=>(0, _popoverDefault.default));
parcelHelpers.export(exports, "Tabs", ()=>(0, _tabsDefault.default));
parcelHelpers.export(exports, "Tooltip", ()=>(0, _tooltipDefault.default));
// export init functions
parcelHelpers.export(exports, "initAccordions", ()=>(0, _accordion.initAccordions));
parcelHelpers.export(exports, "initCarousels", ()=>(0, _carousel.initCarousels));
parcelHelpers.export(exports, "initCollapses", ()=>(0, _collapse.initCollapses));
parcelHelpers.export(exports, "initDials", ()=>(0, _dial.initDials));
parcelHelpers.export(exports, "initDismisses", ()=>(0, _dismiss.initDismisses));
parcelHelpers.export(exports, "initDrawers", ()=>(0, _drawer.initDrawers));
parcelHelpers.export(exports, "initDropdowns", ()=>(0, _dropdown.initDropdowns));
parcelHelpers.export(exports, "initModals", ()=>(0, _modal.initModals));
parcelHelpers.export(exports, "initPopovers", ()=>(0, _popover.initPopovers));
parcelHelpers.export(exports, "initTabs", ()=>(0, _tabs.initTabs));
parcelHelpers.export(exports, "initTooltips", ()=>(0, _tooltip.initTooltips));
// export all init functions
parcelHelpers.export(exports, "initFlowbite", ()=>(0, _index.initFlowbite));
var _events = require("./dom/events");
var _eventsDefault = parcelHelpers.interopDefault(_events);
var _accordion = require("./components/accordion");
var _collapse = require("./components/collapse");
var _carousel = require("./components/carousel");
var _dismiss = require("./components/dismiss");
var _dropdown = require("./components/dropdown");
var _modal = require("./components/modal");
var _drawer = require("./components/drawer");
var _tabs = require("./components/tabs");
var _tooltip = require("./components/tooltip");
var _popover = require("./components/popover");
var _dial = require("./components/dial");
var _index = require("./components/index");
var _accordionDefault = parcelHelpers.interopDefault(_accordion);
var _carouselDefault = parcelHelpers.interopDefault(_carousel);
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _dialDefault = parcelHelpers.interopDefault(_dial);
var _dismissDefault = parcelHelpers.interopDefault(_dismiss);
var _drawerDefault = parcelHelpers.interopDefault(_drawer);
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
// export all types
var _types = require("./components/accordion/types");
parcelHelpers.exportAll(_types, exports);
var _types1 = require("./components/carousel/types");
parcelHelpers.exportAll(_types1, exports);
var _types2 = require("./components/collapse/types");
parcelHelpers.exportAll(_types2, exports);
var _types3 = require("./components/dial/types");
parcelHelpers.exportAll(_types3, exports);
var _types4 = require("./components/dismiss/types");
parcelHelpers.exportAll(_types4, exports);
var _types5 = require("./components/drawer/types");
parcelHelpers.exportAll(_types5, exports);
var _types6 = require("./components/dropdown/types");
parcelHelpers.exportAll(_types6, exports);
var _types7 = require("./components/modal/types");
parcelHelpers.exportAll(_types7, exports);
var _types8 = require("./components/popover/types");
parcelHelpers.exportAll(_types8, exports);
var _types9 = require("./components/tabs/types");
parcelHelpers.exportAll(_types9, exports);
var _types10 = require("./components/tooltip/types");
parcelHelpers.exportAll(_types10, exports);
// export all interfaces
var _interface = require("./components/accordion/interface");
parcelHelpers.exportAll(_interface, exports);
var _interface1 = require("./components/carousel/interface");
parcelHelpers.exportAll(_interface1, exports);
var _interface2 = require("./components/collapse/interface");
parcelHelpers.exportAll(_interface2, exports);
var _interface3 = require("./components/dial/interface");
parcelHelpers.exportAll(_interface3, exports);
var _interface4 = require("./components/dismiss/interface");
parcelHelpers.exportAll(_interface4, exports);
var _interface5 = require("./components/drawer/interface");
parcelHelpers.exportAll(_interface5, exports);
var _interface6 = require("./components/dropdown/interface");
parcelHelpers.exportAll(_interface6, exports);
var _interface7 = require("./components/modal/interface");
parcelHelpers.exportAll(_interface7, exports);
var _interface8 = require("./components/popover/interface");
parcelHelpers.exportAll(_interface8, exports);
var _interface9 = require("./components/tabs/interface");
parcelHelpers.exportAll(_interface9, exports);
var _interface10 = require("./components/tooltip/interface");
parcelHelpers.exportAll(_interface10, exports);
// setup events for data attributes
var events = new (0, _eventsDefault.default)("load", [
    (0, _accordion.initAccordions),
    (0, _collapse.initCollapses),
    (0, _carousel.initCarousels),
    (0, _dismiss.initDismisses),
    (0, _dropdown.initDropdowns),
    (0, _modal.initModals),
    (0, _drawer.initDrawers),
    (0, _tabs.initTabs),
    (0, _tooltip.initTooltips),
    (0, _popover.initPopovers),
    (0, _dial.initDials)
]);
events.init();

},{"./dom/events":"58xoM","./components/accordion":"2CNqL","./components/collapse":"3vSzG","./components/carousel":"fy26w","./components/dismiss":"jALxc","./components/dropdown":"9nap2","./components/modal":"dIXxU","./components/drawer":"8JgkV","./components/tabs":"9Np50","./components/tooltip":"jybLi","./components/popover":"aSpDZ","./components/dial":"jqHMi","./components/index":"e1lN4","./components/accordion/types":"koEtZ","./components/carousel/types":"2UDke","./components/collapse/types":"anZXp","./components/dial/types":"1Y2V0","./components/dismiss/types":"fbrre","./components/drawer/types":"dOpdB","./components/dropdown/types":"1V8Q8","./components/modal/types":"jFLqe","./components/popover/types":"fII6Y","./components/tabs/types":"gEGdY","./components/tooltip/types":"QSYSF","./components/accordion/interface":"feNq0","./components/carousel/interface":"krxyc","./components/collapse/interface":"cV931","./components/dial/interface":"769mY","./components/dismiss/interface":"h6sQP","./components/drawer/interface":"dMiO9","./components/dropdown/interface":"PvLWe","./components/modal/interface":"dJHmb","./components/popover/interface":"ct0jX","./components/tabs/interface":"44PA7","./components/tooltip/interface":"k1yJX","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"58xoM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Events = /** @class */ function() {
    function Events(eventType, eventFunctions) {
        if (eventFunctions === void 0) eventFunctions = [];
        this._eventType = eventType;
        this._eventFunctions = eventFunctions;
    }
    Events.prototype.init = function() {
        var _this = this;
        this._eventFunctions.forEach(function(eventFunction) {
            if (typeof window !== "undefined") window.addEventListener(_this._eventType, eventFunction);
        });
    };
    return Events;
}();
exports.default = Events;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2CNqL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initAccordions", ()=>initAccordions);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    alwaysOpen: false,
    activeClasses: "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white",
    inactiveClasses: "text-gray-500 dark:text-gray-400",
    onOpen: function() {},
    onClose: function() {},
    onToggle: function() {}
};
var Accordion = /** @class */ function() {
    function Accordion(items, options) {
        if (items === void 0) items = [];
        if (options === void 0) options = Default;
        this._items = items;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Accordion.prototype._init = function() {
        var _this = this;
        if (this._items.length) // show accordion item based on click
        this._items.map(function(item) {
            if (item.active) _this.open(item.id);
            item.triggerEl.addEventListener("click", function() {
                _this.toggle(item.id);
            });
        });
    };
    Accordion.prototype.getItem = function(id) {
        return this._items.filter(function(item) {
            return item.id === id;
        })[0];
    };
    Accordion.prototype.open = function(id) {
        var _a, _b;
        var _this = this;
        var item = this.getItem(id);
        // don't hide other accordions if always open
        if (!this._options.alwaysOpen) this._items.map(function(i) {
            var _a, _b;
            if (i !== item) {
                (_a = i.triggerEl.classList).remove.apply(_a, _this._options.activeClasses.split(" "));
                (_b = i.triggerEl.classList).add.apply(_b, _this._options.inactiveClasses.split(" "));
                i.targetEl.classList.add("hidden");
                i.triggerEl.setAttribute("aria-expanded", "false");
                i.active = false;
                // rotate icon if set
                if (i.iconEl) i.iconEl.classList.remove("rotate-180");
            }
        });
        // show active item
        (_a = item.triggerEl.classList).add.apply(_a, this._options.activeClasses.split(" "));
        (_b = item.triggerEl.classList).remove.apply(_b, this._options.inactiveClasses.split(" "));
        item.triggerEl.setAttribute("aria-expanded", "true");
        item.targetEl.classList.remove("hidden");
        item.active = true;
        // rotate icon if set
        if (item.iconEl) item.iconEl.classList.add("rotate-180");
        // callback function
        this._options.onOpen(this, item);
    };
    Accordion.prototype.toggle = function(id) {
        var item = this.getItem(id);
        if (item.active) this.close(id);
        else this.open(id);
        // callback function
        this._options.onToggle(this, item);
    };
    Accordion.prototype.close = function(id) {
        var _a, _b;
        var item = this.getItem(id);
        (_a = item.triggerEl.classList).remove.apply(_a, this._options.activeClasses.split(" "));
        (_b = item.triggerEl.classList).add.apply(_b, this._options.inactiveClasses.split(" "));
        item.targetEl.classList.add("hidden");
        item.triggerEl.setAttribute("aria-expanded", "false");
        item.active = false;
        // rotate icon if set
        if (item.iconEl) item.iconEl.classList.remove("rotate-180");
        // callback function
        this._options.onClose(this, item);
    };
    return Accordion;
}();
function initAccordions() {
    document.querySelectorAll("[data-accordion]").forEach(function($accordionEl) {
        var alwaysOpen = $accordionEl.getAttribute("data-accordion");
        var activeClasses = $accordionEl.getAttribute("data-active-classes");
        var inactiveClasses = $accordionEl.getAttribute("data-inactive-classes");
        var items = [];
        $accordionEl.querySelectorAll("[data-accordion-target]").forEach(function($triggerEl) {
            // Consider only items that directly belong to $accordionEl
            // (to make nested accordions work).
            if ($triggerEl.closest("[data-accordion]") === $accordionEl) {
                var item = {
                    id: $triggerEl.getAttribute("data-accordion-target"),
                    triggerEl: $triggerEl,
                    targetEl: document.querySelector($triggerEl.getAttribute("data-accordion-target")),
                    iconEl: $triggerEl.querySelector("[data-accordion-icon]"),
                    active: $triggerEl.getAttribute("aria-expanded") === "true" ? true : false
                };
                items.push(item);
            }
        });
        new Accordion(items, {
            alwaysOpen: alwaysOpen === "open" ? true : false,
            activeClasses: activeClasses ? activeClasses : Default.activeClasses,
            inactiveClasses: inactiveClasses ? inactiveClasses : Default.inactiveClasses
        });
    });
}
if (typeof window !== "undefined") {
    window.Accordion = Accordion;
    window.initAccordions = initAccordions;
}
exports.default = Accordion;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3vSzG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initCollapses", ()=>initCollapses);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    onCollapse: function() {},
    onExpand: function() {},
    onToggle: function() {}
};
var Collapse = /** @class */ function() {
    function Collapse(targetEl, triggerEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (triggerEl === void 0) triggerEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Collapse.prototype._init = function() {
        var _this = this;
        if (this._triggerEl) {
            if (this._triggerEl.hasAttribute("aria-expanded")) this._visible = this._triggerEl.getAttribute("aria-expanded") === "true";
            else // fix until v2 not to break previous single collapses which became dismiss
            this._visible = !this._targetEl.classList.contains("hidden");
            this._triggerEl.addEventListener("click", function() {
                _this.toggle();
            });
        }
    };
    Collapse.prototype.collapse = function() {
        this._targetEl.classList.add("hidden");
        if (this._triggerEl) this._triggerEl.setAttribute("aria-expanded", "false");
        this._visible = false;
        // callback function
        this._options.onCollapse(this);
    };
    Collapse.prototype.expand = function() {
        this._targetEl.classList.remove("hidden");
        if (this._triggerEl) this._triggerEl.setAttribute("aria-expanded", "true");
        this._visible = true;
        // callback function
        this._options.onExpand(this);
    };
    Collapse.prototype.toggle = function() {
        if (this._visible) this.collapse();
        else this.expand();
        // callback function
        this._options.onToggle(this);
    };
    return Collapse;
}();
function initCollapses() {
    document.querySelectorAll("[data-collapse-toggle]").forEach(function($triggerEl) {
        var targetId = $triggerEl.getAttribute("data-collapse-toggle");
        var $targetEl = document.getElementById(targetId);
        // check if the target element exists
        if ($targetEl) new Collapse($targetEl, $triggerEl);
        else console.error('The target element with id "'.concat(targetId, '" does not exist. Please check the data-collapse-toggle attribute.'));
    });
}
if (typeof window !== "undefined") {
    window.Collapse = Collapse;
    window.initCollapses = initCollapses;
}
exports.default = Collapse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fy26w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initCarousels", ()=>initCarousels);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    defaultPosition: 0,
    indicators: {
        items: [],
        activeClasses: "bg-white dark:bg-gray-800",
        inactiveClasses: "bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800"
    },
    interval: 3000,
    onNext: function() {},
    onPrev: function() {},
    onChange: function() {}
};
var Carousel = /** @class */ function() {
    function Carousel(items, options) {
        if (items === void 0) items = [];
        if (options === void 0) options = Default;
        this._items = items;
        this._options = __assign(__assign(__assign({}, Default), options), {
            indicators: __assign(__assign({}, Default.indicators), options.indicators)
        });
        this._activeItem = this.getItem(this._options.defaultPosition);
        this._indicators = this._options.indicators.items;
        this._intervalDuration = this._options.interval;
        this._intervalInstance = null;
        this._init();
    }
    /**
     * initialize carousel and items based on active one
     */ Carousel.prototype._init = function() {
        var _this = this;
        this._items.map(function(item) {
            item.el.classList.add("absolute", "inset-0", "transition-transform", "transform");
        });
        // if no active item is set then first position is default
        if (this._getActiveItem()) this.slideTo(this._getActiveItem().position);
        else this.slideTo(0);
        this._indicators.map(function(indicator, position) {
            indicator.el.addEventListener("click", function() {
                _this.slideTo(position);
            });
        });
    };
    Carousel.prototype.getItem = function(position) {
        return this._items[position];
    };
    /**
     * Slide to the element based on id
     * @param {*} position
     */ Carousel.prototype.slideTo = function(position) {
        var nextItem = this._items[position];
        var rotationItems = {
            left: nextItem.position === 0 ? this._items[this._items.length - 1] : this._items[nextItem.position - 1],
            middle: nextItem,
            right: nextItem.position === this._items.length - 1 ? this._items[0] : this._items[nextItem.position + 1]
        };
        this._rotate(rotationItems);
        this._setActiveItem(nextItem);
        if (this._intervalInstance) {
            this.pause();
            this.cycle();
        }
        this._options.onChange(this);
    };
    /**
     * Based on the currently active item it will go to the next position
     */ Carousel.prototype.next = function() {
        var activeItem = this._getActiveItem();
        var nextItem = null;
        // check if last item
        if (activeItem.position === this._items.length - 1) nextItem = this._items[0];
        else nextItem = this._items[activeItem.position + 1];
        this.slideTo(nextItem.position);
        // callback function
        this._options.onNext(this);
    };
    /**
     * Based on the currently active item it will go to the previous position
     */ Carousel.prototype.prev = function() {
        var activeItem = this._getActiveItem();
        var prevItem = null;
        // check if first item
        if (activeItem.position === 0) prevItem = this._items[this._items.length - 1];
        else prevItem = this._items[activeItem.position - 1];
        this.slideTo(prevItem.position);
        // callback function
        this._options.onPrev(this);
    };
    /**
     * This method applies the transform classes based on the left, middle, and right rotation carousel items
     * @param {*} rotationItems
     */ Carousel.prototype._rotate = function(rotationItems) {
        // reset
        this._items.map(function(item) {
            item.el.classList.add("hidden");
        });
        // left item (previously active)
        rotationItems.left.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-20");
        rotationItems.left.el.classList.add("-translate-x-full", "z-10");
        // currently active item
        rotationItems.middle.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-10");
        rotationItems.middle.el.classList.add("translate-x-0", "z-20");
        // right item (upcoming active)
        rotationItems.right.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-20");
        rotationItems.right.el.classList.add("translate-x-full", "z-10");
    };
    /**
     * Set an interval to cycle through the carousel items
     */ Carousel.prototype.cycle = function() {
        var _this = this;
        if (typeof window !== "undefined") this._intervalInstance = window.setInterval(function() {
            _this.next();
        }, this._intervalDuration);
    };
    /**
     * Clears the cycling interval
     */ Carousel.prototype.pause = function() {
        clearInterval(this._intervalInstance);
    };
    /**
     * Get the currently active item
     */ Carousel.prototype._getActiveItem = function() {
        return this._activeItem;
    };
    /**
     * Set the currently active item and data attribute
     * @param {*} position
     */ Carousel.prototype._setActiveItem = function(item) {
        var _a, _b;
        var _this = this;
        this._activeItem = item;
        var position = item.position;
        // update the indicators if available
        if (this._indicators.length) {
            this._indicators.map(function(indicator) {
                var _a, _b;
                indicator.el.setAttribute("aria-current", "false");
                (_a = indicator.el.classList).remove.apply(_a, _this._options.indicators.activeClasses.split(" "));
                (_b = indicator.el.classList).add.apply(_b, _this._options.indicators.inactiveClasses.split(" "));
            });
            (_a = this._indicators[position].el.classList).add.apply(_a, this._options.indicators.activeClasses.split(" "));
            (_b = this._indicators[position].el.classList).remove.apply(_b, this._options.indicators.inactiveClasses.split(" "));
            this._indicators[position].el.setAttribute("aria-current", "true");
        }
    };
    return Carousel;
}();
function initCarousels() {
    document.querySelectorAll("[data-carousel]").forEach(function($carouselEl) {
        var interval = $carouselEl.getAttribute("data-carousel-interval");
        var slide = $carouselEl.getAttribute("data-carousel") === "slide" ? true : false;
        var items = [];
        var defaultPosition = 0;
        if ($carouselEl.querySelectorAll("[data-carousel-item]").length) Array.from($carouselEl.querySelectorAll("[data-carousel-item]")).map(function($carouselItemEl, position) {
            items.push({
                position: position,
                el: $carouselItemEl
            });
            if ($carouselItemEl.getAttribute("data-carousel-item") === "active") defaultPosition = position;
        });
        var indicators = [];
        if ($carouselEl.querySelectorAll("[data-carousel-slide-to]").length) Array.from($carouselEl.querySelectorAll("[data-carousel-slide-to]")).map(function($indicatorEl) {
            indicators.push({
                position: parseInt($indicatorEl.getAttribute("data-carousel-slide-to")),
                el: $indicatorEl
            });
        });
        var carousel = new Carousel(items, {
            defaultPosition: defaultPosition,
            indicators: {
                items: indicators
            },
            interval: interval ? interval : Default.interval
        });
        if (slide) carousel.cycle();
        // check for controls
        var carouselNextEl = $carouselEl.querySelector("[data-carousel-next]");
        var carouselPrevEl = $carouselEl.querySelector("[data-carousel-prev]");
        if (carouselNextEl) carouselNextEl.addEventListener("click", function() {
            carousel.next();
        });
        if (carouselPrevEl) carouselPrevEl.addEventListener("click", function() {
            carousel.prev();
        });
    });
}
if (typeof window !== "undefined") {
    window.Carousel = Carousel;
    window.initCarousels = initCarousels;
}
exports.default = Carousel;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jALxc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initDismisses", ()=>initDismisses);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    transition: "transition-opacity",
    duration: 300,
    timing: "ease-out",
    onHide: function() {}
};
var Dismiss = /** @class */ function() {
    function Dismiss(targetEl, triggerEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (triggerEl === void 0) triggerEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Dismiss.prototype._init = function() {
        var _this = this;
        if (this._triggerEl) this._triggerEl.addEventListener("click", function() {
            _this.hide();
        });
    };
    Dismiss.prototype.hide = function() {
        var _this = this;
        this._targetEl.classList.add(this._options.transition, "duration-".concat(this._options.duration), this._options.timing, "opacity-0");
        setTimeout(function() {
            _this._targetEl.classList.add("hidden");
        }, this._options.duration);
        // callback function
        this._options.onHide(this, this._targetEl);
    };
    return Dismiss;
}();
function initDismisses() {
    document.querySelectorAll("[data-dismiss-target]").forEach(function($triggerEl) {
        var targetId = $triggerEl.getAttribute("data-dismiss-target");
        var $dismissEl = document.querySelector(targetId);
        if ($dismissEl) new Dismiss($dismissEl, $triggerEl);
        else console.error('The dismiss element with id "'.concat(targetId, '" does not exist. Please check the data-dismiss-target attribute.'));
    });
}
if (typeof window !== "undefined") {
    window.Dismiss = Dismiss;
    window.initDismisses = initDismisses;
}
exports.default = Dismiss;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"9nap2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initDropdowns", ()=>initDropdowns);
/* eslint-disable @typescript-eslint/no-empty-function */ var _core = require("@popperjs/core");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var Default = {
    placement: "bottom",
    triggerType: "click",
    offsetSkidding: 0,
    offsetDistance: 10,
    delay: 300,
    onShow: function() {},
    onHide: function() {},
    onToggle: function() {}
};
var Dropdown = /** @class */ function() {
    function Dropdown(targetElement, triggerElement, options) {
        if (targetElement === void 0) targetElement = null;
        if (triggerElement === void 0) triggerElement = null;
        if (options === void 0) options = Default;
        this._targetEl = targetElement;
        this._triggerEl = triggerElement;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Dropdown.prototype._init = function() {
        if (this._triggerEl) this._setupEventListeners();
    };
    Dropdown.prototype._setupEventListeners = function() {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        // click event handling for trigger element
        if (this._options.triggerType === "click") triggerEvents.showEvents.forEach(function(ev) {
            _this._triggerEl.addEventListener(ev, function() {
                _this.toggle();
            });
        });
        // hover event handling for trigger element
        if (this._options.triggerType === "hover") {
            triggerEvents.showEvents.forEach(function(ev) {
                _this._triggerEl.addEventListener(ev, function() {
                    if (ev === "click") _this.toggle();
                    else setTimeout(function() {
                        _this.show();
                    }, _this._options.delay);
                });
                _this._targetEl.addEventListener(ev, function() {
                    _this.show();
                });
            });
            triggerEvents.hideEvents.forEach(function(ev) {
                _this._triggerEl.addEventListener(ev, function() {
                    setTimeout(function() {
                        if (!_this._targetEl.matches(":hover")) _this.hide();
                    }, _this._options.delay);
                });
                _this._targetEl.addEventListener(ev, function() {
                    setTimeout(function() {
                        if (!_this._triggerEl.matches(":hover")) _this.hide();
                    }, _this._options.delay);
                });
            });
        }
    };
    Dropdown.prototype._createPopperInstance = function() {
        return (0, _core.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: "offset",
                    options: {
                        offset: [
                            this._options.offsetSkidding,
                            this._options.offsetDistance
                        ]
                    }
                }
            ]
        });
    };
    Dropdown.prototype._setupClickOutsideListener = function() {
        var _this = this;
        this._clickOutsideEventListener = function(ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener("click", this._clickOutsideEventListener, true);
    };
    Dropdown.prototype._removeClickOutsideListener = function() {
        document.body.removeEventListener("click", this._clickOutsideEventListener, true);
    };
    Dropdown.prototype._handleClickOutside = function(ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl && !targetEl.contains(clickedEl) && !this._triggerEl.contains(clickedEl) && this.isVisible()) this.hide();
    };
    Dropdown.prototype._getTriggerEvents = function() {
        switch(this._options.triggerType){
            case "hover":
                return {
                    showEvents: [
                        "mouseenter",
                        "click"
                    ],
                    hideEvents: [
                        "mouseleave"
                    ]
                };
            case "click":
                return {
                    showEvents: [
                        "click"
                    ],
                    hideEvents: []
                };
            case "none":
                return {
                    showEvents: [],
                    hideEvents: []
                };
            default:
                return {
                    showEvents: [
                        "click"
                    ],
                    hideEvents: []
                };
        }
    };
    Dropdown.prototype.toggle = function() {
        if (this.isVisible()) this.hide();
        else this.show();
        this._options.onToggle(this);
    };
    Dropdown.prototype.isVisible = function() {
        return this._visible;
    };
    Dropdown.prototype.show = function() {
        this._targetEl.classList.remove("hidden");
        this._targetEl.classList.add("block");
        // Enable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: true
                    }
                ], false)
            });
        });
        this._setupClickOutsideListener();
        // Update its position
        this._popperInstance.update();
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Dropdown.prototype.hide = function() {
        this._targetEl.classList.remove("block");
        this._targetEl.classList.add("hidden");
        // Disable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: false
                    }
                ], false)
            });
        });
        this._visible = false;
        this._removeClickOutsideListener();
        // callback function
        this._options.onHide(this);
    };
    return Dropdown;
}();
function initDropdowns() {
    document.querySelectorAll("[data-dropdown-toggle]").forEach(function($triggerEl) {
        var dropdownId = $triggerEl.getAttribute("data-dropdown-toggle");
        var $dropdownEl = document.getElementById(dropdownId);
        if ($dropdownEl) {
            var placement = $triggerEl.getAttribute("data-dropdown-placement");
            var offsetSkidding = $triggerEl.getAttribute("data-dropdown-offset-skidding");
            var offsetDistance = $triggerEl.getAttribute("data-dropdown-offset-distance");
            var triggerType = $triggerEl.getAttribute("data-dropdown-trigger");
            var delay = $triggerEl.getAttribute("data-dropdown-delay");
            new Dropdown($dropdownEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                triggerType: triggerType ? triggerType : Default.triggerType,
                offsetSkidding: offsetSkidding ? parseInt(offsetSkidding) : Default.offsetSkidding,
                offsetDistance: offsetDistance ? parseInt(offsetDistance) : Default.offsetDistance,
                delay: delay ? parseInt(delay) : Default.delay
            });
        } else console.error('The dropdown element with id "'.concat(dropdownId, '" does not exist. Please check the data-dropdown-toggle attribute.'));
    });
}
if (typeof window !== "undefined") {
    window.Dropdown = Dropdown;
    window.initDropdowns = initDropdowns;
}
exports.default = Dropdown;

},{"@popperjs/core":"lFlK4","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lFlK4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
parcelHelpers.export(exports, "createPopperBase", ()=>(0, _createPopperJs.createPopper));
parcelHelpers.export(exports, "createPopper", ()=>(0, _popperJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper));
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"BsUWd","./modifiers/index.js":"aYMaS","./createPopper.js":"b0eg0","./popper.js":"2cnYz","./popper-lite.js":"htFgK","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"BsUWd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top);
parcelHelpers.export(exports, "bottom", ()=>bottom);
parcelHelpers.export(exports, "right", ()=>right);
parcelHelpers.export(exports, "left", ()=>left);
parcelHelpers.export(exports, "auto", ()=>auto);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements);
parcelHelpers.export(exports, "start", ()=>start);
parcelHelpers.export(exports, "end", ()=>end);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents);
parcelHelpers.export(exports, "viewport", ()=>viewport);
parcelHelpers.export(exports, "popper", ()=>popper);
parcelHelpers.export(exports, "reference", ()=>reference);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements);
parcelHelpers.export(exports, "placements", ()=>placements);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead);
parcelHelpers.export(exports, "read", ()=>read);
parcelHelpers.export(exports, "afterRead", ()=>afterRead);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain);
parcelHelpers.export(exports, "main", ()=>main);
parcelHelpers.export(exports, "afterMain", ()=>afterMain);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite);
parcelHelpers.export(exports, "write", ()=>write);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases);
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead"; // pure-logic modifiers
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain"; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"aYMaS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>(0, _applyStylesJsDefault.default));
parcelHelpers.export(exports, "arrow", ()=>(0, _arrowJsDefault.default));
parcelHelpers.export(exports, "computeStyles", ()=>(0, _computeStylesJsDefault.default));
parcelHelpers.export(exports, "eventListeners", ()=>(0, _eventListenersJsDefault.default));
parcelHelpers.export(exports, "flip", ()=>(0, _flipJsDefault.default));
parcelHelpers.export(exports, "hide", ()=>(0, _hideJsDefault.default));
parcelHelpers.export(exports, "offset", ()=>(0, _offsetJsDefault.default));
parcelHelpers.export(exports, "popperOffsets", ()=>(0, _popperOffsetsJsDefault.default));
parcelHelpers.export(exports, "preventOverflow", ()=>(0, _preventOverflowJsDefault.default));
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"3nL1p","./arrow.js":"1dpgW","./computeStyles.js":"7TrnO","./eventListeners.js":"ivtO1","./flip.js":"fACYG","./hide.js":"kXsdE","./offset.js":"bhpxq","./popperOffsets.js":"hmcbI","./preventOverflow.js":"3Odhg","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3nL1p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? "" : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
        },
        arrow: {
            position: "absolute"
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style, property) {
                style[property] = "";
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect,
    requires: [
        "computeStyles"
    ]
};

},{"../dom-utils/getNodeName.js":"5B6Rc","../dom-utils/instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"5B6Rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeName);
function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"dFXV3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === "undefined") return false;
    var OwnElement = (0, _getWindowJsDefault.default)(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"ku0BW","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ku0BW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindow);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"1dpgW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return (0, _mergePaddingObjectJsDefault.default)(typeof padding !== "number" ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var axis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var isVertical = [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = (0, _getLayoutRectJsDefault.default)(arrowElement);
    var minProp = axis === "y" ? (0, _enumsJs.top) : (0, _enumsJs.left);
    var maxProp = axis === "y" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = (0, _getOffsetParentJsDefault.default)(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = (0, _withinJs.within)(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!(0, _containsJsDefault.default)(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect,
    requires: [
        "popperOffsets"
    ],
    requiresIfExists: [
        "preventOverflow"
    ]
};

},{"../utils/getBasePlacement.js":"jv1SW","../dom-utils/getLayoutRect.js":"l21c8","../dom-utils/contains.js":"f6i5V","../dom-utils/getOffsetParent.js":"4XUA2","../utils/getMainAxisFromPlacement.js":"cKVHx","../utils/within.js":"hgJt6","../utils/mergePaddingObject.js":"jG0co","../utils/expandToHashMap.js":"8rKMZ","../enums.js":"BsUWd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jv1SW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBasePlacement);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split("-")[0];
}

},{"../enums.js":"BsUWd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"l21c8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getLayoutRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = (0, _getBoundingClientRectJsDefault.default)(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}

},{"./getBoundingClientRect.js":"17CzE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"17CzE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBoundingClientRect);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) includeScale = false;
    if (isFixedStrategy === void 0) isFixedStrategy = false;
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && (0, _instanceOfJs.isHTMLElement)(element)) {
        scaleX = element.offsetWidth > 0 ? (0, _mathJs.round)(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? (0, _mathJs.round)(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = (0, _instanceOfJs.isElement)(element) ? (0, _getWindowJsDefault.default)(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !(0, _isLayoutViewportJsDefault.default)() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}

},{"./instanceOf.js":"dFXV3","../utils/math.js":"htQlL","./getWindow.js":"ku0BW","./isLayoutViewport.js":"eorZo","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"htQlL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "round", ()=>round);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"eorZo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isLayoutViewport);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test((0, _userAgentJsDefault.default)());
}

},{"../utils/userAgent.js":"7Sxbj","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"7Sxbj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getUAString);
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
    }).join(" ");
    return navigator.userAgent;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"f6i5V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>contains);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && (0, _instanceOfJs.isShadowRoot)(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next);
    } // Give up, the result is false
    return false;
}

},{"./instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"4XUA2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOffsetParent);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function getTrueOffsetParent(element) {
    if (!(0, _instanceOfJs.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
    (0, _getComputedStyleJsDefault.default)(element).position === "fixed") return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test((0, _userAgentJsDefault.default)());
    var isIE = /Trident/i.test((0, _userAgentJsDefault.default)());
    if (isIE && (0, _instanceOfJs.isHTMLElement)(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = (0, _getComputedStyleJsDefault.default)(element);
        if (elementCss.position === "fixed") return null;
    }
    var currentNode = (0, _getParentNodeJsDefault.default)(element);
    if ((0, _instanceOfJs.isShadowRoot)(currentNode)) currentNode = currentNode.host;
    while((0, _instanceOfJs.isHTMLElement)(currentNode) && [
        "html",
        "body"
    ].indexOf((0, _getNodeNameJsDefault.default)(currentNode)) < 0){
        var css = (0, _getComputedStyleJsDefault.default)(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || [
            "transform",
            "perspective"
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = (0, _getWindowJsDefault.default)(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && (0, _isTableElementJsDefault.default)(offsetParent) && (0, _getComputedStyleJsDefault.default)(offsetParent).position === "static")offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && ((0, _getNodeNameJsDefault.default)(offsetParent) === "html" || (0, _getNodeNameJsDefault.default)(offsetParent) === "body" && (0, _getComputedStyleJsDefault.default)(offsetParent).position === "static")) return window;
    return offsetParent || getContainingBlock(element) || window;
}

},{"./getWindow.js":"ku0BW","./getNodeName.js":"5B6Rc","./getComputedStyle.js":"h0Rn7","./instanceOf.js":"dFXV3","./isTableElement.js":"O4600","./getParentNode.js":"ue6za","../utils/userAgent.js":"7Sxbj","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"h0Rn7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getComputedStyle);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return (0, _getWindowJsDefault.default)(element).getComputedStyle(element);
}

},{"./getWindow.js":"ku0BW","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"O4600":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isTableElement);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        "table",
        "td",
        "th"
    ].indexOf((0, _getNodeNameJsDefault.default)(element)) >= 0;
}

},{"./getNodeName.js":"5B6Rc","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ue6za":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getParentNode);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if ((0, _getNodeNameJsDefault.default)(element) === "html") return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ((0, _instanceOfJs.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0, _getDocumentElementJsDefault.default)(element) // fallback
    );
}

},{"./getNodeName.js":"5B6Rc","./getDocumentElement.js":"3FXME","./instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3FXME":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentElement);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (((0, _instanceOfJs.isElement)(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

},{"./instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"cKVHx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getMainAxisFromPlacement);
function getMainAxisFromPlacement(placement) {
    return [
        "top",
        "bottom"
    ].indexOf(placement) >= 0 ? "x" : "y";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hgJt6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return (0, _mathJs.max)(min, (0, _mathJs.min)(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jG0co":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergePaddingObject);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({}, (0, _getFreshSideObjectJsDefault.default)(), paddingObject);
}

},{"./getFreshSideObject.js":"bB6Gd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"bB6Gd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getFreshSideObject);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8rKMZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>expandToHashMap);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"7TrnO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: (0, _mathJs.round)(x * dpr) / dpr || 0,
        y: (0, _mathJs.round)(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = (0, _enumsJs.left);
    var sideY = (0, _enumsJs.top);
    var win = window;
    if (adaptive) {
        var offsetParent = (0, _getOffsetParentJsDefault.default)(popper);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === (0, _getWindowJsDefault.default)(popper)) {
            offsetParent = (0, _getDocumentElementJsDefault.default)(popper);
            if ((0, _getComputedStyleJsDefault.default)(offsetParent).position !== "static" && position === "absolute") {
                heightProp = "scrollHeight";
                widthProp = "scrollWidth";
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent;
        if (placement === (0, _enumsJs.top) || (placement === (0, _enumsJs.left) || placement === (0, _enumsJs.right)) && variation === (0, _enumsJs.end)) {
            sideY = (0, _enumsJs.bottom);
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === (0, _enumsJs.left) || (placement === (0, _enumsJs.top) || placement === (0, _enumsJs.bottom)) && variation === (0, _enumsJs.end)) {
            sideX = (0, _enumsJs.right);
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }, (0, _getWindowJsDefault.default)(popper)) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: (0, _getBasePlacementJsDefault.default)(state.placement),
        variation: (0, _getVariationJsDefault.default)(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
};

},{"../enums.js":"BsUWd","../dom-utils/getOffsetParent.js":"4XUA2","../dom-utils/getWindow.js":"ku0BW","../dom-utils/getDocumentElement.js":"3FXME","../dom-utils/getComputedStyle.js":"h0Rn7","../utils/getBasePlacement.js":"jv1SW","../utils/getVariation.js":"b1pvU","../utils/math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"b1pvU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getVariation);
function getVariation(placement) {
    return placement.split("-")[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ivtO1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = (0, _getWindowJsDefault.default)(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
    });
    if (resize) window.addEventListener("resize", instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
        });
        if (resize) window.removeEventListener("resize", instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {},
    effect: effect,
    data: {}
};

},{"../dom-utils/getWindow.js":"ku0BW","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fACYG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if ((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto)) return [];
    var oppositePlacement = (0, _getOppositePlacementJsDefault.default)(placement);
    return [
        (0, _getOppositeVariationPlacementJsDefault.default)(placement),
        oppositePlacement,
        (0, _getOppositeVariationPlacementJsDefault.default)(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        (0, _getOppositePlacementJsDefault.default)(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto) ? (0, _computeAutoPlacementJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
        var isStartVariation = (0, _getVariationJsDefault.default)(placement) === (0, _enumsJs.start);
        var isVertical = [
            (0, _enumsJs.top),
            (0, _enumsJs.bottom)
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? (0, _enumsJs.right) : (0, _enumsJs.left) : isStartVariation ? (0, _enumsJs.bottom) : (0, _enumsJs.top);
        if (referenceRect[len] > popperRect[len]) mainVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var altVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: [
        "offset"
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"5HYWF","../utils/getBasePlacement.js":"jv1SW","../utils/getOppositeVariationPlacement.js":"jn12N","../utils/detectOverflow.js":"3MKC3","../utils/computeAutoPlacement.js":"lLh3M","../enums.js":"BsUWd","../utils/getVariation.js":"b1pvU","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"5HYWF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositePlacement);
var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jn12N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositeVariationPlacement);
var hash = {
    start: "end",
    end: "start"
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3MKC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>detectOverflow);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? (0, _enumsJs.clippingParents) : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? (0, _enumsJs.viewport) : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? (0, _enumsJs.popper) : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = (0, _mergePaddingObjectJsDefault.default)(typeof padding !== "number" ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
    var altContext = elementContext === (0, _enumsJs.popper) ? (0, _enumsJs.reference) : (0, _enumsJs.popper);
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = (0, _getClippingRectJsDefault.default)((0, _instanceOfJs.isElement)(element) ? element : element.contextElement || (0, _getDocumentElementJsDefault.default)(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = (0, _getBoundingClientRectJsDefault.default)(state.elements.reference);
    var popperOffsets = (0, _computeOffsetsJsDefault.default)({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement: placement
    });
    var popperClientRect = (0, _rectToClientRectJsDefault.default)(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === (0, _enumsJs.popper) ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === (0, _enumsJs.popper) && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                (0, _enumsJs.right),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                (0, _enumsJs.top),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}

},{"../dom-utils/getClippingRect.js":"8hLGO","../dom-utils/getDocumentElement.js":"3FXME","../dom-utils/getBoundingClientRect.js":"17CzE","./computeOffsets.js":"2UPAA","./rectToClientRect.js":"bS6w9","../enums.js":"BsUWd","../dom-utils/instanceOf.js":"dFXV3","./mergePaddingObject.js":"jG0co","./expandToHashMap.js":"8rKMZ","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8hLGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getClippingRect);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element, strategy) {
    var rect = (0, _getBoundingClientRectJsDefault.default)(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === (0, _enumsJs.viewport) ? (0, _rectToClientRectJsDefault.default)((0, _getViewportRectJsDefault.default)(element, strategy)) : (0, _instanceOfJs.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0, _rectToClientRectJsDefault.default)((0, _getDocumentRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = (0, _listScrollParentsJsDefault.default)((0, _getParentNodeJsDefault.default)(element));
    var canEscapeClipping = [
        "absolute",
        "fixed"
    ].indexOf((0, _getComputedStyleJsDefault.default)(element).position) >= 0;
    var clipperElement = canEscapeClipping && (0, _instanceOfJs.isHTMLElement)(element) ? (0, _getOffsetParentJsDefault.default)(element) : element;
    if (!(0, _instanceOfJs.isElement)(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return (0, _instanceOfJs.isElement)(clippingParent) && (0, _containsJsDefault.default)(clippingParent, clipperElement) && (0, _getNodeNameJsDefault.default)(clippingParent) !== "body";
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = (0, _mathJs.max)(rect.top, accRect.top);
        accRect.right = (0, _mathJs.min)(rect.right, accRect.right);
        accRect.bottom = (0, _mathJs.min)(rect.bottom, accRect.bottom);
        accRect.left = (0, _mathJs.max)(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}

},{"../enums.js":"BsUWd","./getViewportRect.js":"9pnB0","./getDocumentRect.js":"hkJC2","./listScrollParents.js":"hLNax","./getOffsetParent.js":"4XUA2","./getDocumentElement.js":"3FXME","./getComputedStyle.js":"h0Rn7","./instanceOf.js":"dFXV3","./getBoundingClientRect.js":"17CzE","./getParentNode.js":"ue6za","./contains.js":"f6i5V","./getNodeName.js":"5B6Rc","../utils/rectToClientRect.js":"bS6w9","../utils/math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"9pnB0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getViewportRect);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getViewportRect(element, strategy) {
    var win = (0, _getWindowJsDefault.default)(element);
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = (0, _isLayoutViewportJsDefault.default)();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + (0, _getWindowScrollBarXJsDefault.default)(element),
        y: y
    };
}

},{"./getWindow.js":"ku0BW","./getDocumentElement.js":"3FXME","./getWindowScrollBarX.js":"aMRWG","./isLayoutViewport.js":"eorZo","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"aMRWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScrollBarX);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (0, _getBoundingClientRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)).left + (0, _getWindowScrollJsDefault.default)(element).scrollLeft;
}

},{"./getBoundingClientRect.js":"17CzE","./getDocumentElement.js":"3FXME","./getWindowScroll.js":"2tnSo","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2tnSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScroll);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = (0, _getWindowJsDefault.default)(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}

},{"./getWindow.js":"ku0BW","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hkJC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentRect);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var winScroll = (0, _getWindowScrollJsDefault.default)(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = (0, _mathJs.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = (0, _mathJs.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + (0, _getWindowScrollBarXJsDefault.default)(element);
    var y = -winScroll.scrollTop;
    if ((0, _getComputedStyleJsDefault.default)(body || html).direction === "rtl") x += (0, _mathJs.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}

},{"./getDocumentElement.js":"3FXME","./getComputedStyle.js":"h0Rn7","./getWindowScrollBarX.js":"aMRWG","./getWindowScroll.js":"2tnSo","../utils/math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hLNax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>listScrollParents);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = (0, _getScrollParentJsDefault.default)(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = (0, _getWindowJsDefault.default)(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], (0, _isScrollParentJsDefault.default)(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents((0, _getParentNodeJsDefault.default)(target)));
}

},{"./getScrollParent.js":"1PNAE","./getParentNode.js":"ue6za","./getWindow.js":"ku0BW","./isScrollParent.js":"hWIdr","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"1PNAE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getScrollParent);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        "html",
        "body",
        "#document"
    ].indexOf((0, _getNodeNameJsDefault.default)(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if ((0, _instanceOfJs.isHTMLElement)(node) && (0, _isScrollParentJsDefault.default)(node)) return node;
    return getScrollParent((0, _getParentNodeJsDefault.default)(node));
}

},{"./getParentNode.js":"ue6za","./isScrollParent.js":"hWIdr","./getNodeName.js":"5B6Rc","./instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hWIdr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isScrollParent);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = (0, _getComputedStyleJsDefault.default)(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

},{"./getComputedStyle.js":"h0Rn7","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"bS6w9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rectToClientRect);
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2UPAA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeOffsets);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? (0, _getBasePlacementJsDefault.default)(placement) : null;
    var variation = placement ? (0, _getVariationJsDefault.default)(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case 0, _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case 0, _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case 0, _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case 0, _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch(variation){
            case 0, _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case 0, _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}

},{"./getBasePlacement.js":"jv1SW","./getVariation.js":"b1pvU","./getMainAxisFromPlacement.js":"cKVHx","../enums.js":"BsUWd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lLh3M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeAutoPlacement);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? (0, _enumsJs.placements) : _options$allowedAutoP;
    var variation = (0, _getVariationJsDefault.default)(placement);
    var placements = variation ? flipVariations ? (0, _enumsJs.variationPlacements) : (0, _enumsJs.variationPlacements).filter(function(placement) {
        return (0, _getVariationJsDefault.default)(placement) === variation;
    }) : (0, _enumsJs.basePlacements);
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements;
     // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[(0, _getBasePlacementJsDefault.default)(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}

},{"./getVariation.js":"b1pvU","../enums.js":"BsUWd","./detectOverflow.js":"3MKC3","./getBasePlacement.js":"jv1SW","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"kXsdE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        (0, _enumsJs.top),
        (0, _enumsJs.right),
        (0, _enumsJs.bottom),
        (0, _enumsJs.left)
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = (0, _detectOverflowJsDefault.default)(state, {
        elementContext: "reference"
    });
    var popperAltOverflow = (0, _detectOverflowJsDefault.default)(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: [
        "preventOverflow"
    ],
    fn: hide
};

},{"../enums.js":"BsUWd","../utils/detectOverflow.js":"3MKC3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"bhpxq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
    var invertDistance = [
        (0, _enumsJs.left),
        (0, _enumsJs.top)
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === "function" ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = (0, _enumsJs.placements).reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: [
        "popperOffsets"
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"jv1SW","../enums.js":"BsUWd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hmcbI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = (0, _computeOffsetsJsDefault.default)({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
};

},{"../utils/computeOffsets.js":"2UPAA","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3Odhg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = (0, _detectOverflowJsDefault.default)(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var variation = (0, _getVariationJsDefault.default)(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var altAxis = (0, _getAltAxisJsDefault.default)(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var altSide = mainAxis === "y" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var len = mainAxis === "y" ? "height" : "width";
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === (0, _enumsJs.start) ? referenceRect[len] : popperRect[len];
        var maxLen = variation === (0, _enumsJs.start) ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? (0, _getLayoutRectJsDefault.default)(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : (0, _getFreshSideObjectJsDefault.default)();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = (0, _withinJs.within)(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && (0, _getOffsetParentJsDefault.default)(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = (0, _withinJs.within)(tether ? (0, _mathJs.min)(min, tetherMin) : min, offset, tether ? (0, _mathJs.max)(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var _altSide = mainAxis === "x" ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            (0, _enumsJs.top),
            (0, _enumsJs.left)
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? (0, _withinJs.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0, _withinJs.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: [
        "offset"
    ]
};

},{"../enums.js":"BsUWd","../utils/getBasePlacement.js":"jv1SW","../utils/getMainAxisFromPlacement.js":"cKVHx","../utils/getAltAxis.js":"aHUCB","../utils/within.js":"hgJt6","../dom-utils/getLayoutRect.js":"l21c8","../dom-utils/getOffsetParent.js":"4XUA2","../utils/detectOverflow.js":"3MKC3","../utils/getVariation.js":"b1pvU","../utils/getFreshSideObject.js":"bB6Gd","../utils/math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"aHUCB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getAltAxis);
function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"b0eg0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _detectOverflowJsDefault.default));
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: (0, _instanceOfJs.isElement)(reference) ? (0, _listScrollParentsJsDefault.default)(reference) : reference.contextElement ? (0, _listScrollParentsJsDefault.default)(reference.contextElement) : [],
                    popper: (0, _listScrollParentsJsDefault.default)(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = (0, _orderModifiersJsDefault.default)((0, _mergeByNameJsDefault.default)([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                });
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) return;
                 // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: (0, _getCompositeRectJsDefault.default)(reference, (0, _getOffsetParentJsDefault.default)(popper), state.options.strategy === "fixed"),
                    popper: (0, _getLayoutRectJsDefault.default)(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === "function") state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: (0, _debounceJsDefault.default)(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) return instance;
        instance.setOptions(options).then(function(state) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref) {
                var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;
                if (typeof effect === "function") {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"d7UbK","./dom-utils/getLayoutRect.js":"l21c8","./dom-utils/listScrollParents.js":"hLNax","./dom-utils/getOffsetParent.js":"4XUA2","./utils/orderModifiers.js":"E3xtE","./utils/debounce.js":"fWRRw","./utils/mergeByName.js":"4sshc","./utils/detectOverflow.js":"3MKC3","./dom-utils/instanceOf.js":"dFXV3","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"d7UbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCompositeRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = (0, _mathJs.round)(rect.width) / element.offsetWidth || 1;
    var scaleY = (0, _mathJs.round)(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = (0, _instanceOfJs.isHTMLElement)(offsetParent);
    var offsetParentIsScaled = (0, _instanceOfJs.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
    var documentElement = (0, _getDocumentElementJsDefault.default)(offsetParent);
    var rect = (0, _getBoundingClientRectJsDefault.default)(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if ((0, _getNodeNameJsDefault.default)(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        (0, _isScrollParentJsDefault.default)(documentElement)) scroll = (0, _getNodeScrollJsDefault.default)(offsetParent);
        if ((0, _instanceOfJs.isHTMLElement)(offsetParent)) {
            offsets = (0, _getBoundingClientRectJsDefault.default)(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = (0, _getWindowScrollBarXJsDefault.default)(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}

},{"./getBoundingClientRect.js":"17CzE","./getNodeScroll.js":"h5fuh","./getNodeName.js":"5B6Rc","./instanceOf.js":"dFXV3","./getWindowScrollBarX.js":"aMRWG","./getDocumentElement.js":"3FXME","./isScrollParent.js":"hWIdr","../utils/math.js":"htQlL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"h5fuh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeScroll);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === (0, _getWindowJsDefault.default)(node) || !(0, _instanceOfJs.isHTMLElement)(node)) return (0, _getWindowScrollJsDefault.default)(node);
    else return (0, _getHTMLElementScrollJsDefault.default)(node);
}

},{"./getWindowScroll.js":"2tnSo","./getWindow.js":"ku0BW","./instanceOf.js":"dFXV3","./getHTMLElementScroll.js":"fFSDf","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fFSDf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getHTMLElementScroll);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"E3xtE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>orderModifiers);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return (0, _enumsJs.modifierPhases).reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}

},{"../enums.js":"BsUWd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fWRRw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>debounce);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"4sshc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergeByName);
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2cnYz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopper", ()=>createPopper) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default),
    (0, _offsetJsDefault.default),
    (0, _flipJsDefault.default),
    (0, _preventOverflowJsDefault.default),
    (0, _arrowJsDefault.default),
    (0, _hideJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"b0eg0","./modifiers/eventListeners.js":"ivtO1","./modifiers/popperOffsets.js":"hmcbI","./modifiers/computeStyles.js":"7TrnO","./modifiers/applyStyles.js":"3nL1p","./modifiers/offset.js":"bhpxq","./modifiers/flip.js":"fACYG","./modifiers/preventOverflow.js":"3Odhg","./modifiers/arrow.js":"1dpgW","./modifiers/hide.js":"kXsdE","./popper-lite.js":false,"./modifiers/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"htFgK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"b0eg0","./modifiers/eventListeners.js":"ivtO1","./modifiers/popperOffsets.js":"hmcbI","./modifiers/computeStyles.js":"7TrnO","./modifiers/applyStyles.js":"3nL1p","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"dIXxU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initModals", ()=>initModals);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    placement: "center",
    backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40",
    backdrop: "dynamic",
    closable: true,
    onHide: function() {},
    onShow: function() {},
    onToggle: function() {}
};
var Modal = /** @class */ function() {
    function Modal(targetEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._isHidden = true;
        this._backdropEl = null;
        this._init();
    }
    Modal.prototype._init = function() {
        var _this = this;
        if (this._targetEl) this._getPlacementClasses().map(function(c) {
            _this._targetEl.classList.add(c);
        });
    };
    Modal.prototype._createBackdrop = function() {
        var _a;
        if (this._isHidden) {
            var backdropEl = document.createElement("div");
            backdropEl.setAttribute("modal-backdrop", "");
            (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(" "));
            document.querySelector("body").append(backdropEl);
            this._backdropEl = backdropEl;
        }
    };
    Modal.prototype._destroyBackdropEl = function() {
        if (!this._isHidden) document.querySelector("[modal-backdrop]").remove();
    };
    Modal.prototype._setupModalCloseEventListeners = function() {
        var _this = this;
        if (this._options.backdrop === "dynamic") {
            this._clickOutsideEventListener = function(ev) {
                _this._handleOutsideClick(ev.target);
            };
            this._targetEl.addEventListener("click", this._clickOutsideEventListener, true);
        }
        this._keydownEventListener = function(ev) {
            if (ev.key === "Escape") _this.hide();
        };
        document.body.addEventListener("keydown", this._keydownEventListener, true);
    };
    Modal.prototype._removeModalCloseEventListeners = function() {
        if (this._options.backdrop === "dynamic") this._targetEl.removeEventListener("click", this._clickOutsideEventListener, true);
        document.body.removeEventListener("keydown", this._keydownEventListener, true);
    };
    Modal.prototype._handleOutsideClick = function(target) {
        if (target === this._targetEl || target === this._backdropEl && this.isVisible()) this.hide();
    };
    Modal.prototype._getPlacementClasses = function() {
        switch(this._options.placement){
            // top
            case "top-left":
                return [
                    "justify-start",
                    "items-start"
                ];
            case "top-center":
                return [
                    "justify-center",
                    "items-start"
                ];
            case "top-right":
                return [
                    "justify-end",
                    "items-start"
                ];
            // center
            case "center-left":
                return [
                    "justify-start",
                    "items-center"
                ];
            case "center":
                return [
                    "justify-center",
                    "items-center"
                ];
            case "center-right":
                return [
                    "justify-end",
                    "items-center"
                ];
            // bottom
            case "bottom-left":
                return [
                    "justify-start",
                    "items-end"
                ];
            case "bottom-center":
                return [
                    "justify-center",
                    "items-end"
                ];
            case "bottom-right":
                return [
                    "justify-end",
                    "items-end"
                ];
            default:
                return [
                    "justify-center",
                    "items-center"
                ];
        }
    };
    Modal.prototype.toggle = function() {
        if (this._isHidden) this.show();
        else this.hide();
        // callback function
        this._options.onToggle(this);
    };
    Modal.prototype.show = function() {
        if (this.isHidden) {
            this._targetEl.classList.add("flex");
            this._targetEl.classList.remove("hidden");
            this._targetEl.setAttribute("aria-modal", "true");
            this._targetEl.setAttribute("role", "dialog");
            this._targetEl.removeAttribute("aria-hidden");
            this._createBackdrop();
            this._isHidden = false;
            // prevent body scroll
            document.body.classList.add("overflow-hidden");
            // Add keyboard event listener to the document
            if (this._options.closable) this._setupModalCloseEventListeners();
            // callback function
            this._options.onShow(this);
        }
    };
    Modal.prototype.hide = function() {
        if (this.isVisible) {
            this._targetEl.classList.add("hidden");
            this._targetEl.classList.remove("flex");
            this._targetEl.setAttribute("aria-hidden", "true");
            this._targetEl.removeAttribute("aria-modal");
            this._targetEl.removeAttribute("role");
            this._destroyBackdropEl();
            this._isHidden = true;
            // re-apply body scroll
            document.body.classList.remove("overflow-hidden");
            if (this._options.closable) this._removeModalCloseEventListeners();
            // callback function
            this._options.onHide(this);
        }
    };
    Modal.prototype.isVisible = function() {
        return !this._isHidden;
    };
    Modal.prototype.isHidden = function() {
        return this._isHidden;
    };
    return Modal;
}();
var getModalInstance = function(id, instances) {
    if (instances.some(function(modalInstance) {
        return modalInstance.id === id;
    })) return instances.find(function(modalInstance) {
        return modalInstance.id === id;
    });
    return null;
};
function initModals() {
    var modalInstances = [];
    // initiate modal based on data-modal-target
    document.querySelectorAll("[data-modal-target]").forEach(function($triggerEl) {
        var modalId = $triggerEl.getAttribute("data-modal-target");
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var placement = $modalEl.getAttribute("data-modal-placement");
            var backdrop = $modalEl.getAttribute("data-modal-backdrop");
            if (!getModalInstance(modalId, modalInstances)) modalInstances.push({
                id: modalId,
                object: new Modal($modalEl, {
                    placement: placement ? placement : Default.placement,
                    backdrop: backdrop ? backdrop : Default.backdrop
                })
            });
        } else console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."));
    });
    // support pre v1.6.0 data-modal-toggle initialization
    document.querySelectorAll("[data-modal-toggle]").forEach(function($triggerEl) {
        var modalId = $triggerEl.getAttribute("data-modal-toggle");
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var placement = $modalEl.getAttribute("data-modal-placement");
            var backdrop = $modalEl.getAttribute("data-modal-backdrop");
            var modal_1 = getModalInstance(modalId, modalInstances);
            if (!modal_1) {
                modal_1 = {
                    id: modalId,
                    object: new Modal($modalEl, {
                        placement: placement ? placement : Default.placement,
                        backdrop: backdrop ? backdrop : Default.backdrop
                    })
                };
                modalInstances.push(modal_1);
            }
            $triggerEl.addEventListener("click", function() {
                modal_1.object.toggle();
            });
        } else console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"));
    });
    // show modal on click if exists based on id
    document.querySelectorAll("[data-modal-show]").forEach(function($triggerEl) {
        var modalId = $triggerEl.getAttribute("data-modal-show");
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var modal_2 = getModalInstance(modalId, modalInstances);
            if (modal_2) $triggerEl.addEventListener("click", function() {
                if (modal_2.object.isHidden) modal_2.object.show();
            });
            else console.error("Modal with id ".concat(modalId, " has not been initialized. Please initialize it using the data-modal-target attribute."));
        } else console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"));
    });
    // hide modal on click if exists based on id
    document.querySelectorAll("[data-modal-hide]").forEach(function($triggerEl) {
        var modalId = $triggerEl.getAttribute("data-modal-hide");
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var modal_3 = getModalInstance(modalId, modalInstances);
            if (modal_3) $triggerEl.addEventListener("click", function() {
                if (modal_3.object.isVisible) modal_3.object.hide();
            });
            else console.error("Modal with id ".concat(modalId, " has not been initialized. Please initialize it using the data-modal-target attribute."));
        } else console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"));
    });
}
if (typeof window !== "undefined") {
    window.Modal = Modal;
    window.initModals = initModals;
}
exports.default = Modal;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8JgkV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initDrawers", ()=>initDrawers);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    placement: "left",
    bodyScrolling: false,
    backdrop: true,
    edge: false,
    edgeOffset: "bottom-[60px]",
    backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30",
    onShow: function() {},
    onHide: function() {},
    onToggle: function() {}
};
var Drawer = /** @class */ function() {
    function Drawer(targetEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Drawer.prototype._init = function() {
        var _this = this;
        // set initial accessibility attributes
        if (this._targetEl) {
            this._targetEl.setAttribute("aria-hidden", "true");
            this._targetEl.classList.add("transition-transform");
        }
        // set base placement classes
        this._getPlacementClasses(this._options.placement).base.map(function(c) {
            _this._targetEl.classList.add(c);
        });
        // add keyboard event listener to document
        document.addEventListener("keydown", function(event) {
            if (event.key === "Escape") // if 'Escape' key is pressed
            {
                if (_this.isVisible()) // if the Drawer is visible
                _this.hide(); // hide the Drawer
            }
        });
    };
    Drawer.prototype.hide = function() {
        var _this = this;
        // based on the edge option show placement classes
        if (this._options.edge) {
            this._getPlacementClasses(this._options.placement + "-edge").active.map(function(c) {
                _this._targetEl.classList.remove(c);
            });
            this._getPlacementClasses(this._options.placement + "-edge").inactive.map(function(c) {
                _this._targetEl.classList.add(c);
            });
        } else {
            this._getPlacementClasses(this._options.placement).active.map(function(c) {
                _this._targetEl.classList.remove(c);
            });
            this._getPlacementClasses(this._options.placement).inactive.map(function(c) {
                _this._targetEl.classList.add(c);
            });
        }
        // set accessibility attributes
        this._targetEl.setAttribute("aria-hidden", "true");
        this._targetEl.removeAttribute("aria-modal");
        this._targetEl.removeAttribute("role");
        // enable body scroll
        if (!this._options.bodyScrolling) document.body.classList.remove("overflow-hidden");
        // destroy backdrop
        if (this._options.backdrop) this._destroyBackdropEl();
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    Drawer.prototype.show = function() {
        var _this = this;
        if (this._options.edge) {
            this._getPlacementClasses(this._options.placement + "-edge").active.map(function(c) {
                _this._targetEl.classList.add(c);
            });
            this._getPlacementClasses(this._options.placement + "-edge").inactive.map(function(c) {
                _this._targetEl.classList.remove(c);
            });
        } else {
            this._getPlacementClasses(this._options.placement).active.map(function(c) {
                _this._targetEl.classList.add(c);
            });
            this._getPlacementClasses(this._options.placement).inactive.map(function(c) {
                _this._targetEl.classList.remove(c);
            });
        }
        // set accessibility attributes
        this._targetEl.setAttribute("aria-modal", "true");
        this._targetEl.setAttribute("role", "dialog");
        this._targetEl.removeAttribute("aria-hidden");
        // disable body scroll
        if (!this._options.bodyScrolling) document.body.classList.add("overflow-hidden");
        // show backdrop
        if (this._options.backdrop) this._createBackdrop();
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Drawer.prototype.toggle = function() {
        if (this.isVisible()) this.hide();
        else this.show();
    };
    Drawer.prototype._createBackdrop = function() {
        var _a;
        var _this = this;
        if (!this._visible) {
            var backdropEl = document.createElement("div");
            backdropEl.setAttribute("drawer-backdrop", "");
            (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(" "));
            document.querySelector("body").append(backdropEl);
            backdropEl.addEventListener("click", function() {
                _this.hide();
            });
        }
    };
    Drawer.prototype._destroyBackdropEl = function() {
        if (this._visible) document.querySelector("[drawer-backdrop]").remove();
    };
    Drawer.prototype._getPlacementClasses = function(placement) {
        switch(placement){
            case "top":
                return {
                    base: [
                        "top-0",
                        "left-0",
                        "right-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "-translate-y-full"
                    ]
                };
            case "right":
                return {
                    base: [
                        "right-0",
                        "top-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "translate-x-full"
                    ]
                };
            case "bottom":
                return {
                    base: [
                        "bottom-0",
                        "left-0",
                        "right-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "translate-y-full"
                    ]
                };
            case "left":
                return {
                    base: [
                        "left-0",
                        "top-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "-translate-x-full"
                    ]
                };
            case "bottom-edge":
                return {
                    base: [
                        "left-0",
                        "top-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "translate-y-full",
                        this._options.edgeOffset
                    ]
                };
            default:
                return {
                    base: [
                        "left-0",
                        "top-0"
                    ],
                    active: [
                        "transform-none"
                    ],
                    inactive: [
                        "-translate-x-full"
                    ]
                };
        }
    };
    Drawer.prototype.isHidden = function() {
        return !this._visible;
    };
    Drawer.prototype.isVisible = function() {
        return this._visible;
    };
    return Drawer;
}();
var getDrawerInstance = function(id, instances) {
    if (instances.some(function(drawerInstance) {
        return drawerInstance.id === id;
    })) return instances.find(function(drawerInstance) {
        return drawerInstance.id === id;
    });
};
function initDrawers() {
    var drawerInstances = [];
    document.querySelectorAll("[data-drawer-target]").forEach(function($triggerEl) {
        // mandatory
        var drawerId = $triggerEl.getAttribute("data-drawer-target");
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            // optional
            var placement = $triggerEl.getAttribute("data-drawer-placement");
            var bodyScrolling = $triggerEl.getAttribute("data-drawer-body-scrolling");
            var backdrop = $triggerEl.getAttribute("data-drawer-backdrop");
            var edge = $triggerEl.getAttribute("data-drawer-edge");
            var edgeOffset = $triggerEl.getAttribute("data-drawer-edge-offset");
            if (!getDrawerInstance(drawerId, drawerInstances)) drawerInstances.push({
                id: drawerId,
                object: new Drawer($drawerEl, {
                    placement: placement ? placement : Default.placement,
                    bodyScrolling: bodyScrolling ? bodyScrolling === "true" ? true : false : Default.bodyScrolling,
                    backdrop: backdrop ? backdrop === "true" ? true : false : Default.backdrop,
                    edge: edge ? edge === "true" ? true : false : Default.edge,
                    edgeOffset: edgeOffset ? edgeOffset : Default.edgeOffset
                })
            });
        } else console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
    });
    document.querySelectorAll("[data-drawer-toggle]").forEach(function($triggerEl) {
        var drawerId = $triggerEl.getAttribute("data-drawer-toggle");
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_1 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_1) $triggerEl.addEventListener("click", function() {
                drawer_1.object.toggle();
            });
            else console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
        } else console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
    });
    document.querySelectorAll("[data-drawer-dismiss], [data-drawer-hide]").forEach(function($triggerEl) {
        var drawerId = $triggerEl.getAttribute("data-drawer-dismiss") ? $triggerEl.getAttribute("data-drawer-dismiss") : $triggerEl.getAttribute("data-drawer-hide");
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_2 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_2) $triggerEl.addEventListener("click", function() {
                drawer_2.object.hide();
            });
            else console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
        } else console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"));
    });
    document.querySelectorAll("[data-drawer-show]").forEach(function($triggerEl) {
        var drawerId = $triggerEl.getAttribute("data-drawer-show");
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_3 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_3) $triggerEl.addEventListener("click", function() {
                drawer_3.object.show();
            });
            else console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
        } else console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
    });
}
if (typeof window !== "undefined") {
    window.Drawer = Drawer;
    window.initDrawers = initDrawers;
}
exports.default = Drawer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"9Np50":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initTabs", ()=>initTabs);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    defaultTabId: null,
    activeClasses: "text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500",
    inactiveClasses: "dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300",
    onShow: function() {}
};
var Tabs = /** @class */ function() {
    function Tabs(items, options) {
        if (items === void 0) items = [];
        if (options === void 0) options = Default;
        this._items = items;
        this._activeTab = options ? this.getTab(options.defaultTabId) : null;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Tabs.prototype._init = function() {
        var _this = this;
        if (this._items.length) {
            // set the first tab as active if not set by explicitly
            if (!this._activeTab) this._setActiveTab(this._items[0]);
            // force show the first default tab
            this.show(this._activeTab.id, true);
            // show tab content based on click
            this._items.map(function(tab) {
                tab.triggerEl.addEventListener("click", function() {
                    _this.show(tab.id);
                });
            });
        }
    };
    Tabs.prototype.getActiveTab = function() {
        return this._activeTab;
    };
    Tabs.prototype._setActiveTab = function(tab) {
        this._activeTab = tab;
    };
    Tabs.prototype.getTab = function(id) {
        return this._items.filter(function(t) {
            return t.id === id;
        })[0];
    };
    Tabs.prototype.show = function(id, forceShow) {
        var _a, _b;
        var _this = this;
        if (forceShow === void 0) forceShow = false;
        var tab = this.getTab(id);
        // don't do anything if already active
        if (tab === this._activeTab && !forceShow) return;
        // hide other tabs
        this._items.map(function(t) {
            var _a, _b;
            if (t !== tab) {
                (_a = t.triggerEl.classList).remove.apply(_a, _this._options.activeClasses.split(" "));
                (_b = t.triggerEl.classList).add.apply(_b, _this._options.inactiveClasses.split(" "));
                t.targetEl.classList.add("hidden");
                t.triggerEl.setAttribute("aria-selected", "false");
            }
        });
        // show active tab
        (_a = tab.triggerEl.classList).add.apply(_a, this._options.activeClasses.split(" "));
        (_b = tab.triggerEl.classList).remove.apply(_b, this._options.inactiveClasses.split(" "));
        tab.triggerEl.setAttribute("aria-selected", "true");
        tab.targetEl.classList.remove("hidden");
        this._setActiveTab(tab);
        // callback function
        this._options.onShow(this, tab);
    };
    return Tabs;
}();
function initTabs() {
    document.querySelectorAll("[data-tabs-toggle]").forEach(function($triggerEl) {
        var tabItems = [];
        var defaultTabId = null;
        $triggerEl.querySelectorAll('[role="tab"]').forEach(function($triggerEl) {
            var isActive = $triggerEl.getAttribute("aria-selected") === "true";
            var tab = {
                id: $triggerEl.getAttribute("data-tabs-target"),
                triggerEl: $triggerEl,
                targetEl: document.querySelector($triggerEl.getAttribute("data-tabs-target"))
            };
            tabItems.push(tab);
            if (isActive) defaultTabId = tab.id;
        });
        new Tabs(tabItems, {
            defaultTabId: defaultTabId
        });
    });
}
if (typeof window !== "undefined") {
    window.Tabs = Tabs;
    window.initTabs = initTabs;
}
exports.default = Tabs;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jybLi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initTooltips", ()=>initTooltips);
/* eslint-disable @typescript-eslint/no-empty-function */ var _core = require("@popperjs/core");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var Default = {
    placement: "top",
    triggerType: "hover",
    onShow: function() {},
    onHide: function() {},
    onToggle: function() {}
};
var Tooltip = /** @class */ function() {
    function Tooltip(targetEl, triggerEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (triggerEl === void 0) triggerEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Tooltip.prototype._init = function() {
        if (this._triggerEl) this._setupEventListeners();
    };
    Tooltip.prototype._setupEventListeners = function() {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        triggerEvents.showEvents.forEach(function(ev) {
            _this._triggerEl.addEventListener(ev, function() {
                _this.show();
            });
        });
        triggerEvents.hideEvents.forEach(function(ev) {
            _this._triggerEl.addEventListener(ev, function() {
                _this.hide();
            });
        });
    };
    Tooltip.prototype._createPopperInstance = function() {
        return (0, _core.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: "offset",
                    options: {
                        offset: [
                            0,
                            8
                        ]
                    }
                }
            ]
        });
    };
    Tooltip.prototype._getTriggerEvents = function() {
        switch(this._options.triggerType){
            case "hover":
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
            case "click":
                return {
                    showEvents: [
                        "click",
                        "focus"
                    ],
                    hideEvents: [
                        "focusout",
                        "blur"
                    ]
                };
            case "none":
                return {
                    showEvents: [],
                    hideEvents: []
                };
            default:
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
        }
    };
    Tooltip.prototype._setupKeydownListener = function() {
        var _this = this;
        this._keydownEventListener = function(ev) {
            if (ev.key === "Escape") _this.hide();
        };
        document.body.addEventListener("keydown", this._keydownEventListener, true);
    };
    Tooltip.prototype._removeKeydownListener = function() {
        document.body.removeEventListener("keydown", this._keydownEventListener, true);
    };
    Tooltip.prototype._setupClickOutsideListener = function() {
        var _this = this;
        this._clickOutsideEventListener = function(ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener("click", this._clickOutsideEventListener, true);
    };
    Tooltip.prototype._removeClickOutsideListener = function() {
        document.body.removeEventListener("click", this._clickOutsideEventListener, true);
    };
    Tooltip.prototype._handleClickOutside = function(ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl && !targetEl.contains(clickedEl) && !this._triggerEl.contains(clickedEl) && this.isVisible()) this.hide();
    };
    Tooltip.prototype.isVisible = function() {
        return this._visible;
    };
    Tooltip.prototype.toggle = function() {
        if (this.isVisible()) this.hide();
        else this.show();
    };
    Tooltip.prototype.show = function() {
        this._targetEl.classList.remove("opacity-0", "invisible");
        this._targetEl.classList.add("opacity-100", "visible");
        // Enable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: true
                    }
                ], false)
            });
        });
        // handle click outside
        this._setupClickOutsideListener();
        // handle esc keydown
        this._setupKeydownListener();
        // Update its position
        this._popperInstance.update();
        // set visibility
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Tooltip.prototype.hide = function() {
        this._targetEl.classList.remove("opacity-100", "visible");
        this._targetEl.classList.add("opacity-0", "invisible");
        // Disable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: false
                    }
                ], false)
            });
        });
        // handle click outside
        this._removeClickOutsideListener();
        // handle esc keydown
        this._removeKeydownListener();
        // set visibility
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    return Tooltip;
}();
function initTooltips() {
    document.querySelectorAll("[data-tooltip-target]").forEach(function($triggerEl) {
        var tooltipId = $triggerEl.getAttribute("data-tooltip-target");
        var $tooltipEl = document.getElementById(tooltipId);
        if ($tooltipEl) {
            var triggerType = $triggerEl.getAttribute("data-tooltip-trigger");
            var placement = $triggerEl.getAttribute("data-tooltip-placement");
            new Tooltip($tooltipEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                triggerType: triggerType ? triggerType : Default.triggerType
            });
        } else console.error('The tooltip element with id "'.concat(tooltipId, '" does not exist. Please check the data-tooltip-target attribute.'));
    });
}
if (typeof window !== "undefined") {
    window.Tooltip = Tooltip;
    window.initTooltips = initTooltips;
}
exports.default = Tooltip;

},{"@popperjs/core":"lFlK4","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"aSpDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initPopovers", ()=>initPopovers);
/* eslint-disable @typescript-eslint/no-empty-function */ var _core = require("@popperjs/core");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var Default = {
    placement: "top",
    offset: 10,
    triggerType: "hover",
    onShow: function() {},
    onHide: function() {},
    onToggle: function() {}
};
var Popover = /** @class */ function() {
    function Popover(targetEl, triggerEl, options) {
        if (targetEl === void 0) targetEl = null;
        if (triggerEl === void 0) triggerEl = null;
        if (options === void 0) options = Default;
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Popover.prototype._init = function() {
        if (this._triggerEl) this._setupEventListeners();
    };
    Popover.prototype._setupEventListeners = function() {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        triggerEvents.showEvents.forEach(function(ev) {
            _this._triggerEl.addEventListener(ev, function() {
                _this.show();
            });
            _this._targetEl.addEventListener(ev, function() {
                _this.show();
            });
        });
        triggerEvents.hideEvents.forEach(function(ev) {
            _this._triggerEl.addEventListener(ev, function() {
                setTimeout(function() {
                    if (!_this._targetEl.matches(":hover")) _this.hide();
                }, 100);
            });
            _this._targetEl.addEventListener(ev, function() {
                setTimeout(function() {
                    if (!_this._triggerEl.matches(":hover")) _this.hide();
                }, 100);
            });
        });
    };
    Popover.prototype._createPopperInstance = function() {
        return (0, _core.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: "offset",
                    options: {
                        offset: [
                            0,
                            this._options.offset
                        ]
                    }
                }
            ]
        });
    };
    Popover.prototype._getTriggerEvents = function() {
        switch(this._options.triggerType){
            case "hover":
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
            case "click":
                return {
                    showEvents: [
                        "click",
                        "focus"
                    ],
                    hideEvents: [
                        "focusout",
                        "blur"
                    ]
                };
            case "none":
                return {
                    showEvents: [],
                    hideEvents: []
                };
            default:
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
        }
    };
    Popover.prototype._setupKeydownListener = function() {
        var _this = this;
        this._keydownEventListener = function(ev) {
            if (ev.key === "Escape") _this.hide();
        };
        document.body.addEventListener("keydown", this._keydownEventListener, true);
    };
    Popover.prototype._removeKeydownListener = function() {
        document.body.removeEventListener("keydown", this._keydownEventListener, true);
    };
    Popover.prototype._setupClickOutsideListener = function() {
        var _this = this;
        this._clickOutsideEventListener = function(ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener("click", this._clickOutsideEventListener, true);
    };
    Popover.prototype._removeClickOutsideListener = function() {
        document.body.removeEventListener("click", this._clickOutsideEventListener, true);
    };
    Popover.prototype._handleClickOutside = function(ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl && !targetEl.contains(clickedEl) && !this._triggerEl.contains(clickedEl) && this.isVisible()) this.hide();
    };
    Popover.prototype.isVisible = function() {
        return this._visible;
    };
    Popover.prototype.toggle = function() {
        if (this.isVisible()) this.hide();
        else this.show();
        this._options.onToggle(this);
    };
    Popover.prototype.show = function() {
        this._targetEl.classList.remove("opacity-0", "invisible");
        this._targetEl.classList.add("opacity-100", "visible");
        // Enable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: true
                    }
                ], false)
            });
        });
        // handle click outside
        this._setupClickOutsideListener();
        // handle esc keydown
        this._setupKeydownListener();
        // Update its position
        this._popperInstance.update();
        // set visibility to true
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Popover.prototype.hide = function() {
        this._targetEl.classList.remove("opacity-100", "visible");
        this._targetEl.classList.add("opacity-0", "invisible");
        // Disable the event listeners
        this._popperInstance.setOptions(function(options) {
            return __assign(__assign({}, options), {
                modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                    {
                        name: "eventListeners",
                        enabled: false
                    }
                ], false)
            });
        });
        // handle click outside
        this._removeClickOutsideListener();
        // handle esc keydown
        this._removeKeydownListener();
        // set visibility to false
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    return Popover;
}();
function initPopovers() {
    document.querySelectorAll("[data-popover-target]").forEach(function($triggerEl) {
        var popoverID = $triggerEl.getAttribute("data-popover-target");
        var $popoverEl = document.getElementById(popoverID);
        if ($popoverEl) {
            var triggerType = $triggerEl.getAttribute("data-popover-trigger");
            var placement = $triggerEl.getAttribute("data-popover-placement");
            var offset = $triggerEl.getAttribute("data-popover-offset");
            new Popover($popoverEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                offset: offset ? parseInt(offset) : Default.offset,
                triggerType: triggerType ? triggerType : Default.triggerType
            });
        } else console.error('The popover element with id "'.concat(popoverID, '" does not exist. Please check the data-popover-target attribute.'));
    });
}
if (typeof window !== "undefined") {
    window.Popover = Popover;
    window.initPopovers = initPopovers;
}
exports.default = Popover;

},{"@popperjs/core":"lFlK4","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jqHMi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initDials", ()=>initDials);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    triggerType: "hover",
    onShow: function() {},
    onHide: function() {},
    onToggle: function() {}
};
var Dial = /** @class */ function() {
    function Dial(parentEl, triggerEl, targetEl, options) {
        if (parentEl === void 0) parentEl = null;
        if (triggerEl === void 0) triggerEl = null;
        if (targetEl === void 0) targetEl = null;
        if (options === void 0) options = Default;
        this._parentEl = parentEl;
        this._triggerEl = triggerEl;
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Dial.prototype._init = function() {
        var _this = this;
        if (this._triggerEl) {
            var triggerEventTypes = this._getTriggerEventTypes(this._options.triggerType);
            triggerEventTypes.showEvents.forEach(function(ev) {
                _this._triggerEl.addEventListener(ev, function() {
                    _this.show();
                });
                _this._targetEl.addEventListener(ev, function() {
                    _this.show();
                });
            });
            triggerEventTypes.hideEvents.forEach(function(ev) {
                _this._parentEl.addEventListener(ev, function() {
                    if (!_this._parentEl.matches(":hover")) _this.hide();
                });
            });
        }
    };
    Dial.prototype.hide = function() {
        this._targetEl.classList.add("hidden");
        if (this._triggerEl) this._triggerEl.setAttribute("aria-expanded", "false");
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    Dial.prototype.show = function() {
        this._targetEl.classList.remove("hidden");
        if (this._triggerEl) this._triggerEl.setAttribute("aria-expanded", "true");
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Dial.prototype.toggle = function() {
        if (this._visible) this.hide();
        else this.show();
    };
    Dial.prototype.isHidden = function() {
        return !this._visible;
    };
    Dial.prototype.isVisible = function() {
        return this._visible;
    };
    Dial.prototype._getTriggerEventTypes = function(triggerType) {
        switch(triggerType){
            case "hover":
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
            case "click":
                return {
                    showEvents: [
                        "click",
                        "focus"
                    ],
                    hideEvents: [
                        "focusout",
                        "blur"
                    ]
                };
            case "none":
                return {
                    showEvents: [],
                    hideEvents: []
                };
            default:
                return {
                    showEvents: [
                        "mouseenter",
                        "focus"
                    ],
                    hideEvents: [
                        "mouseleave",
                        "blur"
                    ]
                };
        }
    };
    return Dial;
}();
function initDials() {
    document.querySelectorAll("[data-dial-init]").forEach(function($parentEl) {
        var $triggerEl = $parentEl.querySelector("[data-dial-toggle]");
        if ($triggerEl) {
            var dialId = $triggerEl.getAttribute("data-dial-toggle");
            var $dialEl = document.getElementById(dialId);
            if ($dialEl) {
                var triggerType = $triggerEl.getAttribute("data-dial-trigger");
                new Dial($parentEl, $triggerEl, $dialEl, {
                    triggerType: triggerType ? triggerType : Default.triggerType
                });
            } else console.error("Dial with id ".concat(dialId, " does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"));
        } else console.error("Dial with id ".concat($parentEl.id, " does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"));
    });
}
if (typeof window !== "undefined") {
    window.Dial = Dial;
    window.initDials = initDials;
}
exports.default = Dial;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"e1lN4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initFlowbite", ()=>initFlowbite);
var _accordion = require("./accordion");
var _carousel = require("./carousel");
var _collapse = require("./collapse");
var _dial = require("./dial");
var _dismiss = require("./dismiss");
var _drawer = require("./drawer");
var _dropdown = require("./dropdown");
var _modal = require("./modal");
var _popover = require("./popover");
var _tabs = require("./tabs");
var _tooltip = require("./tooltip");
function initFlowbite() {
    (0, _accordion.initAccordions)();
    (0, _collapse.initCollapses)();
    (0, _carousel.initCarousels)();
    (0, _dismiss.initDismisses)();
    (0, _dropdown.initDropdowns)();
    (0, _modal.initModals)();
    (0, _drawer.initDrawers)();
    (0, _tabs.initTabs)();
    (0, _tooltip.initTooltips)();
    (0, _popover.initPopovers)();
    (0, _dial.initDials)();
}
if (typeof window !== "undefined") window.initFlowbite = initFlowbite;

},{"./accordion":"2CNqL","./carousel":"fy26w","./collapse":"3vSzG","./dial":"jqHMi","./dismiss":"jALxc","./drawer":"8JgkV","./dropdown":"9nap2","./modal":"dIXxU","./popover":"aSpDZ","./tabs":"9Np50","./tooltip":"jybLi","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"koEtZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2UDke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"anZXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"1Y2V0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fbrre":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"dOpdB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"1V8Q8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jFLqe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fII6Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"gEGdY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"QSYSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"feNq0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"krxyc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"cV931":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"769mY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"h6sQP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"dMiO9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"PvLWe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"dJHmb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ct0jX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"44PA7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"k1yJX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"h2YSr":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "login", ()=>login);
parcelHelpers.export(exports, "register", ()=>register);
parcelHelpers.export(exports, "logout", ()=>logout);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const login = async (email, password)=>{
    (0, _loader.showLoader)();
    try {
        const res = await (0, _axiosDefault.default)({
            method: "POST",
            url: "/api/v1/users/login",
            data: {
                email,
                password
            }
        });
        if (res.data.status === "success") {
            (0, _loader.hideLoader)();
            window.setTimeout(()=>{
                location.assign("/");
            }, 1000);
        }
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const register = async (name, email, password, passwordConfirm)=>{
    (0, _loader.showLoader)();
    try {
        const res = await (0, _axiosDefault.default)({
            method: "POST",
            url: "/api/v1/users/signup",
            data: {
                name,
                email,
                password,
                passwordConfirm
            }
        });
        if (res.data.status === "success") {
            (0, _loader.hideLoader)();
            window.setTimeout(()=>{
                location.assign("/");
            }, 1000);
        }
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const logout = async ()=>{
    (0, _loader.showLoader)();
    try {
        const res = await (0, _axiosDefault.default)({
            method: "GET",
            url: "/api/v1/users/logout"
        });
        if (res.data.status === "success") window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.assign("/");
        }, 1500);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", "There are some error, try again!");
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"b8NqA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _axiosJsDefault.default));
parcelHelpers.export(exports, "Axios", ()=>Axios);
parcelHelpers.export(exports, "AxiosError", ()=>AxiosError);
parcelHelpers.export(exports, "CanceledError", ()=>CanceledError);
parcelHelpers.export(exports, "isCancel", ()=>isCancel);
parcelHelpers.export(exports, "CancelToken", ()=>CancelToken);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
parcelHelpers.export(exports, "all", ()=>all);
parcelHelpers.export(exports, "Cancel", ()=>Cancel);
parcelHelpers.export(exports, "isAxiosError", ()=>isAxiosError);
parcelHelpers.export(exports, "spread", ()=>spread);
parcelHelpers.export(exports, "toFormData", ()=>toFormData);
parcelHelpers.export(exports, "AxiosHeaders", ()=>AxiosHeaders);
parcelHelpers.export(exports, "HttpStatusCode", ()=>HttpStatusCode);
parcelHelpers.export(exports, "formToJSON", ()=>formToJSON);
parcelHelpers.export(exports, "mergeConfig", ()=>mergeConfig);
var _axiosJs = require("./lib/axios.js");
var _axiosJsDefault = parcelHelpers.interopDefault(_axiosJs);
// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const { Axios, AxiosError, CanceledError, isCancel, CancelToken, VERSION, all, Cancel, isAxiosError, spread, toFormData, AxiosHeaders, HttpStatusCode, formToJSON, mergeConfig } = (0, _axiosJsDefault.default);

},{"./lib/axios.js":"lCawx","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lCawx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _bindJs = require("./helpers/bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var _axiosJs = require("./core/Axios.js");
var _axiosJsDefault = parcelHelpers.interopDefault(_axiosJs);
var _mergeConfigJs = require("./core/mergeConfig.js");
var _mergeConfigJsDefault = parcelHelpers.interopDefault(_mergeConfigJs);
var _indexJs = require("./defaults/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _formDataToJSONJs = require("./helpers/formDataToJSON.js");
var _formDataToJSONJsDefault = parcelHelpers.interopDefault(_formDataToJSONJs);
var _canceledErrorJs = require("./cancel/CanceledError.js");
var _canceledErrorJsDefault = parcelHelpers.interopDefault(_canceledErrorJs);
var _cancelTokenJs = require("./cancel/CancelToken.js");
var _cancelTokenJsDefault = parcelHelpers.interopDefault(_cancelTokenJs);
var _isCancelJs = require("./cancel/isCancel.js");
var _isCancelJsDefault = parcelHelpers.interopDefault(_isCancelJs);
var _dataJs = require("./env/data.js");
var _toFormDataJs = require("./helpers/toFormData.js");
var _toFormDataJsDefault = parcelHelpers.interopDefault(_toFormDataJs);
var _axiosErrorJs = require("./core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
var _spreadJs = require("./helpers/spread.js");
var _spreadJsDefault = parcelHelpers.interopDefault(_spreadJs);
var _isAxiosErrorJs = require("./helpers/isAxiosError.js");
var _isAxiosErrorJsDefault = parcelHelpers.interopDefault(_isAxiosErrorJs);
var _axiosHeadersJs = require("./core/AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
var _httpStatusCodeJs = require("./helpers/HttpStatusCode.js");
var _httpStatusCodeJsDefault = parcelHelpers.interopDefault(_httpStatusCodeJs);
"use strict";
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    const context = new (0, _axiosJsDefault.default)(defaultConfig);
    const instance = (0, _bindJsDefault.default)((0, _axiosJsDefault.default).prototype.request, context);
    // Copy axios.prototype to instance
    (0, _utilsJsDefault.default).extend(instance, (0, _axiosJsDefault.default).prototype, context, {
        allOwnKeys: true
    });
    // Copy context to instance
    (0, _utilsJsDefault.default).extend(instance, context, null, {
        allOwnKeys: true
    });
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance((0, _mergeConfigJsDefault.default)(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
const axios = createInstance((0, _indexJsDefault.default));
// Expose Axios class to allow class inheritance
axios.Axios = (0, _axiosJsDefault.default);
// Expose Cancel & CancelToken
axios.CanceledError = (0, _canceledErrorJsDefault.default);
axios.CancelToken = (0, _cancelTokenJsDefault.default);
axios.isCancel = (0, _isCancelJsDefault.default);
axios.VERSION = (0, _dataJs.VERSION);
axios.toFormData = (0, _toFormDataJsDefault.default);
// Expose AxiosError class
axios.AxiosError = (0, _axiosErrorJsDefault.default);
// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = (0, _spreadJsDefault.default);
// Expose isAxiosError
axios.isAxiosError = (0, _isAxiosErrorJsDefault.default);
// Expose mergeConfig
axios.mergeConfig = (0, _mergeConfigJsDefault.default);
axios.AxiosHeaders = (0, _axiosHeadersJsDefault.default);
axios.formToJSON = (thing)=>(0, _formDataToJSONJsDefault.default)((0, _utilsJsDefault.default).isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = (0, _httpStatusCodeJsDefault.default);
axios.default = axios;
// this module should only have a default export
exports.default = axios;

},{"./utils.js":"97GNE","./helpers/bind.js":"kRJe5","./core/Axios.js":"h4ktB","./core/mergeConfig.js":"grmk8","./defaults/index.js":"fD9ox","./helpers/formDataToJSON.js":"8VpbC","./cancel/CanceledError.js":"272jL","./cancel/CancelToken.js":"xAtcO","./cancel/isCancel.js":"hkf4u","./env/data.js":"lytzO","./helpers/toFormData.js":"fcufw","./core/AxiosError.js":"2AS0c","./helpers/spread.js":"a9JaR","./helpers/isAxiosError.js":"hXnIM","./core/AxiosHeaders.js":"7iEMY","./helpers/HttpStatusCode.js":"g6L48","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"97GNE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bindJs = require("./helpers/bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var global = arguments[3];
"use strict";
// utils is a library of generic helper functions non-specific to axios
const { toString } = Object.prototype;
const { getPrototypeOf } = Object;
const kindOf = ((cache)=>(thing)=>{
        const str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));
const kindOfTest = (type)=>{
    type = type.toLowerCase();
    return (thing)=>kindOf(thing) === type;
};
const typeOfTest = (type)=>(thing)=>typeof thing === type;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */ const { isArray } = Array;
/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */ const isUndefined = typeOfTest("undefined");
/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ const isArrayBuffer = kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */ const isString = typeOfTest("string");
/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ const isFunction = typeOfTest("function");
/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */ const isNumber = typeOfTest("number");
/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */ const isObject = (thing)=>thing !== null && typeof thing === "object";
/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */ const isBoolean = (thing)=>thing === true || thing === false;
/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */ const isPlainObject = (val)=>{
    if (kindOf(val) !== "object") return false;
    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */ const isDate = kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const isFile = kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */ const isBlob = kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const isFileList = kindOfTest("FileList");
/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */ const isStream = (val)=>isObject(val) && isFunction(val.pipe);
/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */ const isFormData = (thing)=>{
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ const isURLSearchParams = kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */ const trim = (str)=>str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */ function forEach(obj, fn, { allOwnKeys = false } = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    let i;
    let l;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for(i = 0; i < len; i++){
            key = keys[i];
            fn.call(null, obj[key], key, obj);
        }
    }
}
function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while(i-- > 0){
        _key = keys[i];
        if (key === _key.toLowerCase()) return _key;
    }
    return null;
}
const _global = (()=>{
    /*eslint no-undef:0*/ if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context)=>!isUndefined(context) && context !== _global;
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */ function merge() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key)=>{
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) result[targetKey] = merge(result[targetKey], val);
        else if (isPlainObject(val)) result[targetKey] = merge({}, val);
        else if (isArray(val)) result[targetKey] = val.slice();
        else result[targetKey] = val;
    };
    for(let i = 0, l = arguments.length; i < l; i++)arguments[i] && forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */ const extend = (a, b, thisArg, { allOwnKeys } = {})=>{
    forEach(b, (val, key)=>{
        if (thisArg && isFunction(val)) a[key] = (0, _bindJsDefault.default)(val, thisArg);
        else a[key] = val;
    }, {
        allOwnKeys
    });
    return a;
};
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */ const stripBOM = (content)=>{
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
};
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */ const inherits = (constructor, superConstructor, props, descriptors)=>{
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
};
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */ const toFlatObject = (sourceObj, destObj, filter, propFilter)=>{
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
};
/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */ const endsWith = (str, searchString, position)=>{
    str = String(str);
    if (position === undefined || position > str.length) position = str.length;
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
};
/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */ const toArray = (thing)=>{
    if (!thing) return null;
    if (isArray(thing)) return thing;
    let i = thing.length;
    if (!isNumber(i)) return null;
    const arr = new Array(i);
    while(i-- > 0)arr[i] = thing[i];
    return arr;
};
/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */ // eslint-disable-next-line func-names
const isTypedArray = ((TypedArray)=>{
    // eslint-disable-next-line func-names
    return (thing)=>{
        return TypedArray && thing instanceof TypedArray;
    };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */ const forEachEntry = (obj, fn)=>{
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while((result = iterator.next()) && !result.done){
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
    }
};
/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */ const matchAll = (regExp, str)=>{
    let matches;
    const arr = [];
    while((matches = regExp.exec(str)) !== null)arr.push(matches);
    return arr;
};
/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */ const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str)=>{
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
    });
};
/* Creating a function that will check if an object has a property. */ const hasOwnProperty = (({ hasOwnProperty })=>(obj, prop)=>hasOwnProperty.call(obj, prop))(Object.prototype);
/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */ const isRegExp = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer)=>{
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors, (descriptor, name)=>{
        if (reducer(descriptor, name, obj) !== false) reducedDescriptors[name] = descriptor;
    });
    Object.defineProperties(obj, reducedDescriptors);
};
/**
 * Makes all methods read-only
 * @param {Object} obj
 */ const freezeMethods = (obj)=>{
    reduceDescriptors(obj, (descriptor, name)=>{
        // skip restricted props in strict mode
        if (isFunction(obj) && [
            "arguments",
            "caller",
            "callee"
        ].indexOf(name) !== -1) return false;
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
            descriptor.writable = false;
            return;
        }
        if (!descriptor.set) descriptor.set = ()=>{
            throw Error("Can not rewrite read-only method '" + name + "'");
        };
    });
};
const toObjectSet = (arrayOrString, delimiter)=>{
    const obj = {};
    const define = (arr)=>{
        arr.forEach((value)=>{
            obj[value] = true;
        });
    };
    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
    return obj;
};
const noop = ()=>{};
const toFiniteNumber = (value, defaultValue)=>{
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
};
const ALPHA = "abcdefghijklmnopqrstuvwxyz";
const DIGIT = "0123456789";
const ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT)=>{
    let str = "";
    const { length } = alphabet;
    while(size--)str += alphabet[Math.random() * length | 0];
    return str;
};
/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */ function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const toJSONObject = (obj)=>{
    const stack = new Array(10);
    const visit = (source, i)=>{
        if (isObject(source)) {
            if (stack.indexOf(source) >= 0) return;
            if (!("toJSON" in source)) {
                stack[i] = source;
                const target = isArray(source) ? [] : {};
                forEach(source, (value, key)=>{
                    const reducedValue = visit(value, i + 1);
                    !isUndefined(reducedValue) && (target[key] = reducedValue);
                });
                stack[i] = undefined;
                return target;
            }
        }
        return source;
    };
    return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing)=>thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
exports.default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
};

},{"./helpers/bind.js":"kRJe5","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"kRJe5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>bind);
"use strict";
function bind(fn, thisArg) {
    return function wrap() {
        return fn.apply(thisArg, arguments);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"h4ktB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _buildURLJs = require("../helpers/buildURL.js");
var _buildURLJsDefault = parcelHelpers.interopDefault(_buildURLJs);
var _interceptorManagerJs = require("./InterceptorManager.js");
var _interceptorManagerJsDefault = parcelHelpers.interopDefault(_interceptorManagerJs);
var _dispatchRequestJs = require("./dispatchRequest.js");
var _dispatchRequestJsDefault = parcelHelpers.interopDefault(_dispatchRequestJs);
var _mergeConfigJs = require("./mergeConfig.js");
var _mergeConfigJsDefault = parcelHelpers.interopDefault(_mergeConfigJs);
var _buildFullPathJs = require("./buildFullPath.js");
var _buildFullPathJsDefault = parcelHelpers.interopDefault(_buildFullPathJs);
var _validatorJs = require("../helpers/validator.js");
var _validatorJsDefault = parcelHelpers.interopDefault(_validatorJs);
var _axiosHeadersJs = require("./AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
"use strict";
const validators = (0, _validatorJsDefault.default).validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */ class Axios {
    constructor(instanceConfig){
        this.defaults = instanceConfig;
        this.interceptors = {
            request: new (0, _interceptorManagerJsDefault.default)(),
            response: new (0, _interceptorManagerJsDefault.default)()
        };
    }
    /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */ request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === "string") {
            config = config || {};
            config.url = configOrUrl;
        } else config = configOrUrl || {};
        config = (0, _mergeConfigJsDefault.default)(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== undefined) (0, _validatorJsDefault.default).assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
        if (paramsSerializer != null) {
            if ((0, _utilsJsDefault.default).isFunction(paramsSerializer)) config.paramsSerializer = {
                serialize: paramsSerializer
            };
            else (0, _validatorJsDefault.default).assertOptions(paramsSerializer, {
                encode: validators.function,
                serialize: validators.function
            }, true);
        }
        // Set config.method
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        // Flatten headers
        contextHeaders = headers && (0, _utilsJsDefault.default).merge(headers.common, headers[config.method]);
        contextHeaders && (0, _utilsJsDefault.default).forEach([
            "delete",
            "get",
            "head",
            "post",
            "put",
            "patch",
            "common"
        ], (method)=>{
            delete headers[method];
        });
        config.headers = (0, _axiosHeadersJsDefault.default).concat(contextHeaders, headers);
        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
            const chain = [
                (0, _dispatchRequestJsDefault.default).bind(this),
                undefined
            ];
            chain.unshift.apply(chain, requestInterceptorChain);
            chain.push.apply(chain, responseInterceptorChain);
            len = chain.length;
            promise = Promise.resolve(config);
            while(i < len)promise = promise.then(chain[i++], chain[i++]);
            return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while(i < len){
            const onFulfilled = requestInterceptorChain[i++];
            const onRejected = requestInterceptorChain[i++];
            try {
                newConfig = onFulfilled(newConfig);
            } catch (error) {
                onRejected.call(this, error);
                break;
            }
        }
        try {
            promise = (0, _dispatchRequestJsDefault.default).call(this, newConfig);
        } catch (error) {
            return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while(i < len)promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        return promise;
    }
    getUri(config) {
        config = (0, _mergeConfigJsDefault.default)(this.defaults, config);
        const fullPath = (0, _buildFullPathJsDefault.default)(config.baseURL, config.url);
        return (0, _buildURLJsDefault.default)(fullPath, config.params, config.paramsSerializer);
    }
}
// Provide aliases for supported request methods
(0, _utilsJsDefault.default).forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request((0, _mergeConfigJsDefault.default)(config || {}, {
            method,
            url,
            data: (config || {}).data
        }));
    };
});
(0, _utilsJsDefault.default).forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request((0, _mergeConfigJsDefault.default)(config || {}, {
                method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url,
                data
            }));
        };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
exports.default = Axios;

},{"./../utils.js":"97GNE","../helpers/buildURL.js":"fODla","./InterceptorManager.js":"4SSQj","./dispatchRequest.js":"8AFIa","./mergeConfig.js":"grmk8","./buildFullPath.js":"4vYpw","../helpers/validator.js":"iSP81","./AxiosHeaders.js":"7iEMY","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fODla":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>buildURL);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _axiosURLSearchParamsJs = require("../helpers/AxiosURLSearchParams.js");
var _axiosURLSearchParamsJsDefault = parcelHelpers.interopDefault(_axiosURLSearchParamsJs);
"use strict";
/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */ function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    const _encode = options && options.encode || encode;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) serializedParams = serializeFn(params, options);
    else serializedParams = (0, _utilsJsDefault.default).isURLSearchParams(params) ? params.toString() : new (0, _axiosURLSearchParamsJsDefault.default)(params, options).toString(_encode);
    if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
}

},{"../utils.js":"97GNE","../helpers/AxiosURLSearchParams.js":"lx3A5","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lx3A5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toFormDataJs = require("./toFormData.js");
var _toFormDataJsDefault = parcelHelpers.interopDefault(_toFormDataJs);
"use strict";
/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */ function encode(str) {
    const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\x00"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
    });
}
/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */ function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && (0, _toFormDataJsDefault.default)(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
    this._pairs.push([
        name,
        value
    ]);
};
prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
};
exports.default = AxiosURLSearchParams;

},{"./toFormData.js":"fcufw","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fcufw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored
var _formDataJs = require("../platform/node/classes/FormData.js");
var _formDataJsDefault = parcelHelpers.interopDefault(_formDataJs);
var Buffer = require("adfd9b103875c2dd").Buffer;
"use strict";
/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */ function isVisitable(thing) {
    return (0, _utilsJsDefault.default).isPlainObject(thing) || (0, _utilsJsDefault.default).isArray(thing);
}
/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */ function removeBrackets(key) {
    return (0, _utilsJsDefault.default).endsWith(key, "[]") ? key.slice(0, -2) : key;
}
/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */ function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
}
/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */ function isFlatArray(arr) {
    return (0, _utilsJsDefault.default).isArray(arr) && !arr.some(isVisitable);
}
const predicates = (0, _utilsJsDefault.default).toFlatObject((0, _utilsJsDefault.default), {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
});
/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/ /**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */ function toFormData(obj, formData, options) {
    if (!(0, _utilsJsDefault.default).isObject(obj)) throw new TypeError("target must be an object");
    // eslint-disable-next-line no-param-reassign
    formData = formData || new ((0, _formDataJsDefault.default) || FormData)();
    // eslint-disable-next-line no-param-reassign
    options = (0, _utilsJsDefault.default).toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
    }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !(0, _utilsJsDefault.default).isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && (0, _utilsJsDefault.default).isSpecCompliantForm(formData);
    if (!(0, _utilsJsDefault.default).isFunction(visitor)) throw new TypeError("visitor must be a function");
    function convertValue(value) {
        if (value === null) return "";
        if ((0, _utilsJsDefault.default).isDate(value)) return value.toISOString();
        if (!useBlob && (0, _utilsJsDefault.default).isBlob(value)) throw new (0, _axiosErrorJsDefault.default)("Blob is not supported. Use a Buffer instead.");
        if ((0, _utilsJsDefault.default).isArrayBuffer(value) || (0, _utilsJsDefault.default).isTypedArray(value)) return useBlob && typeof Blob === "function" ? new Blob([
            value
        ]) : Buffer.from(value);
        return value;
    }
    /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */ function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
            if ((0, _utilsJsDefault.default).endsWith(key, "{}")) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
            } else if ((0, _utilsJsDefault.default).isArray(value) && isFlatArray(value) || ((0, _utilsJsDefault.default).isFileList(value) || (0, _utilsJsDefault.default).endsWith(key, "[]")) && (arr = (0, _utilsJsDefault.default).toArray(value))) {
                // eslint-disable-next-line no-param-reassign
                key = removeBrackets(key);
                arr.forEach(function each(el, index) {
                    !((0, _utilsJsDefault.default).isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary
                    indexes === true ? renderKey([
                        key
                    ], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
                });
                return false;
            }
        }
        if (isVisitable(value)) return true;
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
    });
    function build(value, path) {
        if ((0, _utilsJsDefault.default).isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) throw Error("Circular reference detected in " + path.join("."));
        stack.push(value);
        (0, _utilsJsDefault.default).forEach(value, function each(el, key) {
            const result = !((0, _utilsJsDefault.default).isUndefined(el) || el === null) && visitor.call(formData, el, (0, _utilsJsDefault.default).isString(key) ? key.trim() : key, path, exposedHelpers);
            if (result === true) build(el, path ? path.concat(key) : [
                key
            ]);
        });
        stack.pop();
    }
    if (!(0, _utilsJsDefault.default).isObject(obj)) throw new TypeError("data must be an object");
    build(obj);
    return formData;
}
exports.default = toFormData;

},{"adfd9b103875c2dd":"6husy","../utils.js":"97GNE","../core/AxiosError.js":"2AS0c","../platform/node/classes/FormData.js":"b6Ekd","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"6husy":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("9c62938f1dccc73c");
var ieee754 = require("aceacb6a4531a9d2");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"9c62938f1dccc73c":"8lDD1","aceacb6a4531a9d2":"hnEwy"}],"8lDD1":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"hnEwy":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"2AS0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */ function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
    else this.stack = new Error().stack;
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
(0, _utilsJsDefault.default).inherits(AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: (0, _utilsJsDefault.default).toJSONObject(this.config),
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
const prototype = AxiosError.prototype;
const descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
].forEach((code)=>{
    descriptors[code] = {
        value: code
    };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps)=>{
    const axiosError = Object.create(prototype);
    (0, _utilsJsDefault.default).toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    }, (prop)=>{
        return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
exports.default = AxiosError;

},{"../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"b6Ekd":[function(require,module,exports) {
// eslint-disable-next-line strict
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"4SSQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
class InterceptorManager {
    constructor(){
        this.handlers = [];
    }
    /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */ use(fulfilled, rejected, options) {
        this.handlers.push({
            fulfilled,
            rejected,
            synchronous: options ? options.synchronous : false,
            runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
    }
    /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */ eject(id) {
        if (this.handlers[id]) this.handlers[id] = null;
    }
    /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */ clear() {
        if (this.handlers) this.handlers = [];
    }
    /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */ forEach(fn) {
        (0, _utilsJsDefault.default).forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) fn(h);
        });
    }
}
exports.default = InterceptorManager;

},{"./../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8AFIa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>dispatchRequest);
var _transformDataJs = require("./transformData.js");
var _transformDataJsDefault = parcelHelpers.interopDefault(_transformDataJs);
var _isCancelJs = require("../cancel/isCancel.js");
var _isCancelJsDefault = parcelHelpers.interopDefault(_isCancelJs);
var _indexJs = require("../defaults/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _canceledErrorJs = require("../cancel/CanceledError.js");
var _canceledErrorJsDefault = parcelHelpers.interopDefault(_canceledErrorJs);
var _axiosHeadersJs = require("../core/AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
var _adaptersJs = require("../adapters/adapters.js");
var _adaptersJsDefault = parcelHelpers.interopDefault(_adaptersJs);
"use strict";
/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new (0, _canceledErrorJsDefault.default)(null, config);
}
function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = (0, _axiosHeadersJsDefault.default).from(config.headers);
    // Transform request data
    config.data = (0, _transformDataJsDefault.default).call(config, config.transformRequest);
    if ([
        "post",
        "put",
        "patch"
    ].indexOf(config.method) !== -1) config.headers.setContentType("application/x-www-form-urlencoded", false);
    const adapter = (0, _adaptersJsDefault.default).getAdapter(config.adapter || (0, _indexJsDefault.default).adapter);
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = (0, _transformDataJsDefault.default).call(config, config.transformResponse, response);
        response.headers = (0, _axiosHeadersJsDefault.default).from(response.headers);
        return response;
    }, function onAdapterRejection(reason) {
        if (!(0, _isCancelJsDefault.default)(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) {
                reason.response.data = (0, _transformDataJsDefault.default).call(config, config.transformResponse, reason.response);
                reason.response.headers = (0, _axiosHeadersJsDefault.default).from(reason.response.headers);
            }
        }
        return Promise.reject(reason);
    });
}

},{"./transformData.js":"hX6Lm","../cancel/isCancel.js":"hkf4u","../defaults/index.js":"fD9ox","../cancel/CanceledError.js":"272jL","../core/AxiosHeaders.js":"7iEMY","../adapters/adapters.js":"kUiV2","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hX6Lm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>transformData);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _indexJs = require("../defaults/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _axiosHeadersJs = require("../core/AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
"use strict";
function transformData(fns, response) {
    const config = this || (0, _indexJsDefault.default);
    const context = response || config;
    const headers = (0, _axiosHeadersJsDefault.default).from(context.headers);
    let data = context.data;
    (0, _utilsJsDefault.default).forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });
    headers.normalize();
    return data;
}

},{"./../utils.js":"97GNE","../defaults/index.js":"fD9ox","../core/AxiosHeaders.js":"7iEMY","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fD9ox":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
var _transitionalJs = require("./transitional.js");
var _transitionalJsDefault = parcelHelpers.interopDefault(_transitionalJs);
var _toFormDataJs = require("../helpers/toFormData.js");
var _toFormDataJsDefault = parcelHelpers.interopDefault(_toFormDataJs);
var _toURLEncodedFormJs = require("../helpers/toURLEncodedForm.js");
var _toURLEncodedFormJsDefault = parcelHelpers.interopDefault(_toURLEncodedFormJs);
var _indexJs = require("../platform/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _formDataToJSONJs = require("../helpers/formDataToJSON.js");
var _formDataToJSONJsDefault = parcelHelpers.interopDefault(_formDataToJSONJs);
"use strict";
const DEFAULT_CONTENT_TYPE = {
    "Content-Type": undefined
};
/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */ function stringifySafely(rawValue, parser, encoder) {
    if ((0, _utilsJsDefault.default).isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return (0, _utilsJsDefault.default).trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
    transitional: (0, _transitionalJsDefault.default),
    adapter: [
        "xhr",
        "http"
    ],
    transformRequest: [
        function transformRequest(data, headers) {
            const contentType = headers.getContentType() || "";
            const hasJSONContentType = contentType.indexOf("application/json") > -1;
            const isObjectPayload = (0, _utilsJsDefault.default).isObject(data);
            if (isObjectPayload && (0, _utilsJsDefault.default).isHTMLForm(data)) data = new FormData(data);
            const isFormData = (0, _utilsJsDefault.default).isFormData(data);
            if (isFormData) {
                if (!hasJSONContentType) return data;
                return hasJSONContentType ? JSON.stringify((0, _formDataToJSONJsDefault.default)(data)) : data;
            }
            if ((0, _utilsJsDefault.default).isArrayBuffer(data) || (0, _utilsJsDefault.default).isBuffer(data) || (0, _utilsJsDefault.default).isStream(data) || (0, _utilsJsDefault.default).isFile(data) || (0, _utilsJsDefault.default).isBlob(data)) return data;
            if ((0, _utilsJsDefault.default).isArrayBufferView(data)) return data.buffer;
            if ((0, _utilsJsDefault.default).isURLSearchParams(data)) {
                headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
                return data.toString();
            }
            let isFileList;
            if (isObjectPayload) {
                if (contentType.indexOf("application/x-www-form-urlencoded") > -1) return (0, _toURLEncodedFormJsDefault.default)(data, this.formSerializer).toString();
                if ((isFileList = (0, _utilsJsDefault.default).isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
                    const _FormData = this.env && this.env.FormData;
                    return (0, _toFormDataJsDefault.default)(isFileList ? {
                        "files[]": data
                    } : data, _FormData && new _FormData(), this.formSerializer);
                }
            }
            if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            const transitional = this.transitional || defaults.transitional;
            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            const JSONRequested = this.responseType === "json";
            if (data && (0, _utilsJsDefault.default).isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                const silentJSONParsing = transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;
                try {
                    return JSON.parse(data);
                } catch (e) {
                    if (strictJSONParsing) {
                        if (e.name === "SyntaxError") throw (0, _axiosErrorJsDefault.default).from(e, (0, _axiosErrorJsDefault.default).ERR_BAD_RESPONSE, this, null, this.response);
                        throw e;
                    }
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: (0, _indexJsDefault.default).classes.FormData,
        Blob: (0, _indexJsDefault.default).classes.Blob
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
(0, _utilsJsDefault.default).forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
(0, _utilsJsDefault.default).forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = (0, _utilsJsDefault.default).merge(DEFAULT_CONTENT_TYPE);
});
exports.default = defaults;

},{"../utils.js":"97GNE","../core/AxiosError.js":"2AS0c","./transitional.js":"2wrJC","../helpers/toFormData.js":"fcufw","../helpers/toURLEncodedForm.js":"a1y9J","../platform/index.js":"9OS0u","../helpers/formDataToJSON.js":"8VpbC","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2wrJC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
"use strict";
exports.default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"a1y9J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>toURLEncodedForm);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _toFormDataJs = require("./toFormData.js");
var _toFormDataJsDefault = parcelHelpers.interopDefault(_toFormDataJs);
var _indexJs = require("../platform/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
"use strict";
function toURLEncodedForm(data, options) {
    return (0, _toFormDataJsDefault.default)(data, new (0, _indexJsDefault.default).classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
            if ((0, _indexJsDefault.default).isNode && (0, _utilsJsDefault.default).isBuffer(value)) {
                this.append(key, value.toString("base64"));
                return false;
            }
            return helpers.defaultVisitor.apply(this, arguments);
        }
    }, options));
}

},{"../utils.js":"97GNE","./toFormData.js":"fcufw","../platform/index.js":"9OS0u","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"9OS0u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _indexJsDefault.default));
var _indexJs = require("./node/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);

},{"./node/index.js":"gjvTv","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"gjvTv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _urlsearchParamsJs = require("./classes/URLSearchParams.js");
var _urlsearchParamsJsDefault = parcelHelpers.interopDefault(_urlsearchParamsJs);
var _formDataJs = require("./classes/FormData.js");
var _formDataJsDefault = parcelHelpers.interopDefault(_formDataJs);
var _blobJs = require("./classes/Blob.js");
var _blobJsDefault = parcelHelpers.interopDefault(_blobJs);
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */ const isStandardBrowserEnv = (()=>{
    let product;
    if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
})();
/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */ const isStandardBrowserWebWorkerEnv = (()=>{
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
exports.default = {
    isBrowser: true,
    classes: {
        URLSearchParams: (0, _urlsearchParamsJsDefault.default),
        FormData: (0, _formDataJsDefault.default),
        Blob: (0, _blobJsDefault.default)
    },
    isStandardBrowserEnv,
    isStandardBrowserWebWorkerEnv,
    protocols: [
        "http",
        "https",
        "file",
        "blob",
        "url",
        "data"
    ]
};

},{"./classes/URLSearchParams.js":"eJJEH","./classes/FormData.js":"djSwH","./classes/Blob.js":"fOCRi","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"eJJEH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _axiosURLSearchParamsJs = require("../../../helpers/AxiosURLSearchParams.js");
var _axiosURLSearchParamsJsDefault = parcelHelpers.interopDefault(_axiosURLSearchParamsJs);
"use strict";
exports.default = typeof URLSearchParams !== "undefined" ? URLSearchParams : (0, _axiosURLSearchParamsJsDefault.default);

},{"../../../helpers/AxiosURLSearchParams.js":"lx3A5","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"djSwH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
"use strict";
exports.default = typeof FormData !== "undefined" ? FormData : null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fOCRi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
"use strict";
exports.default = typeof Blob !== "undefined" ? Blob : null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8VpbC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */ function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return (0, _utilsJsDefault.default).matchAll(/\w+|\[(\w*)]/g, name).map((match)=>{
        return match[0] === "[]" ? "" : match[1] || match[0];
    });
}
/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */ function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for(i = 0; i < len; i++){
        key = keys[i];
        obj[key] = arr[key];
    }
    return obj;
}
/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */ function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && (0, _utilsJsDefault.default).isArray(target) ? target.length : name;
        if (isLast) {
            if ((0, _utilsJsDefault.default).hasOwnProp(target, name)) target[name] = [
                target[name],
                value
            ];
            else target[name] = value;
            return !isNumericKey;
        }
        if (!target[name] || !(0, _utilsJsDefault.default).isObject(target[name])) target[name] = [];
        const result = buildPath(path, value, target[name], index);
        if (result && (0, _utilsJsDefault.default).isArray(target[name])) target[name] = arrayToObject(target[name]);
        return !isNumericKey;
    }
    if ((0, _utilsJsDefault.default).isFormData(formData) && (0, _utilsJsDefault.default).isFunction(formData.entries)) {
        const obj = {};
        (0, _utilsJsDefault.default).forEachEntry(formData, (name, value)=>{
            buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
    }
    return null;
}
exports.default = formDataToJSON;

},{"../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"7iEMY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _parseHeadersJs = require("../helpers/parseHeaders.js");
var _parseHeadersJsDefault = parcelHelpers.interopDefault(_parseHeadersJs);
"use strict";
const $internals = Symbol("internals");
function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
    if (value === false || value == null) return value;
    return (0, _utilsJsDefault.default).isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while(match = tokensRE.exec(str))tokens[match[1]] = match[2];
    return tokens;
}
const isValidHeaderName = (str)=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if ((0, _utilsJsDefault.default).isFunction(filter)) return filter.call(this, value, header);
    if (isHeaderNameFilter) value = header;
    if (!(0, _utilsJsDefault.default).isString(value)) return;
    if ((0, _utilsJsDefault.default).isString(filter)) return value.indexOf(filter) !== -1;
    if ((0, _utilsJsDefault.default).isRegExp(filter)) return filter.test(value);
}
function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str)=>{
        return char.toUpperCase() + str;
    });
}
function buildAccessors(obj, header) {
    const accessorName = (0, _utilsJsDefault.default).toCamelCase(" " + header);
    [
        "get",
        "set",
        "has"
    ].forEach((methodName)=>{
        Object.defineProperty(obj, methodName + accessorName, {
            value: function(arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
            },
            configurable: true
        });
    });
}
class AxiosHeaders {
    constructor(headers){
        headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
        const self = this;
        function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header);
            if (!lHeader) throw new Error("header name must be a non-empty string");
            const key = (0, _utilsJsDefault.default).findKey(self, lHeader);
            if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) self[key || _header] = normalizeValue(_value);
        }
        const setHeaders = (headers, _rewrite)=>(0, _utilsJsDefault.default).forEach(headers, (_value, _header)=>setHeader(_value, _header, _rewrite));
        if ((0, _utilsJsDefault.default).isPlainObject(header) || header instanceof this.constructor) setHeaders(header, valueOrRewrite);
        else if ((0, _utilsJsDefault.default).isString(header) && (header = header.trim()) && !isValidHeaderName(header)) setHeaders((0, _parseHeadersJsDefault.default)(header), valueOrRewrite);
        else header != null && setHeader(valueOrRewrite, header, rewrite);
        return this;
    }
    get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
            const key = (0, _utilsJsDefault.default).findKey(this, header);
            if (key) {
                const value = this[key];
                if (!parser) return value;
                if (parser === true) return parseTokens(value);
                if ((0, _utilsJsDefault.default).isFunction(parser)) return parser.call(this, value, key);
                if ((0, _utilsJsDefault.default).isRegExp(parser)) return parser.exec(value);
                throw new TypeError("parser must be boolean|regexp|function");
            }
        }
    }
    has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
            const key = (0, _utilsJsDefault.default).findKey(this, header);
            return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
    }
    delete(header, matcher) {
        const self = this;
        let deleted = false;
        function deleteHeader(_header) {
            _header = normalizeHeader(_header);
            if (_header) {
                const key = (0, _utilsJsDefault.default).findKey(self, _header);
                if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
                    delete self[key];
                    deleted = true;
                }
            }
        }
        if ((0, _utilsJsDefault.default).isArray(header)) header.forEach(deleteHeader);
        else deleteHeader(header);
        return deleted;
    }
    clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while(i--){
            const key = keys[i];
            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                delete this[key];
                deleted = true;
            }
        }
        return deleted;
    }
    normalize(format) {
        const self = this;
        const headers = {};
        (0, _utilsJsDefault.default).forEach(this, (value, header)=>{
            const key = (0, _utilsJsDefault.default).findKey(headers, header);
            if (key) {
                self[key] = normalizeValue(value);
                delete self[header];
                return;
            }
            const normalized = format ? formatHeader(header) : String(header).trim();
            if (normalized !== header) delete self[header];
            self[normalized] = normalizeValue(value);
            headers[normalized] = true;
        });
        return this;
    }
    concat(...targets) {
        return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
        const obj = Object.create(null);
        (0, _utilsJsDefault.default).forEach(this, (value, header)=>{
            value != null && value !== false && (obj[header] = asStrings && (0, _utilsJsDefault.default).isArray(value) ? value.join(", ") : value);
        });
        return obj;
    }
    [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
        return Object.entries(this.toJSON()).map(([header, value])=>header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
        return "AxiosHeaders";
    }
    static from(thing) {
        return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target)=>computed.set(target));
        return computed;
    }
    static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
            accessors: {}
        };
        const accessors = internals.accessors;
        const prototype = this.prototype;
        function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header);
            if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
            }
        }
        (0, _utilsJsDefault.default).isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
    }
}
AxiosHeaders.accessor([
    "Content-Type",
    "Content-Length",
    "Accept",
    "Accept-Encoding",
    "User-Agent",
    "Authorization"
]);
(0, _utilsJsDefault.default).freezeMethods(AxiosHeaders.prototype);
(0, _utilsJsDefault.default).freezeMethods(AxiosHeaders);
exports.default = AxiosHeaders;

},{"../utils.js":"97GNE","../helpers/parseHeaders.js":"3fwEf","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"3fwEf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = (0, _utilsJsDefault.default).toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
]);
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */ exports.default = (rawHeaders)=>{
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) return;
        if (key === "set-cookie") {
            if (parsed[key]) parsed[key].push(val);
            else parsed[key] = [
                val
            ];
        } else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    });
    return parsed;
};

},{"./../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hkf4u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isCancel);
"use strict";
function isCancel(value) {
    return !!(value && value.__CANCEL__);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"272jL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */ function CanceledError(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    (0, _axiosErrorJsDefault.default).call(this, message == null ? "canceled" : message, (0, _axiosErrorJsDefault.default).ERR_CANCELED, config, request);
    this.name = "CanceledError";
}
(0, _utilsJsDefault.default).inherits(CanceledError, (0, _axiosErrorJsDefault.default), {
    __CANCEL__: true
});
exports.default = CanceledError;

},{"../core/AxiosError.js":"2AS0c","../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"kUiV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _httpJs = require("./http.js");
var _httpJsDefault = parcelHelpers.interopDefault(_httpJs);
var _xhrJs = require("./xhr.js");
var _xhrJsDefault = parcelHelpers.interopDefault(_xhrJs);
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
const knownAdapters = {
    http: (0, _httpJsDefault.default),
    xhr: (0, _xhrJsDefault.default)
};
(0, _utilsJsDefault.default).forEach(knownAdapters, (fn, value)=>{
    if (fn) {
        try {
            Object.defineProperty(fn, "name", {
                value
            });
        } catch (e) {
        // eslint-disable-next-line no-empty
        }
        Object.defineProperty(fn, "adapterName", {
            value
        });
    }
});
exports.default = {
    getAdapter: (adapters)=>{
        adapters = (0, _utilsJsDefault.default).isArray(adapters) ? adapters : [
            adapters
        ];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        for(let i = 0; i < length; i++){
            nameOrAdapter = adapters[i];
            if (adapter = (0, _utilsJsDefault.default).isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) break;
        }
        if (!adapter) {
            if (adapter === false) throw new (0, _axiosErrorJsDefault.default)(`Adapter ${nameOrAdapter} is not supported by the environment`, "ERR_NOT_SUPPORT");
            throw new Error((0, _utilsJsDefault.default).hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`);
        }
        if (!(0, _utilsJsDefault.default).isFunction(adapter)) throw new TypeError("adapter is not a function");
        return adapter;
    },
    adapters: knownAdapters
};

},{"../utils.js":"97GNE","./http.js":"b6Ekd","./xhr.js":"6kFq6","../core/AxiosError.js":"2AS0c","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"6kFq6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _settleJs = require("./../core/settle.js");
var _settleJsDefault = parcelHelpers.interopDefault(_settleJs);
var _cookiesJs = require("./../helpers/cookies.js");
var _cookiesJsDefault = parcelHelpers.interopDefault(_cookiesJs);
var _buildURLJs = require("./../helpers/buildURL.js");
var _buildURLJsDefault = parcelHelpers.interopDefault(_buildURLJs);
var _buildFullPathJs = require("../core/buildFullPath.js");
var _buildFullPathJsDefault = parcelHelpers.interopDefault(_buildFullPathJs);
var _isURLSameOriginJs = require("./../helpers/isURLSameOrigin.js");
var _isURLSameOriginJsDefault = parcelHelpers.interopDefault(_isURLSameOriginJs);
var _transitionalJs = require("../defaults/transitional.js");
var _transitionalJsDefault = parcelHelpers.interopDefault(_transitionalJs);
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
var _canceledErrorJs = require("../cancel/CanceledError.js");
var _canceledErrorJsDefault = parcelHelpers.interopDefault(_canceledErrorJs);
var _parseProtocolJs = require("../helpers/parseProtocol.js");
var _parseProtocolJsDefault = parcelHelpers.interopDefault(_parseProtocolJs);
var _indexJs = require("../platform/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _axiosHeadersJs = require("../core/AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
var _speedometerJs = require("../helpers/speedometer.js");
var _speedometerJsDefault = parcelHelpers.interopDefault(_speedometerJs);
"use strict";
function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = (0, _speedometerJsDefault.default)(50, 250);
    return (e)=>{
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
            loaded,
            total,
            progress: total ? loaded / total : undefined,
            bytes: progressBytes,
            rate: rate ? rate : undefined,
            estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
            event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
    };
}
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
exports.default = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = (0, _axiosHeadersJsDefault.default).from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if ((0, _utilsJsDefault.default).isFormData(requestData)) {
            if ((0, _indexJsDefault.default).isStandardBrowserEnv || (0, _indexJsDefault.default).isStandardBrowserWebWorkerEnv) requestHeaders.setContentType(false); // Let the browser set it
            else requestHeaders.setContentType("multipart/form-data;", false); // mobile/desktop app frameworks
        }
        let request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            const username = config.auth.username || "";
            const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = (0, _buildFullPathJsDefault.default)(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), (0, _buildURLJsDefault.default)(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            const responseHeaders = (0, _axiosHeadersJsDefault.default).from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
            const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            const response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config,
                request
            };
            (0, _settleJsDefault.default)(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(new (0, _axiosErrorJsDefault.default)("Request aborted", (0, _axiosErrorJsDefault.default).ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new (0, _axiosErrorJsDefault.default)("Network Error", (0, _axiosErrorJsDefault.default).ERR_NETWORK, config, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || (0, _transitionalJsDefault.default);
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(new (0, _axiosErrorJsDefault.default)(timeoutErrorMessage, transitional.clarifyTimeoutError ? (0, _axiosErrorJsDefault.default).ETIMEDOUT : (0, _axiosErrorJsDefault.default).ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if ((0, _indexJsDefault.default).isStandardBrowserEnv) {
            // Add xsrf header
            const xsrfValue = (config.withCredentials || (0, _isURLSameOriginJsDefault.default)(fullPath)) && config.xsrfCookieName && (0, _cookiesJsDefault.default).read(config.xsrfCookieName);
            if (xsrfValue) requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);
        // Add headers to the request
        if ("setRequestHeader" in request) (0, _utilsJsDefault.default).forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!(0, _utilsJsDefault.default).isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = (cancel)=>{
                if (!request) return;
                reject(!cancel || cancel.type ? new (0, _canceledErrorJsDefault.default)(null, config, request) : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        const protocol = (0, _parseProtocolJsDefault.default)(fullPath);
        if (protocol && (0, _indexJsDefault.default).protocols.indexOf(protocol) === -1) {
            reject(new (0, _axiosErrorJsDefault.default)("Unsupported protocol " + protocol + ":", (0, _axiosErrorJsDefault.default).ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData || null);
    });
};

},{"./../utils.js":"97GNE","./../core/settle.js":"2JPUa","./../helpers/cookies.js":"5H088","./../helpers/buildURL.js":"fODla","../core/buildFullPath.js":"4vYpw","./../helpers/isURLSameOrigin.js":"e2zDZ","../defaults/transitional.js":"2wrJC","../core/AxiosError.js":"2AS0c","../cancel/CanceledError.js":"272jL","../helpers/parseProtocol.js":"zQ6sV","../platform/index.js":"9OS0u","../core/AxiosHeaders.js":"7iEMY","../helpers/speedometer.js":"fJAI7","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"2JPUa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>settle);
var _axiosErrorJs = require("./AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
"use strict";
function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(new (0, _axiosErrorJsDefault.default)("Request failed with status code " + response.status, [
        (0, _axiosErrorJsDefault.default).ERR_BAD_REQUEST,
        (0, _axiosErrorJsDefault.default).ERR_BAD_RESPONSE
    ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
}

},{"./AxiosError.js":"2AS0c","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"5H088":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _indexJs = require("../platform/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
"use strict";
exports.default = (0, _indexJsDefault.default).isStandardBrowserEnv ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if ((0, _utilsJsDefault.default).isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if ((0, _utilsJsDefault.default).isString(path)) cookie.push("path=" + path);
            if ((0, _utilsJsDefault.default).isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"./../utils.js":"97GNE","../platform/index.js":"9OS0u","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"4vYpw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>buildFullPath);
var _isAbsoluteURLJs = require("../helpers/isAbsoluteURL.js");
var _isAbsoluteURLJsDefault = parcelHelpers.interopDefault(_isAbsoluteURLJs);
var _combineURLsJs = require("../helpers/combineURLs.js");
var _combineURLsJsDefault = parcelHelpers.interopDefault(_combineURLsJs);
"use strict";
function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !(0, _isAbsoluteURLJsDefault.default)(requestedURL)) return (0, _combineURLsJsDefault.default)(baseURL, requestedURL);
    return requestedURL;
}

},{"../helpers/isAbsoluteURL.js":"j3AfR","../helpers/combineURLs.js":"jd0Tl","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"j3AfR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isAbsoluteURL);
"use strict";
function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jd0Tl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>combineURLs);
"use strict";
function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"e2zDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _indexJs = require("../platform/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
"use strict";
exports.default = (0, _indexJsDefault.default).isStandardBrowserEnv ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        let href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        const parsed = (0, _utilsJsDefault.default).isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"./../utils.js":"97GNE","../platform/index.js":"9OS0u","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"zQ6sV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>parseProtocol);
"use strict";
function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fJAI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
"use strict";
/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */ function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== undefined ? min : 1000;
    return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) firstSampleTS = now;
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while(i !== head){
            bytesCount += bytes[i++];
            i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) tail = (tail + 1) % samplesCount;
        if (now - firstSampleTS < min) return;
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
}
exports.default = speedometer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"grmk8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergeConfig);
var _utilsJs = require("../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
var _axiosHeadersJs = require("./AxiosHeaders.js");
var _axiosHeadersJsDefault = parcelHelpers.interopDefault(_axiosHeadersJs);
"use strict";
const headersToObject = (thing)=>thing instanceof (0, _axiosHeadersJsDefault.default) ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
        if ((0, _utilsJsDefault.default).isPlainObject(target) && (0, _utilsJsDefault.default).isPlainObject(source)) return (0, _utilsJsDefault.default).merge.call({
            caseless
        }, target, source);
        else if ((0, _utilsJsDefault.default).isPlainObject(source)) return (0, _utilsJsDefault.default).merge({}, source);
        else if ((0, _utilsJsDefault.default).isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, caseless) {
        if (!(0, _utilsJsDefault.default).isUndefined(b)) return getMergedValue(a, b, caseless);
        else if (!(0, _utilsJsDefault.default).isUndefined(a)) return getMergedValue(undefined, a, caseless);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
        if (!(0, _utilsJsDefault.default).isUndefined(b)) return getMergedValue(undefined, b);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
        if (!(0, _utilsJsDefault.default).isUndefined(b)) return getMergedValue(undefined, b);
        else if (!(0, _utilsJsDefault.default).isUndefined(a)) return getMergedValue(undefined, a);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
        if (prop in config2) return getMergedValue(a, b);
        else if (prop in config1) return getMergedValue(undefined, a);
    }
    const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b)=>mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    (0, _utilsJsDefault.default).forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(config1[prop], config2[prop], prop);
        (0, _utilsJsDefault.default).isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
}

},{"../utils.js":"97GNE","./AxiosHeaders.js":"7iEMY","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"iSP81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataJs = require("../env/data.js");
var _axiosErrorJs = require("../core/AxiosError.js");
var _axiosErrorJsDefault = parcelHelpers.interopDefault(_axiosErrorJs);
"use strict";
const validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach((type, i)=>{
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
const deprecatedWarnings = {};
/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + (0, _dataJs.VERSION) + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return (value, opt, opts)=>{
        if (validator === false) throw new (0, _axiosErrorJsDefault.default)(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), (0, _axiosErrorJsDefault.default).ERR_DEPRECATED);
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new (0, _axiosErrorJsDefault.default)("options must be an object", (0, _axiosErrorJsDefault.default).ERR_BAD_OPTION_VALUE);
    const keys = Object.keys(options);
    let i = keys.length;
    while(i-- > 0){
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
            const value = options[opt];
            const result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new (0, _axiosErrorJsDefault.default)("option " + opt + " must be " + result, (0, _axiosErrorJsDefault.default).ERR_BAD_OPTION_VALUE);
            continue;
        }
        if (allowUnknown !== true) throw new (0, _axiosErrorJsDefault.default)("Unknown option " + opt, (0, _axiosErrorJsDefault.default).ERR_BAD_OPTION);
    }
}
exports.default = {
    assertOptions,
    validators
};

},{"../env/data.js":"lytzO","../core/AxiosError.js":"2AS0c","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lytzO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
const VERSION = "1.4.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"xAtcO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canceledErrorJs = require("./CanceledError.js");
var _canceledErrorJsDefault = parcelHelpers.interopDefault(_canceledErrorJs);
"use strict";
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */ class CancelToken {
    constructor(executor){
        if (typeof executor !== "function") throw new TypeError("executor must be a function.");
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
        });
        const token = this;
        // eslint-disable-next-line func-names
        this.promise.then((cancel)=>{
            if (!token._listeners) return;
            let i = token._listeners.length;
            while(i-- > 0)token._listeners[i](cancel);
            token._listeners = null;
        });
        // eslint-disable-next-line func-names
        this.promise.then = (onfulfilled)=>{
            let _resolve;
            // eslint-disable-next-line func-names
            const promise = new Promise((resolve)=>{
                token.subscribe(resolve);
                _resolve = resolve;
            }).then(onfulfilled);
            promise.cancel = function reject() {
                token.unsubscribe(_resolve);
            };
            return promise;
        };
        executor(function cancel(message, config, request) {
            if (token.reason) // Cancellation has already been requested
            return;
            token.reason = new (0, _canceledErrorJsDefault.default)(message, config, request);
            resolvePromise(token.reason);
        });
    }
    /**
   * Throws a `CanceledError` if cancellation has been requested.
   */ throwIfRequested() {
        if (this.reason) throw this.reason;
    }
    /**
   * Subscribe to the cancel signal
   */ subscribe(listener) {
        if (this.reason) {
            listener(this.reason);
            return;
        }
        if (this._listeners) this._listeners.push(listener);
        else this._listeners = [
            listener
        ];
    }
    /**
   * Unsubscribe from the cancel signal
   */ unsubscribe(listener) {
        if (!this._listeners) return;
        const index = this._listeners.indexOf(listener);
        if (index !== -1) this._listeners.splice(index, 1);
    }
    /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */ static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
            cancel = c;
        });
        return {
            token,
            cancel
        };
    }
}
exports.default = CancelToken;

},{"./CanceledError.js":"272jL","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"a9JaR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>spread);
"use strict";
function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"hXnIM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isAxiosError);
var _utilsJs = require("./../utils.js");
var _utilsJsDefault = parcelHelpers.interopDefault(_utilsJs);
"use strict";
function isAxiosError(payload) {
    return (0, _utilsJsDefault.default).isObject(payload) && payload.isAxiosError === true;
}

},{"./../utils.js":"97GNE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"g6L48":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value])=>{
    HttpStatusCode[value] = key;
});
exports.default = HttpStatusCode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"bOOFj":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hideAlert", ()=>hideAlert);
parcelHelpers.export(exports, "showAlert", ()=>showAlert);
const hideAlert = ()=>{
    const el = document.querySelector(".alert");
    if (el) el.parentElement.removeChild(el);
};
const showAlert = (type, msg, time = 3)=>{
    hideAlert();
    const mark = `<div class="alert fixed left-1/2 -translate-x-1/2 p-2">
    <div class="flex flex-col p-4 m-2 w-fit text-base ${type === "success" ? "text-green-800 bg-green-100" : "text-red-800 bg-red-100"} rounded-lg">
      <div class="flex items-center">
        <span class="material-icons mr-3 ${type === "success" ? "text-green-800" : "text-red-800"}">info</span>
        <h3 class="text-lg font-medium">${type === "success" ? "Success! " : "Error! "} ${msg} </h3>
      </div>
    </div>    
  </div>`;
    document.querySelector("body").insertAdjacentHTML("afterbegin", mark);
    window.setTimeout(hideAlert, time * 1000);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"lYzQE":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hideLoader", ()=>hideLoader);
parcelHelpers.export(exports, "showLoader", ()=>showLoader);
const hideLoader = ()=>{
    const el = document.querySelector(".loader");
    if (el) el.parentElement.removeChild(el);
};
const showLoader = ()=>{
    hideLoader();
    const markup = `<div class="loader"></div>`;
    document.querySelector("body").insertAdjacentHTML("afterbegin", markup);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"iSaaI":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateSettings", ()=>updateSettings);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const updateSettings = async (data, type)=>{
    (0, _loader.showLoader)();
    try {
        const url = type === "password" ? "/api/v1/users/updateMyPassword" : "/api/v1/users/updateMe";
        const message = type === "password" ? "Password" : "Account data";
        const res = await (0, _axiosDefault.default)({
            method: "PATCH",
            url,
            data
        });
        if (res.data.status === "success") {
            (0, _loader.hideLoader)();
            (0, _alert.showAlert)("success", `${message} updated!`);
            window.setTimeout(()=>{
                location.assign("/");
            }, 1000);
        }
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"b7MWQ":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "manageArticles", ()=>manageArticles);
parcelHelpers.export(exports, "deleteArticle", ()=>deleteArticle);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const manageArticles = async (data, id)=>{
    (0, _loader.showLoader)();
    try {
        const url = id ? `/api/v1/articles/${id}` : `/api/v1/articles`;
        const method = id ? "PATCH" : "POST";
        const res = await (0, _axiosDefault.default)({
            method,
            url,
            data
        });
        if (res.data.status === "success") window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deleteArticle = async (id)=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/articles/${id}`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"5fVuK":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initUpdateArticleForm", ()=>initUpdateArticleForm);
parcelHelpers.export(exports, "clearUpdateArticleForm", ()=>clearUpdateArticleForm);
const initUpdateArticleForm = (item)=>{
    const manegeArticleForm = document.getElementById("manage-article-form");
    manegeArticleForm.dataset.id = JSON.stringify(item._id);
    document.getElementById("drawer-label-article").textContent = "Perbarui Artikel";
    document.getElementById("btn-save-article").textContent = "Simpan";
    document.getElementById("title").value = item.title;
    document.getElementById("description").value = item.description;
};
const clearUpdateArticleForm = ()=>{
    const manegeArticleForm = document.getElementById("manage-article-form");
    manegeArticleForm.dataset.id = undefined;
    document.getElementById("drawer-label-article").textContent = "Tambah Artikel";
    document.getElementById("btn-save-article").textContent = "Tambah";
    document.getElementById("title").value = "";
    document.getElementById("description").value = "";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"fAVeq":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "manageSymptom", ()=>manageSymptom);
parcelHelpers.export(exports, "deleteSymptom", ()=>deleteSymptom);
parcelHelpers.export(exports, "deleteAllSymptom", ()=>deleteAllSymptom);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const manageSymptom = async (data, id)=>{
    (0, _loader.showLoader)();
    try {
        const url = id ? `/api/v1/symptoms/${id}` : `/api/v1/symptoms`;
        const method = id ? "PATCH" : "POST";
        const res = await (0, _axiosDefault.default)({
            method,
            url,
            data
        });
        if (res.data.status === "success") window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deleteSymptom = async (id)=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/symptoms/${id}`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deleteAllSymptom = async ()=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/symptoms/delete-all`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jkIAc":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initUpdateSymptomForm", ()=>initUpdateSymptomForm);
parcelHelpers.export(exports, "clearUpdateSymptomForm", ()=>clearUpdateSymptomForm);
const initUpdateSymptomForm = (item)=>{
    const manageSymptomForm = document.getElementById("manage-symptom-form");
    manageSymptomForm.dataset.id = JSON.stringify(item._id);
    document.getElementById("title-symptom").textContent = "Perbarui Gejala";
    document.getElementById("btn-save-symptom").textContent = "Simpan";
    document.getElementById("symptom-name").value = item.name;
    document.getElementById("symptom-factor").value = item.factor;
};
const clearUpdateSymptomForm = ()=>{
    const manageSymptomForm = document.getElementById("manage-symptom-form");
    manageSymptomForm.dataset.id = undefined;
    document.getElementById("title-symptom").textContent = "Tambah Gejala";
    document.getElementById("btn-save-symptom").textContent = "Tambah";
    document.getElementById("symptom-name").value = "";
    document.getElementById("symptom-factor").value = "";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ldihW":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "manageSolution", ()=>manageSolution);
parcelHelpers.export(exports, "deleteSolution", ()=>deleteSolution);
parcelHelpers.export(exports, "deleteAllSolution", ()=>deleteAllSolution);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const manageSolution = async (data, id)=>{
    (0, _loader.showLoader)();
    try {
        const url = id ? `/api/v1/solutions/${id}` : `/api/v1/solutions`;
        const method = id ? "PATCH" : "POST";
        const res = await (0, _axiosDefault.default)({
            method,
            url,
            data
        });
        if (res.data.status === "success") window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deleteSolution = async (id)=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/solutions/${id}`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deleteAllSolution = async ()=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/solutions/delete-all`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"eGlki":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initUpdateSolutionForm", ()=>initUpdateSolutionForm);
parcelHelpers.export(exports, "clearUpdateSolutionForm", ()=>clearUpdateSolutionForm);
const initUpdateSolutionForm = (item)=>{
    const manageSolutionForm = document.getElementById("manage-solution-form");
    manageSolutionForm.dataset.id = JSON.stringify(item._id);
    document.getElementById("title-solution").textContent = "Perbarui Solusi";
    document.getElementById("btn-save-solution").textContent = "Simpan";
    document.getElementById("solution-name").value = item.name;
    document.getElementById("solution-addiction-level").value = item.addictionLevel;
};
const clearUpdateSolutionForm = (item)=>{
    const manageSolutionForm = document.getElementById("manage-solution-form");
    manageSolutionForm.dataset.id = undefined;
    document.getElementById("title-solution").textContent = "Tambah Solusi";
    document.getElementById("btn-save-solution").textContent = "Tambah";
    document.getElementById("solution-name").value = "";
    document.getElementById("solution-addiction-level").value = "";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"gRiT8":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deleteHistory", ()=>deleteHistory);
parcelHelpers.export(exports, "deletHistoryByUser", ()=>deletHistoryByUser);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const deleteHistory = async (id)=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/results/${id}`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};
const deletHistoryByUser = async (userId)=>{
    (0, _loader.showLoader)();
    try {
        await (0, _axiosDefault.default)({
            method: "DELETE",
            url: `/api/v1/results/delete-by-user/${userId}`
        });
        window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.reload(true);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"ftdHz":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDataResult", ()=>addDataResult);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _alert = require("./alert");
var _loader = require("./loader");
const addDataResult = async (data, title)=>{
    (0, _loader.showLoader)();
    try {
        const url = "/api/v1/results";
        const method = "POST";
        const res = await (0, _axiosDefault.default)({
            method,
            url,
            data
        });
        if (res.data.status === "success") window.setTimeout(()=>{
            (0, _loader.hideLoader)();
            location.assign(`/result?title=${title}&id=${res.data.data.data.id}`);
        }, 1000);
    } catch (e) {
        (0, _loader.hideLoader)();
        (0, _alert.showAlert)("error", e.response.data.message);
    }
};

},{"axios":"b8NqA","./alert":"bOOFj","./loader":"lYzQE","@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"jFM8f":[function(require,module,exports) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDataWeight", ()=>setDataWeight);
const setDataWeight = (answer)=>{
    if (answer === "sangat tidak sesuai") return 1;
    if (answer === "tidak sesuai") return 2;
    if (answer === "cukup sesuai") return 3;
    if (answer === "sesuai") return 4;
    if (answer === "sangat sesuai") return 5;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"6j9In"}],"8RsnC":[function(require,module,exports) {
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) return Object.getOwnPropertyNames(obj).length === 0;
        else {
            var k;
            for(k in obj){
                if (hasOwnProp(obj, k)) return false;
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for(i = 0; i < arrLen; ++i)res.push(fn(arr[i], i));
        return res;
    }
    function extend(a, b) {
        for(var i in b)if (hasOwnProp(b, i)) a[i] = b[i];
        if (hasOwnProp(b, "toString")) a.toString = b.toString;
        if (hasOwnProp(b, "valueOf")) a.valueOf = b.valueOf;
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) m._pf = defaultParsingFlags();
        return m._pf;
    }
    var some;
    if (Array.prototype.some) some = Array.prototype.some;
    else some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for(i = 0; i < len; i++){
            if (i in t && fun.call(this, t[i], i, t)) return true;
        }
        return false;
    };
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            if (Object.isFrozen == null || !Object.isFrozen(m)) m._isValid = isNowValid;
            else return isNowValid;
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) extend(getParsingFlags(m), flags);
        else getParsingFlags(m).userInvalidated = true;
        return m;
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to, from) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from._isAMomentObject)) to._isAMomentObject = from._isAMomentObject;
        if (!isUndefined(from._i)) to._i = from._i;
        if (!isUndefined(from._f)) to._f = from._f;
        if (!isUndefined(from._l)) to._l = from._l;
        if (!isUndefined(from._strict)) to._strict = from._strict;
        if (!isUndefined(from._tzm)) to._tzm = from._tzm;
        if (!isUndefined(from._isUTC)) to._isUTC = from._isUTC;
        if (!isUndefined(from._offset)) to._offset = from._offset;
        if (!isUndefined(from._pf)) to._pf = getParsingFlags(from);
        if (!isUndefined(from._locale)) to._locale = from._locale;
        if (momentPropertiesLen > 0) for(i = 0; i < momentPropertiesLen; i++){
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) to[prop] = val;
        }
        return to;
    }
    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) this._d = new Date(NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) console.warn("Deprecation warning: " + msg);
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (hooks.deprecationHandler != null) hooks.deprecationHandler(null, msg);
            if (firstTime) {
                var args = [], arg, i, key, argLen = arguments.length;
                for(i = 0; i < argLen; i++){
                    arg = "";
                    if (typeof arguments[i] === "object") {
                        arg += "\n[" + i + "] ";
                        for(key in arguments[0])if (hasOwnProp(arguments[0], key)) arg += key + ": " + arguments[0][key] + ", ";
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else arg = arguments[i];
                    args.push(arg);
                }
                warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) hooks.deprecationHandler(name, msg);
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config) {
        var prop, i;
        for(i in config)if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) this[i] = prop;
            else this["_" + i] = prop;
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for(prop in childConfig)if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) res[prop] = childConfig[prop];
            else delete res[prop];
        }
        for(prop in parentConfig)if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
        return res;
    }
    function Locale(config) {
        if (config != null) this.set(config);
    }
    var keys;
    if (Object.keys) keys = Object.keys;
    else keys = function(obj) {
        var i, res = [];
        for(i in obj)if (hasOwnProp(obj, i)) res.push(i);
        return res;
    };
    var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === "string") func = function() {
            return this[callback]();
        };
        if (token) formatTokenFunctions[token] = func;
        if (padded) formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
        if (ordinal) formatTokenFunctions[ordinal] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) return input.replace(/^\[|\]$/g, "");
        return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for(i = 0, length = array.length; i < length; i++)if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];
        else array[i] = removeFormattingTokens(array[i]);
        return function(mom) {
            var output = "", i;
            for(i = 0; i < length; i++)output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            return output;
        };
    }
    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) return m.localeData().invalidDate();
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while(i >= 0 && localFormattingTokens.test(format)){
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) return format;
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") return tok.slice(1);
            return tok;
        }).join("");
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? "future" : "past"];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for(prop in inputObject)if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) normalizedInput[normalizedProp] = inputObject[prop];
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for(u in unitsObj)if (hasOwnProp(unitsObj, u)) units.push({
            unit: u,
            priority: priorities[u]
        });
        units.sort(function(a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
        if (number < 0) // -0 -> 0
        return Math.ceil(number) || 0;
        else return Math.floor(number);
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) value = absFloor(coercedNumber);
        return value;
    }
    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else return get(this, unit);
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                value = toInt(value);
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
        }
    }
    // MOMENTS
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) return this[units]();
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
            for(i = 0; i < prioritizedLen; i++)this[prioritized[i].unit](units[prioritized[i].unit]);
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) return this[units](value);
        }
        return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) return new RegExp(unescapeFormat(token));
        return regexes[token](config._strict, config._locale);
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback, tokenLen;
        if (typeof token === "string") token = [
            token
        ];
        if (isNumber(callback)) func = function(input, array) {
            array[callback] = toInt(input);
        };
        tokenLen = token.length;
        for(i = 0; i < tokenLen; i++)tokens[token[i]] = func;
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function(input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) tokens[token](input, config._a, config, token);
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) indexOf = Array.prototype.indexOf;
    else indexOf = function(o) {
        // I know
        var i;
        for(i = 0; i < this.length; ++i){
            if (this[i] === o) return i;
        }
        return -1;
    };
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) return NaN;
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    // FORMATTING
    addFormatToken("M", [
        "MM",
        2
    ], "Mo", function() {
        return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken("MMMM", 0, 0, function(format) {
        return this.localeData().months(this, format);
    });
    // ALIASES
    addUnitAlias("month", "M");
    // PRIORITY
    addUnitPriority("month", 8);
    // PARSING
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        "M",
        "MM"
    ], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        "MMM",
        "MMMM"
    ], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) array[MONTH] = month;
        else getParsingFlags(config).invalidMonth = input;
    });
    // LOCALES
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
        if (!m) return isArray(this._months) ? this._months : this._months["standalone"];
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()];
    }
    function localeMonthsShort(m, format) {
        if (!m) return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for(i = 0; i < 12; ++i){
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else if (format === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
            }
            if (!strict && !this._monthsParse[i]) {
                regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            // test the regex
            if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) return i;
            else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) return i;
            else if (!strict && this._monthsParse[i].test(monthName)) return i;
        }
    }
    // MOMENTS
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) // No op
        return mom;
        if (typeof value === "string") {
            if (/^\d+$/.test(value)) value = toInt(value);
            else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) return mom;
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else return get(this, "Month");
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
            if (isStrict) return this._monthsShortStrictRegex;
            else return this._monthsShortRegex;
        } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) this._monthsShortRegex = defaultMonthsShortRegex;
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
            if (isStrict) return this._monthsStrictRegex;
            else return this._monthsRegex;
        } else {
            if (!hasOwnProp(this, "_monthsRegex")) this._monthsRegex = defaultMonthsRegex;
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for(i = 0; i < 12; i++){
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for(i = 0; i < 24; i++)mixedPieces[i] = regexEscape(mixedPieces[i]);
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
    }
    // FORMATTING
    addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, [
        "YY",
        2
    ], 0, function() {
        return this.year() % 100;
    });
    addFormatToken(0, [
        "YYYY",
        4
    ], 0, "year");
    addFormatToken(0, [
        "YYYYY",
        5
    ], 0, "year");
    addFormatToken(0, [
        "YYYYYY",
        6,
        true
    ], 0, "year");
    // ALIASES
    addUnitAlias("year", "y");
    // PRIORITIES
    addUnitPriority("year", 1);
    // PARSING
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken([
        "YYYYY",
        "YYYYYY"
    ], YEAR);
    addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    // HELPERS
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    // HOOKS
    hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    // MOMENTS
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) date.setFullYear(y);
        } else date = new Date(y, m, d, h, M, s, ms);
        return date;
    }
    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) date.setUTCFullYear(y);
        } else date = new Date(Date.UTC.apply(null, arguments));
        return date;
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    // FORMATTING
    addFormatToken("w", [
        "ww",
        2
    ], "wo", "week");
    addFormatToken("W", [
        "WW",
        2
    ], "Wo", "isoWeek");
    // ALIASES
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    // PRIORITIES
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    // PARSING
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken([
        "w",
        "ww",
        "W",
        "WW"
    ], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    // MOMENTS
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    // FORMATTING
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken("ddd", 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken("dddd", 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    // ALIASES
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    // PRIORITY
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    // PARSING
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        "dd",
        "ddd",
        "dddd"
    ], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) week.d = weekday;
        else getParsingFlags(config).invalidWeekday = input;
    });
    addWeekParseToken([
        "d",
        "e",
        "E"
    ], function(input, week, config, token) {
        week[token] = toInt(input);
    });
    // HELPERS
    function parseWeekday(input, locale) {
        if (typeof input !== "string") return input;
        if (!isNaN(input)) return parseInt(input, 10);
        input = locale.weekdaysParse(input);
        if (typeof input === "number") return input;
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === "string") return locale.weekdaysParse(input) % 7 || 7;
        return isNaN(input) ? null : input;
    }
    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for(i = 0; i < 7; ++i){
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
                this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
                this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
            }
            if (!this._weekdaysParse[i]) {
                regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            // test the regex
            if (strict && format === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === "dd" && this._minWeekdaysParse[i].test(weekdayName)) return i;
            else if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
        }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
        } else return day;
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else return this.day() || 7;
    }
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysStrictRegex;
            else return this._weekdaysRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) this._weekdaysRegex = defaultWeekdaysRegex;
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysShortStrictRegex;
            else return this._weekdaysShortRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysMinStrictRegex;
            else return this._weekdaysMinRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ""));
            shortp = regexEscape(this.weekdaysShort(mom, ""));
            longp = regexEscape(this.weekdays(mom, ""));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
    }
    // FORMATTING
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken("H", [
        "HH",
        2
    ], 0, "hour");
    addFormatToken("h", [
        "hh",
        2
    ], 0, hFormat);
    addFormatToken("k", [
        "kk",
        2
    ], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem("a", true);
    meridiem("A", false);
    // ALIASES
    addUnitAlias("hour", "h");
    // PRIORITY
    addUnitPriority("hour", 13);
    // PARSING
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken([
        "H",
        "HH"
    ], HOUR);
    addParseToken([
        "k",
        "kk"
    ], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        "a",
        "A"
    ], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        "h",
        "hh"
    ], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    // LOCALES
    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) return isLower ? "pm" : "PM";
        else return isLower ? "am" : "AM";
    }
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    // internal storage for locale config files
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for(i = 0; i < minl; i += 1){
            if (arr1[i] !== arr2[i]) return i;
        }
        return minl;
    }
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while(i < names.length){
            split = normalizeLocale(names[i]).split("-");
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split("-") : null;
            while(j > 0){
                locale = loadLocale(split.slice(0, j).join("-"));
                if (locale) return locale;
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) break;
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && true && module && module.exports && isLocaleNameSane(name)) try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = undefined;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
        }
        return locales[name];
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) data = getLocale(key);
            else data = defineLocale(key, values);
            if (data) // moment.duration._locale = moment._locale = data;
            globalLocale = data;
            else if (typeof console !== "undefined" && console.warn) //warn user if arguments are passed but the locale could not be set
            console.warn("Locale " + key + " not found. Did you forget to load it?");
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) parentConfig = locales[config.parentLocale]._config;
                else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) parentConfig = locale._config;
                    else {
                        if (!localeFamilies[config.parentLocale]) localeFamilies[config.parentLocale] = [];
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) localeFamilies[name].forEach(function(x) {
                defineLocale(x.name, x.config);
            });
            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
            else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) parentConfig = tmpLocale._config;
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) // updateLocale is called for creating a new locale
                // Set abbr so it will have a name (getters return
                // undefined otherwise).
                config.abbr = name;
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }
            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) getSetGlobalLocale(name);
            } else if (locales[name] != null) delete locales[name];
        }
        return locales[name];
    }
    // returns locale data
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) key = key._locale._abbr;
        if (!key) return globalLocale;
        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) return locale;
            key = [
                key
            ];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) overflow = DATE;
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) overflow = WEEK;
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) overflow = WEEKDAY;
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        [
            "YYYYYY-MM-DD",
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            "YYYY-MM-DD",
            /\d{4}-\d\d-\d\d/
        ],
        [
            "GGGG-[W]WW-E",
            /\d{4}-W\d\d-\d/
        ],
        [
            "GGGG-[W]WW",
            /\d{4}-W\d\d/,
            false
        ],
        [
            "YYYY-DDD",
            /\d{4}-\d{3}/
        ],
        [
            "YYYY-MM",
            /\d{4}-\d\d/,
            false
        ],
        [
            "YYYYYYMMDD",
            /[+-]\d{10}/
        ],
        [
            "YYYYMMDD",
            /\d{8}/
        ],
        [
            "GGGG[W]WWE",
            /\d{4}W\d{3}/
        ],
        [
            "GGGG[W]WW",
            /\d{4}W\d{2}/,
            false
        ],
        [
            "YYYYDDD",
            /\d{7}/
        ],
        [
            "YYYYMM",
            /\d{6}/,
            false
        ],
        [
            "YYYY",
            /\d{4}/,
            false
        ]
    ], // iso time formats and regexes
    isoTimes = [
        [
            "HH:mm:ss.SSSS",
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            "HH:mm:ss,SSSS",
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            "HH:mm:ss",
            /\d\d:\d\d:\d\d/
        ],
        [
            "HH:mm",
            /\d\d:\d\d/
        ],
        [
            "HHmmss.SSSS",
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            "HHmmss,SSSS",
            /\d\d\d\d\d\d,\d+/
        ],
        [
            "HHmmss",
            /\d\d\d\d\d\d/
        ],
        [
            "HHmm",
            /\d\d\d\d/
        ],
        [
            "HH",
            /\d\d/
        ]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -240,
        EST: -300,
        CDT: -300,
        CST: -360,
        MDT: -360,
        MST: -420,
        PDT: -420,
        PST: -480
    };
    // date from iso format
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
            getParsingFlags(config).iso = true;
            for(i = 0, l = isoDatesLen; i < l; i++)if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for(i = 0, l = isoTimesLen; i < l; i++)if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || " ") + isoTimes[i][0];
                    break;
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) tzFormat = "Z";
                else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
        } else config._isValid = false;
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];
        if (secondStr) result.push(parseInt(secondStr, 10));
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) return 2000 + year;
        else if (year <= 999) return 1900 + year;
        return year;
    }
    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) return obsOffsets[obsOffset];
        else if (militaryOffset) // the only allowed military tz is Z
        return 0;
        else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) return;
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else config._isValid = false;
    }
    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        configFromRFC2822(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        if (config._strict) config._isValid = false;
        else // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
    });
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) return a;
        if (b != null) return b;
        return c;
    }
    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
        ];
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) return;
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) dayOfYearFromWeekInfo(config);
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) getParsingFlags(config)._overflowDayOfYear = true;
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for(i = 0; i < 3 && config._a[i] == null; ++i)config._a[i] = input[i] = currentDate[i];
        // Zero out whatever was not defaulted, including time
        for(; i < 7; i++)config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        if (config._nextDay) config._a[HOUR] = 24;
        // check for mismatching day of week
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) getParsingFlags(config).weekdayMismatch = true;
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) weekdayOverflow = true;
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            // Default to current week.
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) weekdayOverflow = true;
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) weekdayOverflow = true;
            } else // default to beginning of week
            weekday = dow;
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) getParsingFlags(config)._overflowWeeks = true;
        else if (weekdayOverflow != null) getParsingFlags(config)._overflowWeekday = true;
        else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    // constant that refers to the ISO standard
    hooks.ISO_8601 = function() {};
    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function() {};
    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = "" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for(i = 0; i < tokenLen; i++){
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) getParsingFlags(config).unusedInput.push(skipped);
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) getParsingFlags(config).empty = false;
                else getParsingFlags(config).unusedTokens.push(token);
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) getParsingFlags(config).unusedTokens.push(token);
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) getParsingFlags(config).unusedInput.push(string);
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) getParsingFlags(config).bigHour = undefined;
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) // nothing to do
        return hour;
        if (locale.meridiemHour != null) return locale.meridiemHour(hour, meridiem);
        else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) hour += 12;
            if (!isPm && hour === 12) hour = 0;
            return hour;
        } else // this is not supposed to happen
        return hour;
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for(i = 0; i < configfLen; i++){
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) tempConfig._useUTC = config._useUTC;
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) validFormatFound = true;
            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) bestFormatIsValid = true;
                }
            } else if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) return;
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([
            i.year,
            i.month,
            dayOrDate,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function(obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, "d");
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === "") return createInvalid({
            nullInput: true
        });
        if (typeof input === "string") config._i = input = config._locale.preparse(input);
        if (isMoment(input)) return new Moment(checkOverflow(input));
        else if (isDate(input)) config._d = input;
        else if (isArray(format)) configFromStringAndArray(config);
        else if (format) configFromStringAndFormat(config);
        else configFromInput(config);
        if (!isValid(config)) config._d = null;
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) config._d = new Date(hooks.now());
        else if (isDate(input)) config._d = new Date(input.valueOf());
        else if (typeof input === "string") configFromString(config);
        else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) configFromObject(config);
        else if (isNumber(input)) // from milliseconds
        config._d = new Date(input);
        else hooks.createFromInputFallback(config);
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) input = undefined;
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other < this ? this : other;
        else return createInvalid();
    }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other > this ? this : other;
        else return createInvalid();
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) moments = moments[0];
        if (!moments.length) return createLocal();
        res = moments[0];
        for(i = 1; i < moments.length; ++i)if (!moments[i].isValid() || moments[i][fn](res)) res = moments[i];
        return res;
    }
    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
    }
    var now = function() {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
    ];
    function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for(key in m){
            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) return false;
        }
        for(i = 0; i < orderLen; ++i)if (m[ordering[i]]) {
            if (unitHasDecimal) return false; // only allow non-integers for smallest unit
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) unitHasDecimal = true;
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 3600000; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) return Math.round(-1 * number) * -1;
        else return Math.round(number);
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for(i = 0; i < len; i++)if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) diffs++;
        return diffs + lengthDiff;
    }
    // FORMATTING
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset(), sign = "+";
            if (offset < 0) {
                offset = -offset;
                sign = "-";
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset("Z", ":");
    offset("ZZ", "");
    // PARSING
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken([
        "Z",
        "ZZ"
    ], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes;
        if (matches === null) return null;
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || [
            "-",
            0,
            0
        ];
        minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else return createLocal(input).local();
    }
    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function() {};
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) return input != null ? this : NaN;
        if (input != null) {
            if (typeof input === "string") {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) return this;
            } else if (Math.abs(input) < 16 && !keepMinutes) input = input * 60;
            if (!this._isUTC && keepLocalTime) localAdjust = getDateOffset(this);
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) this.add(localAdjust, "m");
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) addSubtract(this, createDuration(input - offset, "m"), 1, false);
                else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else return this._isUTC ? offset : getDateOffset(this);
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== "string") input = -input;
            this.utcOffset(input, keepLocalTime);
            return this;
        } else return -this.utcOffset();
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) this.subtract(getDateOffset(this), "m");
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) this.utcOffset(this._tzm, false, true);
        else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) this.utcOffset(tZone);
            else this.utcOffset(0, true);
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) return false;
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else this._isDSTShifted = false;
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
        if (isDuration(input)) duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
        };
        else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) duration[key] = +input;
            else duration.milliseconds = +input;
        } else if (match = aspNetRegex.exec(input)) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (match = isoRegex.exec(input)) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) // checks for null or undefined
        duration = {};
        else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) ret._locale = input._locale;
        if (isDuration(input) && hasOwnProp(input, "_isValid")) ret._isValid = input._isValid;
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(",", "."));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) --res.months;
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) return {
            milliseconds: 0,
            months: 0
        };
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) res = positiveMomentsDifference(base, other);
        else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). " + "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                tmp = val;
                val = period;
                period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) // No op
        return;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) setMonth(mom, get(mom, "Month") + months * isAdding);
        if (days) set$1(mom, "Date", get(mom, "Date") + days * isAdding);
        if (milliseconds) mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        if (updateOffset) hooks.updateOffset(mom, days || months);
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
        return typeof input === "string" || input instanceof String;
    }
    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "years",
            "year",
            "y",
            "months",
            "month",
            "M",
            "days",
            "day",
            "d",
            "dates",
            "date",
            "D",
            "hours",
            "hour",
            "h",
            "minutes",
            "minute",
            "m",
            "seconds",
            "second",
            "s",
            "milliseconds",
            "millisecond",
            "ms"
        ], i, property, propertyLen = properties.length;
        for(i = 0; i < propertyLen; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
        }).length === 0;
        return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "sameDay",
            "nextDay",
            "lastDay",
            "nextWeek",
            "lastWeek",
            "sameElse"
        ], i, property;
        for(i = 0; i < properties.length; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, "days", true);
        return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf("day"), format = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() > localInput.valueOf();
        else return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() < localInput.valueOf();
        else return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) return false;
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() === localInput.valueOf();
        else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) return NaN;
        that = cloneWithOffset(input, this);
        if (!that.isValid()) return NaN;
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch(units){
            case "year":
                output = monthDiff(this, that) / 12;
                break;
            case "month":
                output = monthDiff(this, that);
                break;
            case "quarter":
                output = monthDiff(this, that) / 3;
                break;
            case "second":
                output = (this - that) / 1e3;
                break; // 1000
            case "minute":
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case "hour":
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case "day":
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case "week":
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        if (a.date() < b.date()) // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) return null;
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) return this.toDate().toISOString();
            else return new Date(this.valueOf() + this.utcOffset() * 60000).toISOString().replace("Z", formatMoment(m, "Z"));
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
    }
    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */ function inspect() {
        if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
        if (!inputString) inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;
        if (key === undefined) return this._locale._abbr;
        else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) this._locale = newLocaleData;
            return this;
        }
    }
    var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === undefined) return this.localeData();
        else return this.locale(key);
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = 3506328 * MS_PER_HOUR;
    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        else return new Date(y, m, d).valueOf();
    }
    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        else return Date.UTC(y, m, d);
    }
    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case "year":
                time = startOfDate(this.year(), 0, 1);
                break;
            case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case "month":
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case "day":
            case "date":
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case "hour":
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case "minute":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case "second":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case "year":
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case "month":
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case "day":
            case "date":
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case "hour":
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case "minute":
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case "second":
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", [
        "y",
        1
    ], "yo", "eraYear");
    addFormatToken("y", [
        "yy",
        2
    ], 0, "eraYear");
    addFormatToken("y", [
        "yyy",
        3
    ], 0, "eraYear");
    addFormatToken("y", [
        "yyyy",
        4
    ], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken([
        "N",
        "NN",
        "NNN",
        "NNNN",
        "NNNNN"
    ], function(input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) getParsingFlags(config).era = era;
        else getParsingFlags(config).invalidEra = input;
    });
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken([
        "y",
        "yy",
        "yyy",
        "yyyy"
    ], YEAR);
    addParseToken([
        "yo"
    ], function(input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) match = input.match(config._locale._eraYearOrdinalRegex);
        if (config._locale.eraYearOrdinalParse) array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        else array[YEAR] = parseInt(input, 10);
    });
    function localeEras(m, format) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for(i = 0, l = eras.length; i < l; ++i){
            switch(typeof eras[i].since){
                case "string":
                    // truncate time
                    date = hooks(eras[i].since).startOf("day");
                    eras[i].since = date.valueOf();
                    break;
            }
            switch(typeof eras[i].until){
                case "undefined":
                    eras[i].until = Infinity;
                    break;
                case "string":
                    // truncate time
                    date = hooks(eras[i].until).startOf("day").valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }
    function localeErasParse(eraName, format, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for(i = 0, l = eras.length; i < l; ++i){
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();
            if (strict) switch(format){
                case "N":
                case "NN":
                case "NNN":
                    if (abbr === eraName) return eras[i];
                    break;
                case "NNNN":
                    if (name === eraName) return eras[i];
                    break;
                case "NNNNN":
                    if (narrow === eraName) return eras[i];
                    break;
            }
            else if ([
                name,
                abbr,
                narrow
            ].indexOf(eraName) >= 0) return eras[i];
        }
    }
    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === undefined) return hooks(era.since).year();
        else return hooks(era.since).year() + (year - era.offset) * dir;
    }
    function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].name;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].name;
        }
        return "";
    }
    function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].narrow;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].narrow;
        }
        return "";
    }
    function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].abbr;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].abbr;
        }
        return "";
    }
    function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            dir = eras[i].since <= eras[i].until ? 1 : -1;
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
        return this.year();
    }
    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) computeErasParse.call(this);
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) computeErasParse.call(this);
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) computeErasParse.call(this);
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for(i = 0, l = eras.length; i < l; ++i){
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));
            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
    }
    // FORMATTING
    addFormatToken(0, [
        "gg",
        2
    ], 0, function() {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        "GG",
        2
    ], 0, function() {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    // ALIASES
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    // PRIORITY
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    // PARSING
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken([
        "gggg",
        "ggggg",
        "GGGG",
        "GGGGG"
    ], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        "gg",
        "GG"
    ], function(input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    // MOMENTS
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) return weekOfYear(this, dow, doy).year;
        else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) week = weeksTarget;
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    // FORMATTING
    addFormatToken("Q", 0, "Qo", "quarter");
    // ALIASES
    addUnitAlias("quarter", "Q");
    // PRIORITY
    addUnitPriority("quarter", 7);
    // PARSING
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    // MOMENTS
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    // FORMATTING
    addFormatToken("D", [
        "DD",
        2
    ], "Do", "date");
    // ALIASES
    addUnitAlias("date", "D");
    // PRIORITY
    addUnitPriority("date", 9);
    // PARSING
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        "D",
        "DD"
    ], DATE);
    addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet("Date", true);
    // FORMATTING
    addFormatToken("DDD", [
        "DDDD",
        3
    ], "DDDo", "dayOfYear");
    // ALIASES
    addUnitAlias("dayOfYear", "DDD");
    // PRIORITY
    addUnitPriority("dayOfYear", 4);
    // PARSING
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken([
        "DDD",
        "DDDD"
    ], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    // FORMATTING
    addFormatToken("m", [
        "mm",
        2
    ], 0, "minute");
    // ALIASES
    addUnitAlias("minute", "m");
    // PRIORITY
    addUnitPriority("minute", 14);
    // PARSING
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken([
        "m",
        "mm"
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet("Minutes", false);
    // FORMATTING
    addFormatToken("s", [
        "ss",
        2
    ], 0, "second");
    // ALIASES
    addUnitAlias("second", "s");
    // PRIORITY
    addUnitPriority("second", 15);
    // PARSING
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken([
        "s",
        "ss"
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet("Seconds", false);
    // FORMATTING
    addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        "SS",
        2
    ], 0, function() {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        "SSS",
        3
    ], 0, "millisecond");
    addFormatToken(0, [
        "SSSS",
        4
    ], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        "SSSSS",
        5
    ], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        "SSSSSS",
        6
    ], 0, function() {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        "SSSSSSS",
        7
    ], 0, function() {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        "SSSSSSSS",
        8
    ], 0, function() {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        "SSSSSSSSS",
        9
    ], 0, function() {
        return this.millisecond() * 1000000;
    });
    // ALIASES
    addUnitAlias("millisecond", "ms");
    // PRIORITY
    addUnitPriority("millisecond", 16);
    // PARSING
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for(token = "SSSS"; token.length <= 9; token += "S")addRegexToken(token, matchUnsigned);
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1000);
    }
    for(token = "S"; token.length <= 9; token += "S")addParseToken(token, parseMs);
    getSetMillisecond = makeGetSet("Milliseconds", false);
    // FORMATTING
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    // MOMENTS
    function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
    };
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
    proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
    proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
    proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
    proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale(), utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || "";
        if (index != null) return get$1(format, index, field, "month");
        var i, out = [];
        for(i = 0; i < 12; i++)out[i] = get$1(format, i, field, "month");
        return out;
    }
    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === "boolean") {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || "";
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || "";
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
        if (index != null) return get$1(format, (index + shift) % 7, field, "day");
        for(i = 0; i < 7; i++)out[i] = get$1(format, (i + shift) % 7, field, "day");
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, "months");
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
        eras: [
            {
                since: "0001-01-01",
                until: Infinity,
                offset: 1,
                name: "Anno Domini",
                narrow: "AD",
                abbr: "AD"
            },
            {
                since: "0000-12-31",
                until: -Infinity,
                offset: 1,
                name: "Before Christ",
                narrow: "BC",
                abbr: "BC"
            }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number + output;
        }
    });
    // Side effect imports
    hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
    hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) return Math.floor(number);
        else return Math.ceil(number);
    }
    function bubble() {
        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) return NaN;
        var days, months, milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch(units){
                case "month":
                    return months;
                case "quarter":
                    return months / 3;
                case "year":
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch(units){
                case "week":
                    return days / 7 + milliseconds / 6048e5;
                case "day":
                    return days + milliseconds / 864e5;
                case "hour":
                    return days * 24 + milliseconds / 36e5;
                case "minute":
                    return days * 1440 + milliseconds / 6e4;
                case "second":
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case "millisecond":
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error("Unknown unit " + units);
            }
        }
    }
    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) return NaN;
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
        return function() {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as("s")), minutes = round(duration.as("m")), hours = round(duration.as("h")), days = round(duration.as("d")), months = round(duration.as("M")), weeks = round(duration.as("w")), years = round(duration.as("y")), a = seconds <= thresholds.ss && [
            "s",
            seconds
        ] || seconds < thresholds.s && [
            "ss",
            seconds
        ] || minutes <= 1 && [
            "m"
        ] || minutes < thresholds.m && [
            "mm",
            minutes
        ] || hours <= 1 && [
            "h"
        ] || hours < thresholds.h && [
            "hh",
            hours
        ] || days <= 1 && [
            "d"
        ] || days < thresholds.d && [
            "dd",
            days
        ];
        if (thresholds.w != null) a = a || weeks <= 1 && [
            "w"
        ] || weeks < thresholds.w && [
            "ww",
            weeks
        ];
        a = a || months <= 1 && [
            "M"
        ] || months < thresholds.M && [
            "MM",
            months
        ] || years <= 1 && [
            "y"
        ] || [
            "yy",
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) return round;
        if (typeof roundingFunction === "function") {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) return false;
        if (limit === undefined) return thresholds[threshold];
        thresholds[threshold] = limit;
        if (threshold === "s") thresholds.ss = limit - 1;
        return true;
    }
    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) return this.localeData().invalidDate();
        var withSuffix = false, th = thresholds, locale, output;
        if (typeof argWithSuffix === "object") {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") withSuffix = argWithSuffix;
        if (typeof argThresholds === "object") {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) th.ss = argThresholds.s - 1;
        }
        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);
        if (withSuffix) output = locale.pastFuture(+this, output);
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) return this.localeData().invalidDate();
        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return "P0D";
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years ? ymSign + years + "Y" : "") + (months ? ymSign + months + "M" : "") + (days ? daysSign + days + "D" : "") + (hours || minutes || seconds ? "T" : "") + (hours ? hmsSign + hours + "H" : "") + (minutes ? hmsSign + minutes + "M" : "") + (seconds ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
    proto$2.lang = lang;
    // FORMATTING
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    // PARSING
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
    };
    return hooks;
});

},{}]},["9HkbZ","2TEO4"], "2TEO4", "parcelRequire1ce0")

//# sourceMappingURL=index.js.map
